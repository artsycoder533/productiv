/*! For license information please see bundle.js.LICENSE.txt */
(()=>{"use strict";var t={917:(t,e,n)=>{t.exports=n.p+"6d4b16957e06b7a61672.png"}},e={};function n(s){var i=e[s];if(void 0!==i)return i.exports;var r=e[s]={exports:{}};return t[s](r,r.exports,n),r.exports}n.d=(t,e)=>{for(var s in e)n.o(e,s)&&!n.o(t,s)&&Object.defineProperty(t,s,{enumerable:!0,get:e[s]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t;n.g.importScripts&&(t=n.g.location+"");var e=n.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var s=e.getElementsByTagName("script");s.length&&(t=s[s.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=t})();var s={};(()=>{function t(){const t=new Date;return`${t.getFullYear()}-${t.getMonth()+1}-${t.getDate()}`}function e(){const t=document.querySelector(".modal"),e=document.querySelector(".modal__form");t.classList.toggle("showModal"),e.reset()}function i(t,e){const n=document.createElement(t);return n.classList.add(e),n}function r(t,e,n){const s=document.createElement(t);return s.classList.add(e),s.textContent=n,s}function o(t,e,n,s){const i=document.createElement(t);return i.className=e,i.setAttribute(n,s),i}function a(t,e,n,s,a,h){const d=i("div","todo__container");d.setAttribute("data-id",h);const f=i("article","todo"),p=i("div","todo__date"),m=r("small","date",n);p.appendChild(m);const g=r("div","todo__project",a);p.appendChild(g),f.appendChild(p);const y=i("div","todo__content"),v=r("div","todo__title",t),w=i("div","todo__priority"),E=r("small","priority",s);"high"===s?E.classList.add("high"):E.classList.add("normal"),w.appendChild(E),y.appendChild(v),y.appendChild(w);const I=i("div","todo__buttons"),b=o("button","todo__more","id","more"),_=i("i","fas");_.classList.add("fa-caret-down"),_.addEventListener("click",c),b.appendChild(_),I.appendChild(b);const T=o("button","todo__edit","id","edit"),S=i("i","fas");S.classList.add("fa-edit"),S.addEventListener("click",l),T.appendChild(S),I.appendChild(T);const k=o("button","todo__delete","id","delete"),C=i("i","fas");C.classList.add("fa-trash-alt"),C.addEventListener("click",u),k.appendChild(C),I.appendChild(k),y.append(I),f.appendChild(y),d.appendChild(f);const A=i("div","todo__details"),N=i("p","description");N.textContent=e;const R=i("p","fulltitle");return R.textContent=t,A.appendChild(R),A.appendChild(N),d.appendChild(A),d}function c(t){t.currentTarget.parentElement.parentElement.parentElement.parentElement.nextElementSibling.classList.toggle("showDetails")}function u(t){const e=document.querySelector(".todos"),n=t.currentTarget.parentElement.parentElement.parentElement.parentElement.parentElement;var s;e.removeChild(n),s=n.dataset.id,Gf.forEach(((t,e)=>{console.log(t),t.id===Number(s)&&(Gf.splice(e,1),console.log("here"),async function(t){const e=cf(zf,`${Bn()}tasks`,t);(await function(t){t=ef(t,rf);const e=ef(t.firestore,lf);return function(t,e,n={}){const s=new ma;return t.asyncQueue.enqueueAndForget((async()=>function(t,e,n,s,i){const r=new Hd({next:r=>{e.enqueueAndForget((()=>dd(t,o)));const a=r.docs.has(n);!a&&r.fromCache?i.reject(new pa(fa.UNAVAILABLE,"Failed to get document because the client is offline.")):a&&r.fromCache&&s&&"server"===s.source?i.reject(new pa(fa.UNAVAILABLE,'Failed to get document from server. (However, this document does exist in the local cache. Run again without setting source to "server" to retrieve the cached document.)')):i.resolve(r)},error:t=>i.reject(t)}),o=new gd(Lc(n.path),r,{includeMetadataChanges:!0,wo:!0});return hd(t,o)}(await Gd(t),t.asyncQueue,e,n,s))),s.promise}(hf(e),t._key).then((n=>function(t,e,n){const s=n.docs.get(e._key),i=new Hf(t);return new Vf(t,i,e._key,s,new Ff(n.hasPendingWrites,n.fromCache),e.converter)}(e,t,n)))}(e)).exists()&&function(t){$f(ef(t.firestore,lf),[new vu(t._key,ru.none())])}(e)}(s))}))}function l(t){const n=document.getElementById("form");document.querySelector(".form__heading").textContent="Edit Task";const s=function(t){const e=[];return Gf.forEach((n=>{console.log(typeof n.id,typeof t),n.id==t&&e.push(n)})),e[0]}(t.currentTarget.parentElement.parentElement.parentElement.parentElement.parentElement.dataset.id);document.querySelector(".modal"),e(),n.elements.namedItem("title").value=s.getTitle(),n.elements.namedItem("description").value=s.getDescription(),n.elements.namedItem("priority").value=s.getPriority(),n.elements.namedItem("project").value=s.getProject(),n.elements.namedItem("date").value=s.getDueDate(),document.getElementById("create").classList.add("hide");const i=document.getElementById("update");i.classList.remove("hide"),i.addEventListener("click",(()=>{const t=document.querySelector(".project__title");if(n.elements.namedItem("project").value===t.textContent)return function(t){const e=document.getElementById("form"),n=e.elements.namedItem("title").value,s=e.elements.namedItem("description").value,i=e.elements.namedItem("priority").value,r=e.elements.namedItem("project").value,o=e.elements.namedItem("date").value;document.querySelector(".todo__title").textContent=n,document.querySelector(".priority").textContent=i,"normal"===i?(document.querySelector(".priority").classList.remove("high"),document.querySelector(".priority").classList.add("normal")):"high"===i&&(document.querySelector(".priority").classList.remove("normal"),document.querySelector(".priority").classList.add("high")),document.querySelector(".todo__date").textContent=o,document.querySelector(".description").textContent=s,document.querySelector(".todo__project").textContent=r,Zf(n,s,o,i,r,t.getId())}(s),void e();const i=t.textContent,r=document.getElementById("miscellaneous"),o=document.getElementById("home"),a=document.getElementById("work"),c=n.elements.namedItem("title").value,u=n.elements.namedItem("description").value,l=n.elements.namedItem("priority").value,h=n.elements.namedItem("project").value,d=n.elements.namedItem("date").value;"work"===i&&(Zf(c,u,d,l,h,s.getId()),e(),a.click()),"home"===i&&(Zf(c,u,d,l,h,s.getId()),e(),o.click()),"miscellaneous"===i&&(Zf(c,u,d,l,h,s.getId()),e(),r.click())}))}n.d(s,{I:()=>pp}),i("section","todos");const h=document.querySelector(".container");function d(){[...h.children].forEach((t=>{t.remove()}))}const f=document.querySelector(".container");function p(t){[...f.children].forEach((t=>{t.remove()}));const e=i("h2","task__title");e.textContent="today"===t?"Due Today":t;const n=document.querySelector(".container"),s=i("section","todos");n.appendChild(e),n.appendChild(s)}function m(t){t.map((t=>{const{title:e,description:n,dueDate:s,priority:i,project:r,id:o}=t,c=document.querySelector(".todos");c.appendChild(a(e,n,s,i,r,o)),f.appendChild(c)}))}let g=0;function y(e){w();const n=document.querySelector(".container"),s=r("h2","inbox__title","Inbox");if(n.appendChild(s),0===e.length){const t=r("p","inbox__status","Your inbox is empty");return n.appendChild(s),n.appendChild(t),n}e.map((e=>{const s=i("div","inbox");s.setAttribute("data-id",e.id);const a=i("p","inbox__subject");e.dueDate===t()?a.textContent="You have a task that's due today":e.dueDate<t()&&(a.textContent="You have a task that's overdue!");const c=o("button","todo__delete","id","delete"),u=i("i","fas");u.classList.add("fa-trash-alt"),c.addEventListener("click",(function(t){v(e.id,t.currentTarget.parentElement)})),c.appendChild(u),"unread"===e.status&&a.classList.add("bold"),"read"===e.status&&a.classList.remove("bold");const l=function(t,e,n,s){const i=document.createElement("input");return i.setAttribute("type","checkbox"),i.setAttribute("name","checkbox"),i.setAttribute("id","checkbox"),i}();l.classList.add("checkbox"),a.addEventListener("click",(function(){!function(t,e,n){w();const s=document.querySelector(".container"),o=i("div","message__container"),a=r("h3","message__subject",e),c=r("p","message__title",t.title),u=r("p","message__priority",t.priority),l=r("p","message__date",t.dueDate),h=r("p","message__description",t.description),d=r("button","inbox__button","Back To Inbox");d.classList.add("button"),d.addEventListener("click",(function(){tp()})),o.appendChild(a),o.appendChild(c),o.appendChild(u),o.appendChild(l),o.appendChild(h),o.appendChild(d),s.appendChild(o),E("subtract"),t.status="read",Wf(t.title,t.description,t.dueDate,t.priority,t.project,String(t.id),t.status),console.log(t)}(e,a.textContent)})),s.appendChild(l),s.appendChild(a),s.appendChild(c),n.appendChild(s)}));const a=r("button","inbox__button","Delete Selected");return a.addEventListener("click",(function(){!function(t){const e=document.querySelector(".container").children;Array.from(e).forEach(((t,e)=>{t.children[0]&&t.children[0].checked&&(v(t.dataset.id,t),t.children[1].classList.contains("bold")&&E("subtract")),tp()}))}()})),n.appendChild(a),n}function v(t,e){document.querySelector(".container"),document.querySelector(".inbox"),e.remove(),function(t){Kf.forEach(((e,n)=>{e.id===Number(t)&&Kf.splice(n,1)}))}(t),tp()}function w(){[...document.querySelector(".container").children].forEach((t=>{t.remove()}))}function E(t){const e=document.getElementById("number"),n=document.getElementById("count");"add"===t?(g++,n.textContent=g,e.classList.add("number")):"subtract"===t&&(g--,g<1?(n.textContent="",e.classList.remove("number")):n.textContent=g)}const I={byteToCharMap_:null,charToByteMap_:null,byteToCharMapWebSafe_:null,charToByteMapWebSafe_:null,ENCODED_VALS_BASE:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",get ENCODED_VALS(){return this.ENCODED_VALS_BASE+"+/="},get ENCODED_VALS_WEBSAFE(){return this.ENCODED_VALS_BASE+"-_."},HAS_NATIVE_SUPPORT:"function"==typeof atob,encodeByteArray(t,e){if(!Array.isArray(t))throw Error("encodeByteArray takes an array as a parameter");this.init_();const n=e?this.byteToCharMapWebSafe_:this.byteToCharMap_,s=[];for(let e=0;e<t.length;e+=3){const i=t[e],r=e+1<t.length,o=r?t[e+1]:0,a=e+2<t.length,c=a?t[e+2]:0,u=i>>2,l=(3&i)<<4|o>>4;let h=(15&o)<<2|c>>6,d=63&c;a||(d=64,r||(h=64)),s.push(n[u],n[l],n[h],n[d])}return s.join("")},encodeString(t,e){return this.HAS_NATIVE_SUPPORT&&!e?btoa(t):this.encodeByteArray(function(t){const e=[];let n=0;for(let s=0;s<t.length;s++){let i=t.charCodeAt(s);i<128?e[n++]=i:i<2048?(e[n++]=i>>6|192,e[n++]=63&i|128):55296==(64512&i)&&s+1<t.length&&56320==(64512&t.charCodeAt(s+1))?(i=65536+((1023&i)<<10)+(1023&t.charCodeAt(++s)),e[n++]=i>>18|240,e[n++]=i>>12&63|128,e[n++]=i>>6&63|128,e[n++]=63&i|128):(e[n++]=i>>12|224,e[n++]=i>>6&63|128,e[n++]=63&i|128)}return e}(t),e)},decodeString(t,e){return this.HAS_NATIVE_SUPPORT&&!e?atob(t):function(t){const e=[];let n=0,s=0;for(;n<t.length;){const i=t[n++];if(i<128)e[s++]=String.fromCharCode(i);else if(i>191&&i<224){const r=t[n++];e[s++]=String.fromCharCode((31&i)<<6|63&r)}else if(i>239&&i<365){const r=((7&i)<<18|(63&t[n++])<<12|(63&t[n++])<<6|63&t[n++])-65536;e[s++]=String.fromCharCode(55296+(r>>10)),e[s++]=String.fromCharCode(56320+(1023&r))}else{const r=t[n++],o=t[n++];e[s++]=String.fromCharCode((15&i)<<12|(63&r)<<6|63&o)}}return e.join("")}(this.decodeStringToByteArray(t,e))},decodeStringToByteArray(t,e){this.init_();const n=e?this.charToByteMapWebSafe_:this.charToByteMap_,s=[];for(let e=0;e<t.length;){const i=n[t.charAt(e++)],r=e<t.length?n[t.charAt(e)]:0;++e;const o=e<t.length?n[t.charAt(e)]:64;++e;const a=e<t.length?n[t.charAt(e)]:64;if(++e,null==i||null==r||null==o||null==a)throw Error();const c=i<<2|r>>4;if(s.push(c),64!==o){const t=r<<4&240|o>>2;if(s.push(t),64!==a){const t=o<<6&192|a;s.push(t)}}}return s},init_(){if(!this.byteToCharMap_){this.byteToCharMap_={},this.charToByteMap_={},this.byteToCharMapWebSafe_={},this.charToByteMapWebSafe_={};for(let t=0;t<this.ENCODED_VALS.length;t++)this.byteToCharMap_[t]=this.ENCODED_VALS.charAt(t),this.charToByteMap_[this.byteToCharMap_[t]]=t,this.byteToCharMapWebSafe_[t]=this.ENCODED_VALS_WEBSAFE.charAt(t),this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[t]]=t,t>=this.ENCODED_VALS_BASE.length&&(this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(t)]=t,this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(t)]=t)}}};class b{constructor(){this.reject=()=>{},this.resolve=()=>{},this.promise=new Promise(((t,e)=>{this.resolve=t,this.reject=e}))}wrapCallback(t){return(e,n)=>{e?this.reject(e):this.resolve(n),"function"==typeof t&&(this.promise.catch((()=>{})),1===t.length?t(e):t(e,n))}}}function _(){return"undefined"!=typeof navigator&&"string"==typeof navigator.userAgent?navigator.userAgent:""}function T(){return"undefined"!=typeof window&&!!(window.cordova||window.phonegap||window.PhoneGap)&&/ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(_())}function S(){const t="object"==typeof chrome?chrome.runtime:"object"==typeof browser?browser.runtime:void 0;return"object"==typeof t&&void 0!==t.id}function k(){return"object"==typeof navigator&&"ReactNative"===navigator.product}function C(){const t=_();return t.indexOf("MSIE ")>=0||t.indexOf("Trident/")>=0}class A extends Error{constructor(t,e,n){super(e),this.code=t,this.customData=n,this.name="FirebaseError",Object.setPrototypeOf(this,A.prototype),Error.captureStackTrace&&Error.captureStackTrace(this,N.prototype.create)}}class N{constructor(t,e,n){this.service=t,this.serviceName=e,this.errors=n}create(t,...e){const n=e[0]||{},s=`${this.service}/${t}`,i=this.errors[t],r=i?function(t,e){return t.replace(R,((t,n)=>{const s=e[n];return null!=s?String(s):`<${n}?>`}))}(i,n):"Error",o=`${this.serviceName}: ${r} (${s}).`;return new A(s,o,n)}}const R=/\{\$([^}]+)}/g;function D(t,e){if(t===e)return!0;const n=Object.keys(t),s=Object.keys(e);for(const i of n){if(!s.includes(i))return!1;const n=t[i],r=e[i];if(L(n)&&L(r)){if(!D(n,r))return!1}else if(n!==r)return!1}for(const t of s)if(!n.includes(t))return!1;return!0}function L(t){return null!==t&&"object"==typeof t}function O(t){const e=[];for(const[n,s]of Object.entries(t))Array.isArray(s)?s.forEach((t=>{e.push(encodeURIComponent(n)+"="+encodeURIComponent(t))})):e.push(encodeURIComponent(n)+"="+encodeURIComponent(s));return e.length?"&"+e.join("&"):""}function P(t){const e={};return t.replace(/^\?/,"").split("&").forEach((t=>{if(t){const[n,s]=t.split("=");e[decodeURIComponent(n)]=decodeURIComponent(s)}})),e}function M(t){const e=t.indexOf("?");if(!e)return"";const n=t.indexOf("#",e);return t.substring(e,n>0?n:void 0)}class x{constructor(t,e){this.observers=[],this.unsubscribes=[],this.observerCount=0,this.task=Promise.resolve(),this.finalized=!1,this.onNoObservers=e,this.task.then((()=>{t(this)})).catch((t=>{this.error(t)}))}next(t){this.forEachObserver((e=>{e.next(t)}))}error(t){this.forEachObserver((e=>{e.error(t)})),this.close(t)}complete(){this.forEachObserver((t=>{t.complete()})),this.close()}subscribe(t,e,n){let s;if(void 0===t&&void 0===e&&void 0===n)throw new Error("Missing Observer.");s=function(t,e){if("object"!=typeof t||null===t)return!1;for(const e of["next","error","complete"])if(e in t&&"function"==typeof t[e])return!0;return!1}(t)?t:{next:t,error:e,complete:n},void 0===s.next&&(s.next=U),void 0===s.error&&(s.error=U),void 0===s.complete&&(s.complete=U);const i=this.unsubscribeOne.bind(this,this.observers.length);return this.finalized&&this.task.then((()=>{try{this.finalError?s.error(this.finalError):s.complete()}catch(t){}})),this.observers.push(s),i}unsubscribeOne(t){void 0!==this.observers&&void 0!==this.observers[t]&&(delete this.observers[t],this.observerCount-=1,0===this.observerCount&&void 0!==this.onNoObservers&&this.onNoObservers(this))}forEachObserver(t){if(!this.finalized)for(let e=0;e<this.observers.length;e++)this.sendOne(e,t)}sendOne(t,e){this.task.then((()=>{if(void 0!==this.observers&&void 0!==this.observers[t])try{e(this.observers[t])}catch(t){"undefined"!=typeof console&&console.error&&console.error(t)}}))}close(t){this.finalized||(this.finalized=!0,void 0!==t&&(this.finalError=t),this.task.then((()=>{this.observers=void 0,this.onNoObservers=void 0})))}}function U(){}function F(t){return t&&t._delegate?t._delegate:t}class V{constructor(t,e,n){this.name=t,this.instanceFactory=e,this.type=n,this.multipleInstances=!1,this.serviceProps={},this.instantiationMode="LAZY",this.onInstanceCreated=null}setInstantiationMode(t){return this.instantiationMode=t,this}setMultipleInstances(t){return this.multipleInstances=t,this}setServiceProps(t){return this.serviceProps=t,this}setInstanceCreatedCallback(t){return this.onInstanceCreated=t,this}}const q="[DEFAULT]";class j{constructor(t,e){this.name=t,this.container=e,this.component=null,this.instances=new Map,this.instancesDeferred=new Map,this.instancesOptions=new Map,this.onInitCallbacks=new Map}get(t){const e=this.normalizeInstanceIdentifier(t);if(!this.instancesDeferred.has(e)){const t=new b;if(this.instancesDeferred.set(e,t),this.isInitialized(e)||this.shouldAutoInitialize())try{const n=this.getOrInitializeService({instanceIdentifier:e});n&&t.resolve(n)}catch(t){}}return this.instancesDeferred.get(e).promise}getImmediate(t){var e;const n=this.normalizeInstanceIdentifier(null==t?void 0:t.identifier),s=null!==(e=null==t?void 0:t.optional)&&void 0!==e&&e;if(!this.isInitialized(n)&&!this.shouldAutoInitialize()){if(s)return null;throw Error(`Service ${this.name} is not available`)}try{return this.getOrInitializeService({instanceIdentifier:n})}catch(t){if(s)return null;throw t}}getComponent(){return this.component}setComponent(t){if(t.name!==this.name)throw Error(`Mismatching Component ${t.name} for Provider ${this.name}.`);if(this.component)throw Error(`Component for ${this.name} has already been provided`);if(this.component=t,this.shouldAutoInitialize()){if(function(t){return"EAGER"===t.instantiationMode}(t))try{this.getOrInitializeService({instanceIdentifier:q})}catch(t){}for(const[t,e]of this.instancesDeferred.entries()){const n=this.normalizeInstanceIdentifier(t);try{const t=this.getOrInitializeService({instanceIdentifier:n});e.resolve(t)}catch(t){}}}}clearInstance(t="[DEFAULT]"){this.instancesDeferred.delete(t),this.instancesOptions.delete(t),this.instances.delete(t)}async delete(){const t=Array.from(this.instances.values());await Promise.all([...t.filter((t=>"INTERNAL"in t)).map((t=>t.INTERNAL.delete())),...t.filter((t=>"_delete"in t)).map((t=>t._delete()))])}isComponentSet(){return null!=this.component}isInitialized(t="[DEFAULT]"){return this.instances.has(t)}getOptions(t="[DEFAULT]"){return this.instancesOptions.get(t)||{}}initialize(t={}){const{options:e={}}=t,n=this.normalizeInstanceIdentifier(t.instanceIdentifier);if(this.isInitialized(n))throw Error(`${this.name}(${n}) has already been initialized`);if(!this.isComponentSet())throw Error(`Component ${this.name} has not been registered yet`);const s=this.getOrInitializeService({instanceIdentifier:n,options:e});for(const[t,e]of this.instancesDeferred.entries())n===this.normalizeInstanceIdentifier(t)&&e.resolve(s);return s}onInit(t,e){var n;const s=this.normalizeInstanceIdentifier(e),i=null!==(n=this.onInitCallbacks.get(s))&&void 0!==n?n:new Set;i.add(t),this.onInitCallbacks.set(s,i);const r=this.instances.get(s);return r&&t(r,s),()=>{i.delete(t)}}invokeOnInitCallbacks(t,e){const n=this.onInitCallbacks.get(e);if(n)for(const s of n)try{s(t,e)}catch(t){}}getOrInitializeService({instanceIdentifier:t,options:e={}}){let n=this.instances.get(t);if(!n&&this.component&&(n=this.component.instanceFactory(this.container,{instanceIdentifier:(s=t,s===q?void 0:s),options:e}),this.instances.set(t,n),this.instancesOptions.set(t,e),this.invokeOnInitCallbacks(n,t),this.component.onInstanceCreated))try{this.component.onInstanceCreated(this.container,t,n)}catch(t){}var s;return n||null}normalizeInstanceIdentifier(t="[DEFAULT]"){return this.component?this.component.multipleInstances?t:q:t}shouldAutoInitialize(){return!!this.component&&"EXPLICIT"!==this.component.instantiationMode}}class B{constructor(t){this.name=t,this.providers=new Map}addComponent(t){const e=this.getProvider(t.name);if(e.isComponentSet())throw new Error(`Component ${t.name} has already been registered with ${this.name}`);e.setComponent(t)}addOrOverwriteComponent(t){this.getProvider(t.name).isComponentSet()&&this.providers.delete(t.name),this.addComponent(t)}getProvider(t){if(this.providers.has(t))return this.providers.get(t);const e=new j(t,this);return this.providers.set(t,e),e}getProviders(){return Array.from(this.providers.values())}}const H=[];var $,K;(K=$||($={}))[K.DEBUG=0]="DEBUG",K[K.VERBOSE=1]="VERBOSE",K[K.INFO=2]="INFO",K[K.WARN=3]="WARN",K[K.ERROR=4]="ERROR",K[K.SILENT=5]="SILENT";const z={debug:$.DEBUG,verbose:$.VERBOSE,info:$.INFO,warn:$.WARN,error:$.ERROR,silent:$.SILENT},G=$.INFO,W={[$.DEBUG]:"log",[$.VERBOSE]:"log",[$.INFO]:"info",[$.WARN]:"warn",[$.ERROR]:"error"},J=(t,e,...n)=>{if(e<t.logLevel)return;const s=(new Date).toISOString(),i=W[e];if(!i)throw new Error(`Attempted to log a message with an invalid logType (value: ${e})`);console[i](`[${s}]  ${t.name}:`,...n)};class Q{constructor(t){this.name=t,this._logLevel=G,this._logHandler=J,this._userLogHandler=null,H.push(this)}get logLevel(){return this._logLevel}set logLevel(t){if(!(t in $))throw new TypeError(`Invalid value "${t}" assigned to \`logLevel\``);this._logLevel=t}setLogLevel(t){this._logLevel="string"==typeof t?z[t]:t}get logHandler(){return this._logHandler}set logHandler(t){if("function"!=typeof t)throw new TypeError("Value assigned to `logHandler` must be a function");this._logHandler=t}get userLogHandler(){return this._userLogHandler}set userLogHandler(t){this._userLogHandler=t}debug(...t){this._userLogHandler&&this._userLogHandler(this,$.DEBUG,...t),this._logHandler(this,$.DEBUG,...t)}log(...t){this._userLogHandler&&this._userLogHandler(this,$.VERBOSE,...t),this._logHandler(this,$.VERBOSE,...t)}info(...t){this._userLogHandler&&this._userLogHandler(this,$.INFO,...t),this._logHandler(this,$.INFO,...t)}warn(...t){this._userLogHandler&&this._userLogHandler(this,$.WARN,...t),this._logHandler(this,$.WARN,...t)}error(...t){this._userLogHandler&&this._userLogHandler(this,$.ERROR,...t),this._logHandler(this,$.ERROR,...t)}}class X{constructor(t){this.container=t}getPlatformInfoString(){return this.container.getProviders().map((t=>{if(function(t){const e=t.getComponent();return"VERSION"===(null==e?void 0:e.type)}(t)){const e=t.getImmediate();return`${e.library}/${e.version}`}return null})).filter((t=>t)).join(" ")}}const Y="@firebase/app",Z="0.7.11",tt=new Q("@firebase/app"),et={[Y]:"fire-core","@firebase/app-compat":"fire-core-compat","@firebase/analytics":"fire-analytics","@firebase/analytics-compat":"fire-analytics-compat","@firebase/app-check":"fire-app-check","@firebase/app-check-compat":"fire-app-check-compat","@firebase/auth":"fire-auth","@firebase/auth-compat":"fire-auth-compat","@firebase/database":"fire-rtdb","@firebase/database-compat":"fire-rtdb-compat","@firebase/functions":"fire-fn","@firebase/functions-compat":"fire-fn-compat","@firebase/installations":"fire-iid","@firebase/installations-compat":"fire-iid-compat","@firebase/messaging":"fire-fcm","@firebase/messaging-compat":"fire-fcm-compat","@firebase/performance":"fire-perf","@firebase/performance-compat":"fire-perf-compat","@firebase/remote-config":"fire-rc","@firebase/remote-config-compat":"fire-rc-compat","@firebase/storage":"fire-gcs","@firebase/storage-compat":"fire-gcs-compat","@firebase/firestore":"fire-fst","@firebase/firestore-compat":"fire-fst-compat","fire-js":"fire-js",firebase:"fire-js-all"},nt=new Map,st=new Map;function it(t,e){try{t.container.addComponent(e)}catch(n){tt.debug(`Component ${e.name} failed to register with FirebaseApp ${t.name}`,n)}}function rt(t){const e=t.name;if(st.has(e))return tt.debug(`There were multiple attempts to register component ${e}.`),!1;st.set(e,t);for(const e of nt.values())it(e,t);return!0}function ot(t,e){return t.container.getProvider(e)}const at=new N("app","Firebase",{"no-app":"No Firebase App '{$appName}' has been created - call Firebase App.initializeApp()","bad-app-name":"Illegal App name: '{$appName}","duplicate-app":"Firebase App named '{$appName}' already exists with different options or config","app-deleted":"Firebase App named '{$appName}' already deleted","invalid-app-argument":"firebase.{$appName}() takes either no argument or a Firebase App instance.","invalid-log-argument":"First argument to `onLog` must be null or a function."});class ct{constructor(t,e,n){this._isDeleted=!1,this._options=Object.assign({},t),this._config=Object.assign({},e),this._name=e.name,this._automaticDataCollectionEnabled=e.automaticDataCollectionEnabled,this._container=n,this.container.addComponent(new V("app",(()=>this),"PUBLIC"))}get automaticDataCollectionEnabled(){return this.checkDestroyed(),this._automaticDataCollectionEnabled}set automaticDataCollectionEnabled(t){this.checkDestroyed(),this._automaticDataCollectionEnabled=t}get name(){return this.checkDestroyed(),this._name}get options(){return this.checkDestroyed(),this._options}get config(){return this.checkDestroyed(),this._config}get container(){return this._container}get isDeleted(){return this._isDeleted}set isDeleted(t){this._isDeleted=t}checkDestroyed(){if(this.isDeleted)throw at.create("app-deleted",{appName:this._name})}}const ut="9.6.1";function lt(t="[DEFAULT]"){const e=nt.get(t);if(!e)throw at.create("no-app",{appName:t});return e}function ht(t,e,n){var s;let i=null!==(s=et[t])&&void 0!==s?s:t;n&&(i+=`-${n}`);const r=i.match(/\s|\//),o=e.match(/\s|\//);if(r||o){const t=[`Unable to register library "${i}" with version "${e}":`];return r&&t.push(`library name "${i}" contains illegal characters (whitespace or "/")`),r&&o&&t.push("and"),o&&t.push(`version name "${e}" contains illegal characters (whitespace or "/")`),void tt.warn(t.join(" "))}rt(new V(`${i}-version`,(()=>({library:i,version:e})),"VERSION"))}function dt(t,e){var n={};for(var s in t)Object.prototype.hasOwnProperty.call(t,s)&&e.indexOf(s)<0&&(n[s]=t[s]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(s=Object.getOwnPropertySymbols(t);i<s.length;i++)e.indexOf(s[i])<0&&Object.prototype.propertyIsEnumerable.call(t,s[i])&&(n[s[i]]=t[s[i]])}return n}rt(new V("platform-logger",(t=>new X(t)),"PRIVATE")),ht(Y,Z,""),ht(Y,Z,"esm2017"),ht("fire-js",""),Object.create,Object.create;const ft=function(){return{"dependent-sdk-initialized-before-auth":"Another Firebase SDK was initialized and is trying to use Auth before Auth is initialized. Please be sure to call `initializeAuth` or `getAuth` before starting any other Firebase SDK."}},pt=new N("auth","Firebase",{"dependent-sdk-initialized-before-auth":"Another Firebase SDK was initialized and is trying to use Auth before Auth is initialized. Please be sure to call `initializeAuth` or `getAuth` before starting any other Firebase SDK."}),mt=new Q("@firebase/auth");function gt(t,...e){mt.logLevel<=$.ERROR&&mt.error(`Auth (9.6.1): ${t}`,...e)}function yt(t,...e){throw wt(t,...e)}function vt(t,...e){return wt(t,...e)}function wt(t,...e){if("string"!=typeof t){const n=e[0],s=[...e.slice(1)];return s[0]&&(s[0].appName=t.name),t._errorFactory.create(n,...s)}return pt.create(t,...e)}function Et(t,e,...n){if(!t)throw wt(e,...n)}function It(t){const e="INTERNAL ASSERTION FAILED: "+t;throw gt(e),new Error(e)}function bt(t,e){t||It(e)}const _t=new Map;function Tt(t){bt(t instanceof Function,"Expected a class definition");let e=_t.get(t);return e?(bt(e instanceof t,"Instance stored in cache mismatched with class"),e):(e=new t,_t.set(t,e),e)}function St(){var t;return"undefined"!=typeof self&&(null===(t=self.location)||void 0===t?void 0:t.href)||""}function kt(){var t;return"undefined"!=typeof self&&(null===(t=self.location)||void 0===t?void 0:t.protocol)||null}class Ct{constructor(t,e){this.shortDelay=t,this.longDelay=e,bt(e>t,"Short delay should be less than long delay!"),this.isMobile=T()||k()}get(){return"undefined"!=typeof navigator&&navigator&&"onLine"in navigator&&"boolean"==typeof navigator.onLine&&("http:"===kt()||"https:"===kt()||S()||"connection"in navigator)&&!navigator.onLine?Math.min(5e3,this.shortDelay):this.isMobile?this.longDelay:this.shortDelay}}function At(t,e){bt(t.emulator,"Emulator should always be set here");const{url:n}=t.emulator;return e?`${n}${e.startsWith("/")?e.slice(1):e}`:n}class Nt{static initialize(t,e,n){this.fetchImpl=t,e&&(this.headersImpl=e),n&&(this.responseImpl=n)}static fetch(){return this.fetchImpl?this.fetchImpl:"undefined"!=typeof self&&"fetch"in self?self.fetch:void It("Could not find fetch implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill")}static headers(){return this.headersImpl?this.headersImpl:"undefined"!=typeof self&&"Headers"in self?self.Headers:void It("Could not find Headers implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill")}static response(){return this.responseImpl?this.responseImpl:"undefined"!=typeof self&&"Response"in self?self.Response:void It("Could not find Response implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill")}}const Rt={CREDENTIAL_MISMATCH:"custom-token-mismatch",MISSING_CUSTOM_TOKEN:"internal-error",INVALID_IDENTIFIER:"invalid-email",MISSING_CONTINUE_URI:"internal-error",INVALID_PASSWORD:"wrong-password",MISSING_PASSWORD:"internal-error",EMAIL_EXISTS:"email-already-in-use",PASSWORD_LOGIN_DISABLED:"operation-not-allowed",INVALID_IDP_RESPONSE:"invalid-credential",INVALID_PENDING_TOKEN:"invalid-credential",FEDERATED_USER_ID_ALREADY_LINKED:"credential-already-in-use",MISSING_REQ_TYPE:"internal-error",EMAIL_NOT_FOUND:"user-not-found",RESET_PASSWORD_EXCEED_LIMIT:"too-many-requests",EXPIRED_OOB_CODE:"expired-action-code",INVALID_OOB_CODE:"invalid-action-code",MISSING_OOB_CODE:"internal-error",CREDENTIAL_TOO_OLD_LOGIN_AGAIN:"requires-recent-login",INVALID_ID_TOKEN:"invalid-user-token",TOKEN_EXPIRED:"user-token-expired",USER_NOT_FOUND:"user-token-expired",TOO_MANY_ATTEMPTS_TRY_LATER:"too-many-requests",INVALID_CODE:"invalid-verification-code",INVALID_SESSION_INFO:"invalid-verification-id",INVALID_TEMPORARY_PROOF:"invalid-credential",MISSING_SESSION_INFO:"missing-verification-id",SESSION_EXPIRED:"code-expired",MISSING_ANDROID_PACKAGE_NAME:"missing-android-pkg-name",UNAUTHORIZED_DOMAIN:"unauthorized-continue-uri",INVALID_OAUTH_CLIENT_ID:"invalid-oauth-client-id",ADMIN_ONLY_OPERATION:"admin-restricted-operation",INVALID_MFA_PENDING_CREDENTIAL:"invalid-multi-factor-session",MFA_ENROLLMENT_NOT_FOUND:"multi-factor-info-not-found",MISSING_MFA_ENROLLMENT_ID:"missing-multi-factor-info",MISSING_MFA_PENDING_CREDENTIAL:"missing-multi-factor-session",SECOND_FACTOR_EXISTS:"second-factor-already-in-use",SECOND_FACTOR_LIMIT_EXCEEDED:"maximum-second-factor-count-exceeded",BLOCKING_FUNCTION_ERROR_RESPONSE:"internal-error"},Dt=new Ct(3e4,6e4);function Lt(t,e){return t.tenantId&&!e.tenantId?Object.assign(Object.assign({},e),{tenantId:t.tenantId}):e}async function Ot(t,e,n,s,i={}){return Pt(t,i,(async()=>{let i={},r={};s&&("GET"===e?r=s:i={body:JSON.stringify(s)});const o=O(Object.assign({key:t.config.apiKey},r)).slice(1),a=await t._getAdditionalHeaders();return a["Content-Type"]="application/json",t.languageCode&&(a["X-Firebase-Locale"]=t.languageCode),Nt.fetch()(xt(t,t.config.apiHost,n,o),Object.assign({method:e,headers:a,referrerPolicy:"no-referrer"},i))}))}async function Pt(t,e,n){t._canInitEmulator=!1;const s=Object.assign(Object.assign({},Rt),e);try{const e=new Ut(t),i=await Promise.race([n(),e.promise]);e.clearNetworkTimeout();const r=await i.json();if("needConfirmation"in r)throw Ft(t,"account-exists-with-different-credential",r);if(i.ok&&!("errorMessage"in r))return r;{const e=i.ok?r.errorMessage:r.error.message,[n,o]=e.split(" : ");if("FEDERATED_USER_ID_ALREADY_LINKED"===n)throw Ft(t,"credential-already-in-use",r);if("EMAIL_EXISTS"===n)throw Ft(t,"email-already-in-use",r);const a=s[n]||n.toLowerCase().replace(/[_\s]+/g,"-");if(o)throw function(t,e,n){const s=Object.assign(Object.assign({},ft()),{[e]:n});return new N("auth","Firebase",s).create(e,{appName:t.name})}(t,a,o);yt(t,a)}}catch(e){if(e instanceof A)throw e;yt(t,"network-request-failed")}}async function Mt(t,e,n,s,i={}){const r=await Ot(t,e,n,s,i);return"mfaPendingCredential"in r&&yt(t,"multi-factor-auth-required",{_serverResponse:r}),r}function xt(t,e,n,s){const i=`${e}${n}?${s}`;return t.config.emulator?At(t.config,i):`${t.config.apiScheme}://${i}`}class Ut{constructor(t){this.auth=t,this.timer=null,this.promise=new Promise(((t,e)=>{this.timer=setTimeout((()=>e(vt(this.auth,"timeout"))),Dt.get())}))}clearNetworkTimeout(){clearTimeout(this.timer)}}function Ft(t,e,n){const s={appName:t.name};n.email&&(s.email=n.email),n.phoneNumber&&(s.phoneNumber=n.phoneNumber);const i=vt(t,e,s);return i.customData._tokenResponse=n,i}function Vt(t){if(t)try{const e=new Date(Number(t));if(!isNaN(e.getTime()))return e.toUTCString()}catch(t){}}function qt(t){return 1e3*Number(t)}function jt(t){const[e,n,s]=t.split(".");if(void 0===e||void 0===n||void 0===s)return gt("JWT malformed, contained fewer than 3 sections"),null;try{const t=function(t){try{return I.decodeString(t,!0)}catch(t){console.error("base64Decode failed: ",t)}return null}(n);return t?JSON.parse(t):(gt("Failed to decode base64 JWT payload"),null)}catch(t){return gt("Caught error parsing JWT payload as JSON",t),null}}async function Bt(t,e,n=!1){if(n)return e;try{return await e}catch(e){throw e instanceof A&&function({code:t}){return"auth/user-disabled"===t||"auth/user-token-expired"===t}(e)&&t.auth.currentUser===t&&await t.auth.signOut(),e}}class Ht{constructor(t){this.user=t,this.isRunning=!1,this.timerId=null,this.errorBackoff=3e4}_start(){this.isRunning||(this.isRunning=!0,this.schedule())}_stop(){this.isRunning&&(this.isRunning=!1,null!==this.timerId&&clearTimeout(this.timerId))}getInterval(t){var e;if(t){const t=this.errorBackoff;return this.errorBackoff=Math.min(2*this.errorBackoff,96e4),t}{this.errorBackoff=3e4;const t=(null!==(e=this.user.stsTokenManager.expirationTime)&&void 0!==e?e:0)-Date.now()-3e5;return Math.max(0,t)}}schedule(t=!1){if(!this.isRunning)return;const e=this.getInterval(t);this.timerId=setTimeout((async()=>{await this.iteration()}),e)}async iteration(){try{await this.user.getIdToken(!0)}catch(t){return void("auth/network-request-failed"===t.code&&this.schedule(!0))}this.schedule()}}class $t{constructor(t,e){this.createdAt=t,this.lastLoginAt=e,this._initializeTime()}_initializeTime(){this.lastSignInTime=Vt(this.lastLoginAt),this.creationTime=Vt(this.createdAt)}_copy(t){this.createdAt=t.createdAt,this.lastLoginAt=t.lastLoginAt,this._initializeTime()}toJSON(){return{createdAt:this.createdAt,lastLoginAt:this.lastLoginAt}}}async function Kt(t){var e;const n=t.auth,s=await t.getIdToken(),i=await Bt(t,async function(t,e){return Ot(t,"POST","/v1/accounts:lookup",e)}(n,{idToken:s}));Et(null==i?void 0:i.users.length,n,"internal-error");const r=i.users[0];t._notifyReloadListener(r);const o=(null===(e=r.providerUserInfo)||void 0===e?void 0:e.length)?r.providerUserInfo.map((t=>{var{providerId:e}=t,n=dt(t,["providerId"]);return{providerId:e,uid:n.rawId||"",displayName:n.displayName||null,email:n.email||null,phoneNumber:n.phoneNumber||null,photoURL:n.photoUrl||null}})):[],a=(c=t.providerData,u=o,[...c.filter((t=>!u.some((e=>e.providerId===t.providerId)))),...u]);var c,u;const l=t.isAnonymous,h=!(t.email&&r.passwordHash||(null==a?void 0:a.length)),d=!!l&&h,f={uid:r.localId,displayName:r.displayName||null,photoURL:r.photoUrl||null,email:r.email||null,emailVerified:r.emailVerified||!1,phoneNumber:r.phoneNumber||null,tenantId:r.tenantId||null,providerData:a,metadata:new $t(r.createdAt,r.lastLoginAt),isAnonymous:d};Object.assign(t,f)}class zt{constructor(){this.refreshToken=null,this.accessToken=null,this.expirationTime=null}get isExpired(){return!this.expirationTime||Date.now()>this.expirationTime-3e4}updateFromServerResponse(t){Et(t.idToken,"internal-error"),Et(void 0!==t.idToken,"internal-error"),Et(void 0!==t.refreshToken,"internal-error");const e="expiresIn"in t&&void 0!==t.expiresIn?Number(t.expiresIn):function(t){const e=jt(t);return Et(e,"internal-error"),Et(void 0!==e.exp,"internal-error"),Et(void 0!==e.iat,"internal-error"),Number(e.exp)-Number(e.iat)}(t.idToken);this.updateTokensAndExpiration(t.idToken,t.refreshToken,e)}async getToken(t,e=!1){return Et(!this.accessToken||this.refreshToken,t,"user-token-expired"),e||!this.accessToken||this.isExpired?this.refreshToken?(await this.refresh(t,this.refreshToken),this.accessToken):null:this.accessToken}clearRefreshToken(){this.refreshToken=null}async refresh(t,e){const{accessToken:n,refreshToken:s,expiresIn:i}=await async function(t,e){const n=await Pt(t,{},(async()=>{const n=O({grant_type:"refresh_token",refresh_token:e}).slice(1),{tokenApiHost:s,apiKey:i}=t.config,r=xt(t,s,"/v1/token",`key=${i}`),o=await t._getAdditionalHeaders();return o["Content-Type"]="application/x-www-form-urlencoded",Nt.fetch()(r,{method:"POST",headers:o,body:n})}));return{accessToken:n.access_token,expiresIn:n.expires_in,refreshToken:n.refresh_token}}(t,e);this.updateTokensAndExpiration(n,s,Number(i))}updateTokensAndExpiration(t,e,n){this.refreshToken=e||null,this.accessToken=t||null,this.expirationTime=Date.now()+1e3*n}static fromJSON(t,e){const{refreshToken:n,accessToken:s,expirationTime:i}=e,r=new zt;return n&&(Et("string"==typeof n,"internal-error",{appName:t}),r.refreshToken=n),s&&(Et("string"==typeof s,"internal-error",{appName:t}),r.accessToken=s),i&&(Et("number"==typeof i,"internal-error",{appName:t}),r.expirationTime=i),r}toJSON(){return{refreshToken:this.refreshToken,accessToken:this.accessToken,expirationTime:this.expirationTime}}_assign(t){this.accessToken=t.accessToken,this.refreshToken=t.refreshToken,this.expirationTime=t.expirationTime}_clone(){return Object.assign(new zt,this.toJSON())}_performRefresh(){return It("not implemented")}}function Gt(t,e){Et("string"==typeof t||void 0===t,"internal-error",{appName:e})}class Wt{constructor(t){var{uid:e,auth:n,stsTokenManager:s}=t,i=dt(t,["uid","auth","stsTokenManager"]);this.providerId="firebase",this.emailVerified=!1,this.isAnonymous=!1,this.tenantId=null,this.providerData=[],this.proactiveRefresh=new Ht(this),this.reloadUserInfo=null,this.reloadListener=null,this.uid=e,this.auth=n,this.stsTokenManager=s,this.accessToken=s.accessToken,this.displayName=i.displayName||null,this.email=i.email||null,this.emailVerified=i.emailVerified||!1,this.phoneNumber=i.phoneNumber||null,this.photoURL=i.photoURL||null,this.isAnonymous=i.isAnonymous||!1,this.tenantId=i.tenantId||null,this.metadata=new $t(i.createdAt||void 0,i.lastLoginAt||void 0)}async getIdToken(t){const e=await Bt(this,this.stsTokenManager.getToken(this.auth,t));return Et(e,this.auth,"internal-error"),this.accessToken!==e&&(this.accessToken=e,await this.auth._persistUserIfCurrent(this),this.auth._notifyListenersIfCurrent(this)),e}getIdTokenResult(t){return async function(t,e=!1){const n=F(t),s=await n.getIdToken(e),i=jt(s);Et(i&&i.exp&&i.auth_time&&i.iat,n.auth,"internal-error");const r="object"==typeof i.firebase?i.firebase:void 0,o=null==r?void 0:r.sign_in_provider;return{claims:i,token:s,authTime:Vt(qt(i.auth_time)),issuedAtTime:Vt(qt(i.iat)),expirationTime:Vt(qt(i.exp)),signInProvider:o||null,signInSecondFactor:(null==r?void 0:r.sign_in_second_factor)||null}}(this,t)}reload(){return async function(t){const e=F(t);await Kt(e),await e.auth._persistUserIfCurrent(e),e.auth._notifyListenersIfCurrent(e)}(this)}_assign(t){this!==t&&(Et(this.uid===t.uid,this.auth,"internal-error"),this.displayName=t.displayName,this.photoURL=t.photoURL,this.email=t.email,this.emailVerified=t.emailVerified,this.phoneNumber=t.phoneNumber,this.isAnonymous=t.isAnonymous,this.tenantId=t.tenantId,this.providerData=t.providerData.map((t=>Object.assign({},t))),this.metadata._copy(t.metadata),this.stsTokenManager._assign(t.stsTokenManager))}_clone(t){return new Wt(Object.assign(Object.assign({},this),{auth:t,stsTokenManager:this.stsTokenManager._clone()}))}_onReload(t){Et(!this.reloadListener,this.auth,"internal-error"),this.reloadListener=t,this.reloadUserInfo&&(this._notifyReloadListener(this.reloadUserInfo),this.reloadUserInfo=null)}_notifyReloadListener(t){this.reloadListener?this.reloadListener(t):this.reloadUserInfo=t}_startProactiveRefresh(){this.proactiveRefresh._start()}_stopProactiveRefresh(){this.proactiveRefresh._stop()}async _updateTokensIfNecessary(t,e=!1){let n=!1;t.idToken&&t.idToken!==this.stsTokenManager.accessToken&&(this.stsTokenManager.updateFromServerResponse(t),n=!0),e&&await Kt(this),await this.auth._persistUserIfCurrent(this),n&&this.auth._notifyListenersIfCurrent(this)}async delete(){const t=await this.getIdToken();return await Bt(this,async function(t,e){return Ot(t,"POST","/v1/accounts:delete",e)}(this.auth,{idToken:t})),this.stsTokenManager.clearRefreshToken(),this.auth.signOut()}toJSON(){return Object.assign(Object.assign({uid:this.uid,email:this.email||void 0,emailVerified:this.emailVerified,displayName:this.displayName||void 0,isAnonymous:this.isAnonymous,photoURL:this.photoURL||void 0,phoneNumber:this.phoneNumber||void 0,tenantId:this.tenantId||void 0,providerData:this.providerData.map((t=>Object.assign({},t))),stsTokenManager:this.stsTokenManager.toJSON(),_redirectEventId:this._redirectEventId},this.metadata.toJSON()),{apiKey:this.auth.config.apiKey,appName:this.auth.name})}get refreshToken(){return this.stsTokenManager.refreshToken||""}static _fromJSON(t,e){var n,s,i,r,o,a,c,u;const l=null!==(n=e.displayName)&&void 0!==n?n:void 0,h=null!==(s=e.email)&&void 0!==s?s:void 0,d=null!==(i=e.phoneNumber)&&void 0!==i?i:void 0,f=null!==(r=e.photoURL)&&void 0!==r?r:void 0,p=null!==(o=e.tenantId)&&void 0!==o?o:void 0,m=null!==(a=e._redirectEventId)&&void 0!==a?a:void 0,g=null!==(c=e.createdAt)&&void 0!==c?c:void 0,y=null!==(u=e.lastLoginAt)&&void 0!==u?u:void 0,{uid:v,emailVerified:w,isAnonymous:E,providerData:I,stsTokenManager:b}=e;Et(v&&b,t,"internal-error");const _=zt.fromJSON(this.name,b);Et("string"==typeof v,t,"internal-error"),Gt(l,t.name),Gt(h,t.name),Et("boolean"==typeof w,t,"internal-error"),Et("boolean"==typeof E,t,"internal-error"),Gt(d,t.name),Gt(f,t.name),Gt(p,t.name),Gt(m,t.name),Gt(g,t.name),Gt(y,t.name);const T=new Wt({uid:v,auth:t,email:h,emailVerified:w,displayName:l,isAnonymous:E,photoURL:f,phoneNumber:d,tenantId:p,stsTokenManager:_,createdAt:g,lastLoginAt:y});return I&&Array.isArray(I)&&(T.providerData=I.map((t=>Object.assign({},t)))),m&&(T._redirectEventId=m),T}static async _fromIdTokenResponse(t,e,n=!1){const s=new zt;s.updateFromServerResponse(e);const i=new Wt({uid:e.localId,auth:t,stsTokenManager:s,isAnonymous:n});return await Kt(i),i}}class Jt{constructor(){this.type="NONE",this.storage={}}async _isAvailable(){return!0}async _set(t,e){this.storage[t]=e}async _get(t){const e=this.storage[t];return void 0===e?null:e}async _remove(t){delete this.storage[t]}_addListener(t,e){}_removeListener(t,e){}}Jt.type="NONE";const Qt=Jt;function Xt(t,e,n){return`firebase:${t}:${e}:${n}`}class Yt{constructor(t,e,n){this.persistence=t,this.auth=e,this.userKey=n;const{config:s,name:i}=this.auth;this.fullUserKey=Xt(this.userKey,s.apiKey,i),this.fullPersistenceKey=Xt("persistence",s.apiKey,i),this.boundEventHandler=e._onStorageEvent.bind(e),this.persistence._addListener(this.fullUserKey,this.boundEventHandler)}setCurrentUser(t){return this.persistence._set(this.fullUserKey,t.toJSON())}async getCurrentUser(){const t=await this.persistence._get(this.fullUserKey);return t?Wt._fromJSON(this.auth,t):null}removeCurrentUser(){return this.persistence._remove(this.fullUserKey)}savePersistenceForRedirect(){return this.persistence._set(this.fullPersistenceKey,this.persistence.type)}async setPersistence(t){if(this.persistence===t)return;const e=await this.getCurrentUser();return await this.removeCurrentUser(),this.persistence=t,e?this.setCurrentUser(e):void 0}delete(){this.persistence._removeListener(this.fullUserKey,this.boundEventHandler)}static async create(t,e,n="authUser"){if(!e.length)return new Yt(Tt(Qt),t,n);const s=(await Promise.all(e.map((async t=>{if(await t._isAvailable())return t})))).filter((t=>t));let i=s[0]||Tt(Qt);const r=Xt(n,t.config.apiKey,t.name);let o=null;for(const n of e)try{const e=await n._get(r);if(e){const s=Wt._fromJSON(t,e);n!==i&&(o=s),i=n;break}}catch(t){}const a=s.filter((t=>t._shouldAllowMigration));return i._shouldAllowMigration&&a.length?(i=a[0],o&&await i._set(r,o.toJSON()),await Promise.all(e.map((async t=>{if(t!==i)try{await t._remove(r)}catch(t){}}))),new Yt(i,t,n)):new Yt(i,t,n)}}function Zt(t){const e=t.toLowerCase();if(e.includes("opera/")||e.includes("opr/")||e.includes("opios/"))return"Opera";if(se(e))return"IEMobile";if(e.includes("msie")||e.includes("trident/"))return"IE";if(e.includes("edge/"))return"Edge";if(te(e))return"Firefox";if(e.includes("silk/"))return"Silk";if(re(e))return"Blackberry";if(oe(e))return"Webos";if(ee(e))return"Safari";if((e.includes("chrome/")||ne(e))&&!e.includes("edge/"))return"Chrome";if(ie(e))return"Android";{const e=/([a-zA-Z\d\.]+)\/[a-zA-Z\d\.]*$/,n=t.match(e);if(2===(null==n?void 0:n.length))return n[1]}return"Other"}function te(t=_()){return/firefox\//i.test(t)}function ee(t=_()){const e=t.toLowerCase();return e.includes("safari/")&&!e.includes("chrome/")&&!e.includes("crios/")&&!e.includes("android")}function ne(t=_()){return/crios\//i.test(t)}function se(t=_()){return/iemobile/i.test(t)}function ie(t=_()){return/android/i.test(t)}function re(t=_()){return/blackberry/i.test(t)}function oe(t=_()){return/webos/i.test(t)}function ae(t=_()){return/iphone|ipad|ipod/i.test(t)}function ce(t=_()){return ae(t)||ie(t)||oe(t)||re(t)||/windows phone/i.test(t)||se(t)}function ue(t,e=[]){let n;switch(t){case"Browser":n=Zt(_());break;case"Worker":n=`${Zt(_())}-${t}`;break;default:n=t}return`${n}/JsCore/9.6.1/${e.length?e.join(","):"FirebaseCore-web"}`}class le{constructor(t,e){this.app=t,this.config=e,this.currentUser=null,this.emulatorConfig=null,this.operations=Promise.resolve(),this.authStateSubscription=new de(this),this.idTokenSubscription=new de(this),this.redirectUser=null,this.isProactiveRefreshEnabled=!1,this._canInitEmulator=!0,this._isInitialized=!1,this._deleted=!1,this._initializationPromise=null,this._popupRedirectResolver=null,this._errorFactory=pt,this.lastNotifiedUid=void 0,this.languageCode=null,this.tenantId=null,this.settings={appVerificationDisabledForTesting:!1},this.frameworks=[],this.name=t.name,this.clientVersion=e.sdkClientVersion}_initializeWithPersistence(t,e){return e&&(this._popupRedirectResolver=Tt(e)),this._initializationPromise=this.queue((async()=>{var n,s;if(!this._deleted&&(this.persistenceManager=await Yt.create(this,t),!this._deleted)){if(null===(n=this._popupRedirectResolver)||void 0===n?void 0:n._shouldInitProactively)try{await this._popupRedirectResolver._initialize(this)}catch(t){}await this.initializeCurrentUser(e),this.lastNotifiedUid=(null===(s=this.currentUser)||void 0===s?void 0:s.uid)||null,this._deleted||(this._isInitialized=!0)}})),this._initializationPromise}async _onStorageEvent(){if(this._deleted)return;const t=await this.assertedPersistence.getCurrentUser();return this.currentUser||t?this.currentUser&&t&&this.currentUser.uid===t.uid?(this._currentUser._assign(t),void await this.currentUser.getIdToken()):void await this._updateCurrentUser(t):void 0}async initializeCurrentUser(t){var e;let n=await this.assertedPersistence.getCurrentUser();if(t&&this.config.authDomain){await this.getOrInitRedirectPersistenceManager();const s=null===(e=this.redirectUser)||void 0===e?void 0:e._redirectEventId,i=null==n?void 0:n._redirectEventId,r=await this.tryRedirectSignIn(t);s&&s!==i||!(null==r?void 0:r.user)||(n=r.user)}return n?n._redirectEventId?(Et(this._popupRedirectResolver,this,"argument-error"),await this.getOrInitRedirectPersistenceManager(),this.redirectUser&&this.redirectUser._redirectEventId===n._redirectEventId?this.directlySetCurrentUser(n):this.reloadAndSetCurrentUserOrClear(n)):this.reloadAndSetCurrentUserOrClear(n):this.directlySetCurrentUser(null)}async tryRedirectSignIn(t){let e=null;try{e=await this._popupRedirectResolver._completeRedirectFn(this,t,!0)}catch(t){await this._setRedirectUser(null)}return e}async reloadAndSetCurrentUserOrClear(t){try{await Kt(t)}catch(t){if("auth/network-request-failed"!==t.code)return this.directlySetCurrentUser(null)}return this.directlySetCurrentUser(t)}useDeviceLanguage(){this.languageCode=function(){if("undefined"==typeof navigator)return null;const t=navigator;return t.languages&&t.languages[0]||t.language||null}()}async _delete(){this._deleted=!0}async updateCurrentUser(t){const e=t?F(t):null;return e&&Et(e.auth.config.apiKey===this.config.apiKey,this,"invalid-user-token"),this._updateCurrentUser(e&&e._clone(this))}async _updateCurrentUser(t){if(!this._deleted)return t&&Et(this.tenantId===t.tenantId,this,"tenant-id-mismatch"),this.queue((async()=>{await this.directlySetCurrentUser(t),this.notifyAuthListeners()}))}async signOut(){return(this.redirectPersistenceManager||this._popupRedirectResolver)&&await this._setRedirectUser(null),this._updateCurrentUser(null)}setPersistence(t){return this.queue((async()=>{await this.assertedPersistence.setPersistence(Tt(t))}))}_getPersistence(){return this.assertedPersistence.persistence.type}_updateErrorMap(t){this._errorFactory=new N("auth","Firebase",t())}onAuthStateChanged(t,e,n){return this.registerStateListener(this.authStateSubscription,t,e,n)}onIdTokenChanged(t,e,n){return this.registerStateListener(this.idTokenSubscription,t,e,n)}toJSON(){var t;return{apiKey:this.config.apiKey,authDomain:this.config.authDomain,appName:this.name,currentUser:null===(t=this._currentUser)||void 0===t?void 0:t.toJSON()}}async _setRedirectUser(t,e){const n=await this.getOrInitRedirectPersistenceManager(e);return null===t?n.removeCurrentUser():n.setCurrentUser(t)}async getOrInitRedirectPersistenceManager(t){if(!this.redirectPersistenceManager){const e=t&&Tt(t)||this._popupRedirectResolver;Et(e,this,"argument-error"),this.redirectPersistenceManager=await Yt.create(this,[Tt(e._redirectPersistence)],"redirectUser"),this.redirectUser=await this.redirectPersistenceManager.getCurrentUser()}return this.redirectPersistenceManager}async _redirectUserForId(t){var e,n;return this._isInitialized&&await this.queue((async()=>{})),(null===(e=this._currentUser)||void 0===e?void 0:e._redirectEventId)===t?this._currentUser:(null===(n=this.redirectUser)||void 0===n?void 0:n._redirectEventId)===t?this.redirectUser:null}async _persistUserIfCurrent(t){if(t===this.currentUser)return this.queue((async()=>this.directlySetCurrentUser(t)))}_notifyListenersIfCurrent(t){t===this.currentUser&&this.notifyAuthListeners()}_key(){return`${this.config.authDomain}:${this.config.apiKey}:${this.name}`}_startProactiveRefresh(){this.isProactiveRefreshEnabled=!0,this.currentUser&&this._currentUser._startProactiveRefresh()}_stopProactiveRefresh(){this.isProactiveRefreshEnabled=!1,this.currentUser&&this._currentUser._stopProactiveRefresh()}get _currentUser(){return this.currentUser}notifyAuthListeners(){var t,e;if(!this._isInitialized)return;this.idTokenSubscription.next(this.currentUser);const n=null!==(e=null===(t=this.currentUser)||void 0===t?void 0:t.uid)&&void 0!==e?e:null;this.lastNotifiedUid!==n&&(this.lastNotifiedUid=n,this.authStateSubscription.next(this.currentUser))}registerStateListener(t,e,n,s){if(this._deleted)return()=>{};const i="function"==typeof e?e:e.next.bind(e),r=this._isInitialized?Promise.resolve():this._initializationPromise;return Et(r,this,"internal-error"),r.then((()=>i(this.currentUser))),"function"==typeof e?t.addObserver(e,n,s):t.addObserver(e)}async directlySetCurrentUser(t){this.currentUser&&this.currentUser!==t&&(this._currentUser._stopProactiveRefresh(),t&&this.isProactiveRefreshEnabled&&t._startProactiveRefresh()),this.currentUser=t,t?await this.assertedPersistence.setCurrentUser(t):await this.assertedPersistence.removeCurrentUser()}queue(t){return this.operations=this.operations.then(t,t),this.operations}get assertedPersistence(){return Et(this.persistenceManager,this,"internal-error"),this.persistenceManager}_logFramework(t){t&&!this.frameworks.includes(t)&&(this.frameworks.push(t),this.frameworks.sort(),this.clientVersion=ue(this.config.clientPlatform,this._getFrameworks()))}_getFrameworks(){return this.frameworks}async _getAdditionalHeaders(){const t={"X-Client-Version":this.clientVersion};return this.app.options.appId&&(t["X-Firebase-gmpid"]=this.app.options.appId),t}}function he(t){return F(t)}class de{constructor(t){this.auth=t,this.observer=null,this.addObserver=function(t,e){const n=new x(t,void 0);return n.subscribe.bind(n)}((t=>this.observer=t))}get next(){return Et(this.observer,this.auth,"internal-error"),this.observer.next.bind(this.observer)}}class fe{constructor(t,e){this.providerId=t,this.signInMethod=e}toJSON(){return It("not implemented")}_getIdTokenResponse(t){return It("not implemented")}_linkToIdToken(t,e){return It("not implemented")}_getReauthenticationResolver(t){return It("not implemented")}}class pe extends fe{constructor(t,e,n,s=null){super("password",n),this._email=t,this._password=e,this._tenantId=s}static _fromEmailAndPassword(t,e){return new pe(t,e,"password")}static _fromEmailAndCode(t,e,n=null){return new pe(t,e,"emailLink",n)}toJSON(){return{email:this._email,password:this._password,signInMethod:this.signInMethod,tenantId:this._tenantId}}static fromJSON(t){const e="string"==typeof t?JSON.parse(t):t;if((null==e?void 0:e.email)&&(null==e?void 0:e.password)){if("password"===e.signInMethod)return this._fromEmailAndPassword(e.email,e.password);if("emailLink"===e.signInMethod)return this._fromEmailAndCode(e.email,e.password,e.tenantId)}return null}async _getIdTokenResponse(t){switch(this.signInMethod){case"password":return async function(t,e){return Mt(t,"POST","/v1/accounts:signInWithPassword",Lt(t,e))}(t,{returnSecureToken:!0,email:this._email,password:this._password});case"emailLink":return async function(t,e){return Mt(t,"POST","/v1/accounts:signInWithEmailLink",Lt(t,e))}(t,{email:this._email,oobCode:this._password});default:yt(t,"internal-error")}}async _linkToIdToken(t,e){switch(this.signInMethod){case"password":return async function(t,e){return Ot(t,"POST","/v1/accounts:update",e)}(t,{idToken:e,returnSecureToken:!0,email:this._email,password:this._password});case"emailLink":return async function(t,e){return Mt(t,"POST","/v1/accounts:signInWithEmailLink",Lt(t,e))}(t,{idToken:e,email:this._email,oobCode:this._password});default:yt(t,"internal-error")}}_getReauthenticationResolver(t){return this._getIdTokenResponse(t)}}async function me(t,e){return Mt(t,"POST","/v1/accounts:signInWithIdp",Lt(t,e))}class ge extends fe{constructor(){super(...arguments),this.pendingToken=null}static _fromParams(t){const e=new ge(t.providerId,t.signInMethod);return t.idToken||t.accessToken?(t.idToken&&(e.idToken=t.idToken),t.accessToken&&(e.accessToken=t.accessToken),t.nonce&&!t.pendingToken&&(e.nonce=t.nonce),t.pendingToken&&(e.pendingToken=t.pendingToken)):t.oauthToken&&t.oauthTokenSecret?(e.accessToken=t.oauthToken,e.secret=t.oauthTokenSecret):yt("argument-error"),e}toJSON(){return{idToken:this.idToken,accessToken:this.accessToken,secret:this.secret,nonce:this.nonce,pendingToken:this.pendingToken,providerId:this.providerId,signInMethod:this.signInMethod}}static fromJSON(t){const e="string"==typeof t?JSON.parse(t):t,{providerId:n,signInMethod:s}=e,i=dt(e,["providerId","signInMethod"]);if(!n||!s)return null;const r=new ge(n,s);return r.idToken=i.idToken||void 0,r.accessToken=i.accessToken||void 0,r.secret=i.secret,r.nonce=i.nonce,r.pendingToken=i.pendingToken||null,r}_getIdTokenResponse(t){return me(t,this.buildRequest())}_linkToIdToken(t,e){const n=this.buildRequest();return n.idToken=e,me(t,n)}_getReauthenticationResolver(t){const e=this.buildRequest();return e.autoCreate=!1,me(t,e)}buildRequest(){const t={requestUri:"http://localhost",returnSecureToken:!0};if(this.pendingToken)t.pendingToken=this.pendingToken;else{const e={};this.idToken&&(e.id_token=this.idToken),this.accessToken&&(e.access_token=this.accessToken),this.secret&&(e.oauth_token_secret=this.secret),e.providerId=this.providerId,this.nonce&&!this.pendingToken&&(e.nonce=this.nonce),t.postBody=O(e)}return t}}const ye={USER_NOT_FOUND:"user-not-found"};class ve extends fe{constructor(t){super("phone","phone"),this.params=t}static _fromVerification(t,e){return new ve({verificationId:t,verificationCode:e})}static _fromTokenResponse(t,e){return new ve({phoneNumber:t,temporaryProof:e})}_getIdTokenResponse(t){return async function(t,e){return Mt(t,"POST","/v1/accounts:signInWithPhoneNumber",Lt(t,e))}(t,this._makeVerificationRequest())}_linkToIdToken(t,e){return async function(t,e){const n=await Mt(t,"POST","/v1/accounts:signInWithPhoneNumber",Lt(t,e));if(n.temporaryProof)throw Ft(t,"account-exists-with-different-credential",n);return n}(t,Object.assign({idToken:e},this._makeVerificationRequest()))}_getReauthenticationResolver(t){return async function(t,e){return Mt(t,"POST","/v1/accounts:signInWithPhoneNumber",Lt(t,Object.assign(Object.assign({},e),{operation:"REAUTH"})),ye)}(t,this._makeVerificationRequest())}_makeVerificationRequest(){const{temporaryProof:t,phoneNumber:e,verificationId:n,verificationCode:s}=this.params;return t&&e?{temporaryProof:t,phoneNumber:e}:{sessionInfo:n,code:s}}toJSON(){const t={providerId:this.providerId};return this.params.phoneNumber&&(t.phoneNumber=this.params.phoneNumber),this.params.temporaryProof&&(t.temporaryProof=this.params.temporaryProof),this.params.verificationCode&&(t.verificationCode=this.params.verificationCode),this.params.verificationId&&(t.verificationId=this.params.verificationId),t}static fromJSON(t){"string"==typeof t&&(t=JSON.parse(t));const{verificationId:e,verificationCode:n,phoneNumber:s,temporaryProof:i}=t;return n||e||s||i?new ve({verificationId:e,verificationCode:n,phoneNumber:s,temporaryProof:i}):null}}class we{constructor(t){var e,n,s,i,r,o;const a=P(M(t)),c=null!==(e=a.apiKey)&&void 0!==e?e:null,u=null!==(n=a.oobCode)&&void 0!==n?n:null,l=function(t){switch(t){case"recoverEmail":return"RECOVER_EMAIL";case"resetPassword":return"PASSWORD_RESET";case"signIn":return"EMAIL_SIGNIN";case"verifyEmail":return"VERIFY_EMAIL";case"verifyAndChangeEmail":return"VERIFY_AND_CHANGE_EMAIL";case"revertSecondFactorAddition":return"REVERT_SECOND_FACTOR_ADDITION";default:return null}}(null!==(s=a.mode)&&void 0!==s?s:null);Et(c&&u&&l,"argument-error"),this.apiKey=c,this.operation=l,this.code=u,this.continueUrl=null!==(i=a.continueUrl)&&void 0!==i?i:null,this.languageCode=null!==(r=a.languageCode)&&void 0!==r?r:null,this.tenantId=null!==(o=a.tenantId)&&void 0!==o?o:null}static parseLink(t){const e=function(t){const e=P(M(t)).link,n=e?P(M(e)).deep_link_id:null,s=P(M(t)).deep_link_id;return(s?P(M(s)).link:null)||s||n||e||t}(t);try{return new we(e)}catch(t){return null}}}class Ee{constructor(){this.providerId=Ee.PROVIDER_ID}static credential(t,e){return pe._fromEmailAndPassword(t,e)}static credentialWithLink(t,e){const n=we.parseLink(e);return Et(n,"argument-error"),pe._fromEmailAndCode(t,n.code,n.tenantId)}}Ee.PROVIDER_ID="password",Ee.EMAIL_PASSWORD_SIGN_IN_METHOD="password",Ee.EMAIL_LINK_SIGN_IN_METHOD="emailLink";class Ie{constructor(t){this.providerId=t,this.defaultLanguageCode=null,this.customParameters={}}setDefaultLanguage(t){this.defaultLanguageCode=t}setCustomParameters(t){return this.customParameters=t,this}getCustomParameters(){return this.customParameters}}class be extends Ie{constructor(){super(...arguments),this.scopes=[]}addScope(t){return this.scopes.includes(t)||this.scopes.push(t),this}getScopes(){return[...this.scopes]}}class _e extends be{constructor(){super("facebook.com")}static credential(t){return ge._fromParams({providerId:_e.PROVIDER_ID,signInMethod:_e.FACEBOOK_SIGN_IN_METHOD,accessToken:t})}static credentialFromResult(t){return _e.credentialFromTaggedObject(t)}static credentialFromError(t){return _e.credentialFromTaggedObject(t.customData||{})}static credentialFromTaggedObject({_tokenResponse:t}){if(!t||!("oauthAccessToken"in t))return null;if(!t.oauthAccessToken)return null;try{return _e.credential(t.oauthAccessToken)}catch(t){return null}}}_e.FACEBOOK_SIGN_IN_METHOD="facebook.com",_e.PROVIDER_ID="facebook.com";class Te extends be{constructor(){super("google.com"),this.addScope("profile")}static credential(t,e){return ge._fromParams({providerId:Te.PROVIDER_ID,signInMethod:Te.GOOGLE_SIGN_IN_METHOD,idToken:t,accessToken:e})}static credentialFromResult(t){return Te.credentialFromTaggedObject(t)}static credentialFromError(t){return Te.credentialFromTaggedObject(t.customData||{})}static credentialFromTaggedObject({_tokenResponse:t}){if(!t)return null;const{oauthIdToken:e,oauthAccessToken:n}=t;if(!e&&!n)return null;try{return Te.credential(e,n)}catch(t){return null}}}Te.GOOGLE_SIGN_IN_METHOD="google.com",Te.PROVIDER_ID="google.com";class Se extends be{constructor(){super("github.com")}static credential(t){return ge._fromParams({providerId:Se.PROVIDER_ID,signInMethod:Se.GITHUB_SIGN_IN_METHOD,accessToken:t})}static credentialFromResult(t){return Se.credentialFromTaggedObject(t)}static credentialFromError(t){return Se.credentialFromTaggedObject(t.customData||{})}static credentialFromTaggedObject({_tokenResponse:t}){if(!t||!("oauthAccessToken"in t))return null;if(!t.oauthAccessToken)return null;try{return Se.credential(t.oauthAccessToken)}catch(t){return null}}}Se.GITHUB_SIGN_IN_METHOD="github.com",Se.PROVIDER_ID="github.com";class ke extends be{constructor(){super("twitter.com")}static credential(t,e){return ge._fromParams({providerId:ke.PROVIDER_ID,signInMethod:ke.TWITTER_SIGN_IN_METHOD,oauthToken:t,oauthTokenSecret:e})}static credentialFromResult(t){return ke.credentialFromTaggedObject(t)}static credentialFromError(t){return ke.credentialFromTaggedObject(t.customData||{})}static credentialFromTaggedObject({_tokenResponse:t}){if(!t)return null;const{oauthAccessToken:e,oauthTokenSecret:n}=t;if(!e||!n)return null;try{return ke.credential(e,n)}catch(t){return null}}}ke.TWITTER_SIGN_IN_METHOD="twitter.com",ke.PROVIDER_ID="twitter.com";class Ce{constructor(t){this.user=t.user,this.providerId=t.providerId,this._tokenResponse=t._tokenResponse,this.operationType=t.operationType}static async _fromIdTokenResponse(t,e,n,s=!1){const i=await Wt._fromIdTokenResponse(t,n,s),r=Ae(n);return new Ce({user:i,providerId:r,_tokenResponse:n,operationType:e})}static async _forOperation(t,e,n){await t._updateTokensIfNecessary(n,!0);const s=Ae(n);return new Ce({user:t,providerId:s,_tokenResponse:n,operationType:e})}}function Ae(t){return t.providerId?t.providerId:"phoneNumber"in t?"phone":null}class Ne extends A{constructor(t,e,n,s){var i;super(e.code,e.message),this.operationType=n,this.user=s,Object.setPrototypeOf(this,Ne.prototype),this.customData={appName:t.name,tenantId:null!==(i=t.tenantId)&&void 0!==i?i:void 0,_serverResponse:e.customData._serverResponse,operationType:n}}static _fromErrorAndOperation(t,e,n,s){return new Ne(t,e,n,s)}}function Re(t,e,n,s){return("reauthenticate"===e?n._getReauthenticationResolver(t):n._getIdTokenResponse(t)).catch((n=>{if("auth/multi-factor-auth-required"===n.code)throw Ne._fromErrorAndOperation(t,n,e,s);throw n}))}async function De(t,e,n=!1){const s="signIn",i=await Re(t,s,e),r=await Ce._fromIdTokenResponse(t,s,i);return n||await t._updateCurrentUser(r.user),r}new WeakMap;const Le="__sak";class Oe{constructor(t,e){this.storageRetriever=t,this.type=e}_isAvailable(){try{return this.storage?(this.storage.setItem(Le,"1"),this.storage.removeItem(Le),Promise.resolve(!0)):Promise.resolve(!1)}catch(t){return Promise.resolve(!1)}}_set(t,e){return this.storage.setItem(t,JSON.stringify(e)),Promise.resolve()}_get(t){const e=this.storage.getItem(t);return Promise.resolve(e?JSON.parse(e):null)}_remove(t){return this.storage.removeItem(t),Promise.resolve()}get storage(){return this.storageRetriever()}}class Pe extends Oe{constructor(){super((()=>window.localStorage),"LOCAL"),this.boundEventHandler=(t,e)=>this.onStorageEvent(t,e),this.listeners={},this.localCache={},this.pollTimer=null,this.safariLocalStorageNotSynced=function(){const t=_();return ee(t)||ae(t)}()&&function(){try{return!(!window||window===window.top)}catch(t){return!1}}(),this.fallbackToPolling=ce(),this._shouldAllowMigration=!0}forAllChangedKeys(t){for(const e of Object.keys(this.listeners)){const n=this.storage.getItem(e),s=this.localCache[e];n!==s&&t(e,s,n)}}onStorageEvent(t,e=!1){if(!t.key)return void this.forAllChangedKeys(((t,e,n)=>{this.notifyListeners(t,n)}));const n=t.key;if(e?this.detachListener():this.stopPolling(),this.safariLocalStorageNotSynced){const s=this.storage.getItem(n);if(t.newValue!==s)null!==t.newValue?this.storage.setItem(n,t.newValue):this.storage.removeItem(n);else if(this.localCache[n]===t.newValue&&!e)return}const s=()=>{const t=this.storage.getItem(n);(e||this.localCache[n]!==t)&&this.notifyListeners(n,t)},i=this.storage.getItem(n);C()&&10===document.documentMode&&i!==t.newValue&&t.newValue!==t.oldValue?setTimeout(s,10):s()}notifyListeners(t,e){this.localCache[t]=e;const n=this.listeners[t];if(n)for(const t of Array.from(n))t(e?JSON.parse(e):e)}startPolling(){this.stopPolling(),this.pollTimer=setInterval((()=>{this.forAllChangedKeys(((t,e,n)=>{this.onStorageEvent(new StorageEvent("storage",{key:t,oldValue:e,newValue:n}),!0)}))}),1e3)}stopPolling(){this.pollTimer&&(clearInterval(this.pollTimer),this.pollTimer=null)}attachListener(){window.addEventListener("storage",this.boundEventHandler)}detachListener(){window.removeEventListener("storage",this.boundEventHandler)}_addListener(t,e){0===Object.keys(this.listeners).length&&(this.fallbackToPolling?this.startPolling():this.attachListener()),this.listeners[t]||(this.listeners[t]=new Set,this.localCache[t]=this.storage.getItem(t)),this.listeners[t].add(e)}_removeListener(t,e){this.listeners[t]&&(this.listeners[t].delete(e),0===this.listeners[t].size&&delete this.listeners[t]),0===Object.keys(this.listeners).length&&(this.detachListener(),this.stopPolling())}async _set(t,e){await super._set(t,e),this.localCache[t]=JSON.stringify(e)}async _get(t){const e=await super._get(t);return this.localCache[t]=JSON.stringify(e),e}async _remove(t){await super._remove(t),delete this.localCache[t]}}Pe.type="LOCAL";const Me=Pe;class xe extends Oe{constructor(){super((()=>window.sessionStorage),"SESSION")}_addListener(t,e){}_removeListener(t,e){}}xe.type="SESSION";const Ue=xe;class Fe{constructor(t){this.eventTarget=t,this.handlersMap={},this.boundEventHandler=this.handleEvent.bind(this)}static _getInstance(t){const e=this.receivers.find((e=>e.isListeningto(t)));if(e)return e;const n=new Fe(t);return this.receivers.push(n),n}isListeningto(t){return this.eventTarget===t}async handleEvent(t){const e=t,{eventId:n,eventType:s,data:i}=e.data,r=this.handlersMap[s];if(!(null==r?void 0:r.size))return;e.ports[0].postMessage({status:"ack",eventId:n,eventType:s});const o=Array.from(r).map((async t=>t(e.origin,i))),a=await function(t){return Promise.all(t.map((async t=>{try{return{fulfilled:!0,value:await t}}catch(t){return{fulfilled:!1,reason:t}}})))}(o);e.ports[0].postMessage({status:"done",eventId:n,eventType:s,response:a})}_subscribe(t,e){0===Object.keys(this.handlersMap).length&&this.eventTarget.addEventListener("message",this.boundEventHandler),this.handlersMap[t]||(this.handlersMap[t]=new Set),this.handlersMap[t].add(e)}_unsubscribe(t,e){this.handlersMap[t]&&e&&this.handlersMap[t].delete(e),e&&0!==this.handlersMap[t].size||delete this.handlersMap[t],0===Object.keys(this.handlersMap).length&&this.eventTarget.removeEventListener("message",this.boundEventHandler)}}function Ve(t="",e=10){let n="";for(let t=0;t<e;t++)n+=Math.floor(10*Math.random());return t+n}Fe.receivers=[];class qe{constructor(t){this.target=t,this.handlers=new Set}removeMessageHandler(t){t.messageChannel&&(t.messageChannel.port1.removeEventListener("message",t.onMessage),t.messageChannel.port1.close()),this.handlers.delete(t)}async _send(t,e,n=50){const s="undefined"!=typeof MessageChannel?new MessageChannel:null;if(!s)throw new Error("connection_unavailable");let i,r;return new Promise(((o,a)=>{const c=Ve("",20);s.port1.start();const u=setTimeout((()=>{a(new Error("unsupported_event"))}),n);r={messageChannel:s,onMessage(t){const e=t;if(e.data.eventId===c)switch(e.data.status){case"ack":clearTimeout(u),i=setTimeout((()=>{a(new Error("timeout"))}),3e3);break;case"done":clearTimeout(i),o(e.data.response);break;default:clearTimeout(u),clearTimeout(i),a(new Error("invalid_response"))}}},this.handlers.add(r),s.port1.addEventListener("message",r.onMessage),this.target.postMessage({eventType:t,eventId:c,data:e},[s.port2])})).finally((()=>{r&&this.removeMessageHandler(r)}))}}function je(){return window}function Be(){return void 0!==je().WorkerGlobalScope&&"function"==typeof je().importScripts}const He="firebaseLocalStorageDb",$e="firebaseLocalStorage",Ke="fbase_key";class ze{constructor(t){this.request=t}toPromise(){return new Promise(((t,e)=>{this.request.addEventListener("success",(()=>{t(this.request.result)})),this.request.addEventListener("error",(()=>{e(this.request.error)}))}))}}function Ge(t,e){return t.transaction([$e],e?"readwrite":"readonly").objectStore($e)}function We(){const t=indexedDB.open(He,1);return new Promise(((e,n)=>{t.addEventListener("error",(()=>{n(t.error)})),t.addEventListener("upgradeneeded",(()=>{const e=t.result;try{e.createObjectStore($e,{keyPath:Ke})}catch(t){n(t)}})),t.addEventListener("success",(async()=>{const n=t.result;n.objectStoreNames.contains($e)?e(n):(n.close(),await function(){const t=indexedDB.deleteDatabase(He);return new ze(t).toPromise()}(),e(await We()))}))}))}async function Je(t,e,n){const s=Ge(t,!0).put({[Ke]:e,value:n});return new ze(s).toPromise()}function Qe(t,e){const n=Ge(t,!0).delete(e);return new ze(n).toPromise()}class Xe{constructor(){this.type="LOCAL",this._shouldAllowMigration=!0,this.listeners={},this.localCache={},this.pollTimer=null,this.pendingWrites=0,this.receiver=null,this.sender=null,this.serviceWorkerReceiverAvailable=!1,this.activeServiceWorker=null,this._workerInitializationPromise=this.initializeServiceWorkerMessaging().then((()=>{}),(()=>{}))}async _openDb(){return this.db||(this.db=await We()),this.db}async _withRetries(t){let e=0;for(;;)try{const e=await this._openDb();return await t(e)}catch(t){if(e++>3)throw t;this.db&&(this.db.close(),this.db=void 0)}}async initializeServiceWorkerMessaging(){return Be()?this.initializeReceiver():this.initializeSender()}async initializeReceiver(){this.receiver=Fe._getInstance(Be()?self:null),this.receiver._subscribe("keyChanged",(async(t,e)=>({keyProcessed:(await this._poll()).includes(e.key)}))),this.receiver._subscribe("ping",(async(t,e)=>["keyChanged"]))}async initializeSender(){var t,e;if(this.activeServiceWorker=await async function(){if(!(null===navigator||void 0===navigator?void 0:navigator.serviceWorker))return null;try{return(await navigator.serviceWorker.ready).active}catch(t){return null}}(),!this.activeServiceWorker)return;this.sender=new qe(this.activeServiceWorker);const n=await this.sender._send("ping",{},800);n&&(null===(t=n[0])||void 0===t?void 0:t.fulfilled)&&(null===(e=n[0])||void 0===e?void 0:e.value.includes("keyChanged"))&&(this.serviceWorkerReceiverAvailable=!0)}async notifyServiceWorker(t){if(this.sender&&this.activeServiceWorker&&function(){var t;return(null===(t=null===navigator||void 0===navigator?void 0:navigator.serviceWorker)||void 0===t?void 0:t.controller)||null}()===this.activeServiceWorker)try{await this.sender._send("keyChanged",{key:t},this.serviceWorkerReceiverAvailable?800:50)}catch(t){}}async _isAvailable(){try{if(!indexedDB)return!1;const t=await We();return await Je(t,Le,"1"),await Qe(t,Le),!0}catch(t){}return!1}async _withPendingWrite(t){this.pendingWrites++;try{await t()}finally{this.pendingWrites--}}async _set(t,e){return this._withPendingWrite((async()=>(await this._withRetries((n=>Je(n,t,e))),this.localCache[t]=e,this.notifyServiceWorker(t))))}async _get(t){const e=await this._withRetries((e=>async function(t,e){const n=Ge(t,!1).get(e),s=await new ze(n).toPromise();return void 0===s?null:s.value}(e,t)));return this.localCache[t]=e,e}async _remove(t){return this._withPendingWrite((async()=>(await this._withRetries((e=>Qe(e,t))),delete this.localCache[t],this.notifyServiceWorker(t))))}async _poll(){const t=await this._withRetries((t=>{const e=Ge(t,!1).getAll();return new ze(e).toPromise()}));if(!t)return[];if(0!==this.pendingWrites)return[];const e=[],n=new Set;for(const{fbase_key:s,value:i}of t)n.add(s),JSON.stringify(this.localCache[s])!==JSON.stringify(i)&&(this.notifyListeners(s,i),e.push(s));for(const t of Object.keys(this.localCache))this.localCache[t]&&!n.has(t)&&(this.notifyListeners(t,null),e.push(t));return e}notifyListeners(t,e){this.localCache[t]=e;const n=this.listeners[t];if(n)for(const t of Array.from(n))t(e)}startPolling(){this.stopPolling(),this.pollTimer=setInterval((async()=>this._poll()),800)}stopPolling(){this.pollTimer&&(clearInterval(this.pollTimer),this.pollTimer=null)}_addListener(t,e){0===Object.keys(this.listeners).length&&this.startPolling(),this.listeners[t]||(this.listeners[t]=new Set,this._get(t)),this.listeners[t].add(e)}_removeListener(t,e){this.listeners[t]&&(this.listeners[t].delete(e),0===this.listeners[t].size&&delete this.listeners[t]),0===Object.keys(this.listeners).length&&this.stopPolling()}}Xe.type="LOCAL";const Ye=Xe;function Ze(t){return`__${t}${Math.floor(1e6*Math.random())}`}Ze("rcb"),new Ct(3e4,6e4);class tn{constructor(t){this.providerId=tn.PROVIDER_ID,this.auth=he(t)}verifyPhoneNumber(t,e){return async function(t,e,n){var s;const i=await n.verify();try{let r;if(Et("string"==typeof i,t,"argument-error"),Et("recaptcha"===n.type,t,"argument-error"),r="string"==typeof e?{phoneNumber:e}:e,"session"in r){const e=r.session;if("phoneNumber"in r){Et("enroll"===e.type,t,"internal-error");const n=await function(t,e){return Ot(t,"POST","/v2/accounts/mfaEnrollment:start",Lt(t,e))}(t,{idToken:e.credential,phoneEnrollmentInfo:{phoneNumber:r.phoneNumber,recaptchaToken:i}});return n.phoneSessionInfo.sessionInfo}{Et("signin"===e.type,t,"internal-error");const n=(null===(s=r.multiFactorHint)||void 0===s?void 0:s.uid)||r.multiFactorUid;Et(n,t,"missing-multi-factor-info");const o=await function(t,e){return Ot(t,"POST","/v2/accounts/mfaSignIn:start",Lt(t,e))}(t,{mfaPendingCredential:e.credential,mfaEnrollmentId:n,phoneSignInInfo:{recaptchaToken:i}});return o.phoneResponseInfo.sessionInfo}}{const{sessionInfo:e}=await async function(t,e){return Ot(t,"POST","/v1/accounts:sendVerificationCode",Lt(t,e))}(t,{phoneNumber:r.phoneNumber,recaptchaToken:i});return e}}finally{n._reset()}}(this.auth,t,F(e))}static credential(t,e){return ve._fromVerification(t,e)}static credentialFromResult(t){const e=t;return tn.credentialFromTaggedObject(e)}static credentialFromError(t){return tn.credentialFromTaggedObject(t.customData||{})}static credentialFromTaggedObject({_tokenResponse:t}){if(!t)return null;const{phoneNumber:e,temporaryProof:n}=t;return e&&n?ve._fromTokenResponse(e,n):null}}tn.PROVIDER_ID="phone",tn.PHONE_SIGN_IN_METHOD="phone";class en extends fe{constructor(t){super("custom","custom"),this.params=t}_getIdTokenResponse(t){return me(t,this._buildIdpRequest())}_linkToIdToken(t,e){return me(t,this._buildIdpRequest(e))}_getReauthenticationResolver(t){return me(t,this._buildIdpRequest())}_buildIdpRequest(t){const e={requestUri:this.params.requestUri,sessionId:this.params.sessionId,postBody:this.params.postBody,tenantId:this.params.tenantId,pendingToken:this.params.pendingToken,returnSecureToken:!0,returnIdpCredential:!0};return t&&(e.idToken=t),e}}function nn(t){return De(t.auth,new en(t),t.bypassAuthState)}function sn(t){const{auth:e,user:n}=t;return Et(n,e,"internal-error"),async function(t,e,n=!1){const{auth:s}=t,i="reauthenticate";try{const r=await Bt(t,Re(s,i,e,t),n);Et(r.idToken,s,"internal-error");const o=jt(r.idToken);Et(o,s,"internal-error");const{sub:a}=o;return Et(t.uid===a,s,"user-mismatch"),Ce._forOperation(t,i,r)}catch(t){throw"auth/user-not-found"===(null==t?void 0:t.code)&&yt(s,"user-mismatch"),t}}(n,new en(t),t.bypassAuthState)}async function rn(t){const{auth:e,user:n}=t;return Et(n,e,"internal-error"),async function(t,e,n=!1){const s=await Bt(t,e._linkToIdToken(t.auth,await t.getIdToken()),n);return Ce._forOperation(t,"link",s)}(n,new en(t),t.bypassAuthState)}class on{constructor(t,e,n,s,i=!1){this.auth=t,this.resolver=n,this.user=s,this.bypassAuthState=i,this.pendingPromise=null,this.eventManager=null,this.filter=Array.isArray(e)?e:[e]}execute(){return new Promise((async(t,e)=>{this.pendingPromise={resolve:t,reject:e};try{this.eventManager=await this.resolver._initialize(this.auth),await this.onExecution(),this.eventManager.registerConsumer(this)}catch(t){this.reject(t)}}))}async onAuthEvent(t){const{urlResponse:e,sessionId:n,postBody:s,tenantId:i,error:r,type:o}=t;if(r)return void this.reject(r);const a={auth:this.auth,requestUri:e,sessionId:n,tenantId:i||void 0,postBody:s||void 0,user:this.user,bypassAuthState:this.bypassAuthState};try{this.resolve(await this.getIdpTask(o)(a))}catch(t){this.reject(t)}}onError(t){this.reject(t)}getIdpTask(t){switch(t){case"signInViaPopup":case"signInViaRedirect":return nn;case"linkViaPopup":case"linkViaRedirect":return rn;case"reauthViaPopup":case"reauthViaRedirect":return sn;default:yt(this.auth,"internal-error")}}resolve(t){bt(this.pendingPromise,"Pending promise was never set"),this.pendingPromise.resolve(t),this.unregisterAndCleanUp()}reject(t){bt(this.pendingPromise,"Pending promise was never set"),this.pendingPromise.reject(t),this.unregisterAndCleanUp()}unregisterAndCleanUp(){this.eventManager&&this.eventManager.unregisterConsumer(this),this.pendingPromise=null,this.cleanUp()}}const an=new Ct(2e3,1e4);class cn extends on{constructor(t,e,n,s,i){super(t,e,s,i),this.provider=n,this.authWindow=null,this.pollId=null,cn.currentPopupAction&&cn.currentPopupAction.cancel(),cn.currentPopupAction=this}async executeNotNull(){const t=await this.execute();return Et(t,this.auth,"internal-error"),t}async onExecution(){bt(1===this.filter.length,"Popup operations only handle one event");const t=Ve();this.authWindow=await this.resolver._openPopup(this.auth,this.provider,this.filter[0],t),this.authWindow.associatedEvent=t,this.resolver._originValidation(this.auth).catch((t=>{this.reject(t)})),this.resolver._isIframeWebStorageSupported(this.auth,(t=>{t||this.reject(vt(this.auth,"web-storage-unsupported"))})),this.pollUserCancellation()}get eventId(){var t;return(null===(t=this.authWindow)||void 0===t?void 0:t.associatedEvent)||null}cancel(){this.reject(vt(this.auth,"cancelled-popup-request"))}cleanUp(){this.authWindow&&this.authWindow.close(),this.pollId&&window.clearTimeout(this.pollId),this.authWindow=null,this.pollId=null,cn.currentPopupAction=null}pollUserCancellation(){const t=()=>{var e,n;(null===(n=null===(e=this.authWindow)||void 0===e?void 0:e.window)||void 0===n?void 0:n.closed)?this.pollId=window.setTimeout((()=>{this.pollId=null,this.reject(vt(this.auth,"popup-closed-by-user"))}),2e3):this.pollId=window.setTimeout(t,an.get())};t()}}cn.currentPopupAction=null;const un=new Map;class ln extends on{constructor(t,e,n=!1){super(t,["signInViaRedirect","linkViaRedirect","reauthViaRedirect","unknown"],e,void 0,n),this.eventId=null}async execute(){let t=un.get(this.auth._key());if(!t){try{const e=await async function(t,e){const n=function(t){return Xt("pendingRedirect",t.config.apiKey,t.name)}(e),s=function(t){return Tt(t._redirectPersistence)}(t);if(!await s._isAvailable())return!1;const i="true"===await s._get(n);return await s._remove(n),i}(this.resolver,this.auth),n=e?await super.execute():null;t=()=>Promise.resolve(n)}catch(e){t=()=>Promise.reject(e)}un.set(this.auth._key(),t)}return this.bypassAuthState||un.set(this.auth._key(),(()=>Promise.resolve(null))),t()}async onAuthEvent(t){if("signInViaRedirect"===t.type)return super.onAuthEvent(t);if("unknown"!==t.type){if(t.eventId){const e=await this.auth._redirectUserForId(t.eventId);if(e)return this.user=e,super.onAuthEvent(t);this.resolve(null)}}else this.resolve(null)}async onExecution(){}cleanUp(){}}async function hn(t,e,n=!1){const s=he(t),i=function(t,e){return e?Tt(e):(Et(t._popupRedirectResolver,t,"argument-error"),t._popupRedirectResolver)}(s,e),r=new ln(s,i,n),o=await r.execute();return o&&!n&&(delete o.user._redirectEventId,await s._persistUserIfCurrent(o.user),await s._setRedirectUser(null,e)),o}class dn{constructor(t){this.auth=t,this.cachedEventUids=new Set,this.consumers=new Set,this.queuedRedirectEvent=null,this.hasHandledPotentialRedirect=!1,this.lastProcessedEventTime=Date.now()}registerConsumer(t){this.consumers.add(t),this.queuedRedirectEvent&&this.isEventForConsumer(this.queuedRedirectEvent,t)&&(this.sendToConsumer(this.queuedRedirectEvent,t),this.saveEventToCache(this.queuedRedirectEvent),this.queuedRedirectEvent=null)}unregisterConsumer(t){this.consumers.delete(t)}onEvent(t){if(this.hasEventBeenHandled(t))return!1;let e=!1;return this.consumers.forEach((n=>{this.isEventForConsumer(t,n)&&(e=!0,this.sendToConsumer(t,n),this.saveEventToCache(t))})),this.hasHandledPotentialRedirect||!function(t){switch(t.type){case"signInViaRedirect":case"linkViaRedirect":case"reauthViaRedirect":return!0;case"unknown":return pn(t);default:return!1}}(t)||(this.hasHandledPotentialRedirect=!0,e||(this.queuedRedirectEvent=t,e=!0)),e}sendToConsumer(t,e){var n;if(t.error&&!pn(t)){const s=(null===(n=t.error.code)||void 0===n?void 0:n.split("auth/")[1])||"internal-error";e.onError(vt(this.auth,s))}else e.onAuthEvent(t)}isEventForConsumer(t,e){const n=null===e.eventId||!!t.eventId&&t.eventId===e.eventId;return e.filter.includes(t.type)&&n}hasEventBeenHandled(t){return Date.now()-this.lastProcessedEventTime>=6e5&&this.cachedEventUids.clear(),this.cachedEventUids.has(fn(t))}saveEventToCache(t){this.cachedEventUids.add(fn(t)),this.lastProcessedEventTime=Date.now()}}function fn(t){return[t.type,t.eventId,t.sessionId,t.tenantId].filter((t=>t)).join("-")}function pn({type:t,error:e}){return"unknown"===t&&"auth/no-auth-event"===(null==e?void 0:e.code)}const mn=/^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/,gn=/^https?/;function yn(t){const e=St(),{protocol:n,hostname:s}=new URL(e);if(t.startsWith("chrome-extension://")){const i=new URL(t);return""===i.hostname&&""===s?"chrome-extension:"===n&&t.replace("chrome-extension://","")===e.replace("chrome-extension://",""):"chrome-extension:"===n&&i.hostname===s}if(!gn.test(n))return!1;if(mn.test(t))return s===t;const i=t.replace(/\./g,"\\.");return new RegExp("^(.+\\."+i+"|"+i+")$","i").test(s)}const vn=new Ct(3e4,6e4);function wn(){const t=je().___jsl;if(null==t?void 0:t.H)for(const e of Object.keys(t.H))if(t.H[e].r=t.H[e].r||[],t.H[e].L=t.H[e].L||[],t.H[e].r=[...t.H[e].L],t.CP)for(let e=0;e<t.CP.length;e++)t.CP[e]=null}let En=null;function In(t){return En=En||function(t){return new Promise(((e,n)=>{var s,i,r,o;function a(){wn(),gapi.load("gapi.iframes",{callback:()=>{e(gapi.iframes.getContext())},ontimeout:()=>{wn(),n(vt(t,"network-request-failed"))},timeout:vn.get()})}if(null===(i=null===(s=je().gapi)||void 0===s?void 0:s.iframes)||void 0===i?void 0:i.Iframe)e(gapi.iframes.getContext());else{if(!(null===(r=je().gapi)||void 0===r?void 0:r.load)){const e=Ze("iframefcb");return je()[e]=()=>{gapi.load?a():n(vt(t,"network-request-failed"))},(o=`https://apis.google.com/js/api.js?onload=${e}`,new Promise(((t,e)=>{const n=document.createElement("script");n.setAttribute("src",o),n.onload=t,n.onerror=t=>{const n=vt("internal-error");n.customData=t,e(n)},n.type="text/javascript",n.charset="UTF-8",function(){var t,e;return null!==(e=null===(t=document.getElementsByTagName("head"))||void 0===t?void 0:t[0])&&void 0!==e?e:document}().appendChild(n)}))).catch((t=>n(t)))}a()}})).catch((t=>{throw En=null,t}))}(t),En}const bn=new Ct(5e3,15e3),_n={style:{position:"absolute",top:"-100px",width:"1px",height:"1px"},"aria-hidden":"true",tabindex:"-1"},Tn=new Map([["identitytoolkit.googleapis.com","p"],["staging-identitytoolkit.sandbox.googleapis.com","s"],["test-identitytoolkit.sandbox.googleapis.com","t"]]);function Sn(t){const e=t.config;Et(e.authDomain,t,"auth-domain-config-required");const n=e.emulator?At(e,"emulator/auth/iframe"):`https://${t.config.authDomain}/__/auth/iframe`,s={apiKey:e.apiKey,appName:t.name,v:ut},i=Tn.get(t.config.apiHost);i&&(s.eid=i);const r=t._getFrameworks();return r.length&&(s.fw=r.join(",")),`${n}?${O(s).slice(1)}`}const kn={location:"yes",resizable:"yes",statusbar:"yes",toolbar:"no"};class Cn{constructor(t){this.window=t,this.associatedEvent=null}close(){if(this.window)try{this.window.close()}catch(t){}}}function An(t,e,n,s,i,r){Et(t.config.authDomain,t,"auth-domain-config-required"),Et(t.config.apiKey,t,"invalid-api-key");const o={apiKey:t.config.apiKey,appName:t.name,authType:n,redirectUrl:s,v:ut,eventId:i};if(e instanceof Ie){e.setDefaultLanguage(t.languageCode),o.providerId=e.providerId||"",function(t){for(const e in t)if(Object.prototype.hasOwnProperty.call(t,e))return!1;return!0}(e.getCustomParameters())||(o.customParameters=JSON.stringify(e.getCustomParameters()));for(const[t,e]of Object.entries(r||{}))o[t]=e}if(e instanceof be){const t=e.getScopes().filter((t=>""!==t));t.length>0&&(o.scopes=t.join(","))}t.tenantId&&(o.tid=t.tenantId);const a=o;for(const t of Object.keys(a))void 0===a[t]&&delete a[t];return`${function({config:t}){return t.emulator?At(t,"emulator/auth/handler"):`https://${t.authDomain}/__/auth/handler`}(t)}?${O(a).slice(1)}`}const Nn="webStorageSupport",Rn=class{constructor(){this.eventManagers={},this.iframes={},this.originValidationPromises={},this._redirectPersistence=Ue,this._completeRedirectFn=hn}async _openPopup(t,e,n,s){var i;return bt(null===(i=this.eventManagers[t._key()])||void 0===i?void 0:i.manager,"_initialize() not called before _openPopup()"),function(t,e,n,s=500,i=600){const r=Math.max((window.screen.availHeight-i)/2,0).toString(),o=Math.max((window.screen.availWidth-s)/2,0).toString();let a="";const c=Object.assign(Object.assign({},kn),{width:s.toString(),height:i.toString(),top:r,left:o}),u=_().toLowerCase();n&&(a=ne(u)?"_blank":n),te(u)&&(e=e||"http://localhost",c.scrollbars="yes");const l=Object.entries(c).reduce(((t,[e,n])=>`${t}${e}=${n},`),"");if(function(t=_()){var e;return ae(t)&&!!(null===(e=window.navigator)||void 0===e?void 0:e.standalone)}(u)&&"_self"!==a)return function(t,e){const n=document.createElement("a");n.href=t,n.target=e;const s=document.createEvent("MouseEvent");s.initMouseEvent("click",!0,!0,window,1,0,0,0,0,!1,!1,!1,!1,1,null),n.dispatchEvent(s)}(e||"",a),new Cn(null);const h=window.open(e||"",a,l);Et(h,t,"popup-blocked");try{h.focus()}catch(t){}return new Cn(h)}(t,An(t,e,n,St(),s),Ve())}async _openRedirect(t,e,n,s){var i;return await this._originValidation(t),i=An(t,e,n,St(),s),je().location.href=i,new Promise((()=>{}))}_initialize(t){const e=t._key();if(this.eventManagers[e]){const{manager:t,promise:n}=this.eventManagers[e];return t?Promise.resolve(t):(bt(n,"If manager is not set, promise should be"),n)}const n=this.initAndGetManager(t);return this.eventManagers[e]={promise:n},n.catch((()=>{delete this.eventManagers[e]})),n}async initAndGetManager(t){const e=await async function(t){const e=await In(t),n=je().gapi;return Et(n,t,"internal-error"),e.open({where:document.body,url:Sn(t),messageHandlersFilter:n.iframes.CROSS_ORIGIN_IFRAMES_FILTER,attributes:_n,dontclear:!0},(e=>new Promise((async(n,s)=>{await e.restyle({setHideOnLeave:!1});const i=vt(t,"network-request-failed"),r=je().setTimeout((()=>{s(i)}),bn.get());function o(){je().clearTimeout(r),n(e)}e.ping(o).then(o,(()=>{s(i)}))}))))}(t),n=new dn(t);return e.register("authEvent",(e=>(Et(null==e?void 0:e.authEvent,t,"invalid-auth-event"),{status:n.onEvent(e.authEvent)?"ACK":"ERROR"})),gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER),this.eventManagers[t._key()]={manager:n},this.iframes[t._key()]=e,n}_isIframeWebStorageSupported(t,e){this.iframes[t._key()].send(Nn,{type:Nn},(n=>{var s;const i=null===(s=null==n?void 0:n[0])||void 0===s?void 0:s.webStorageSupport;void 0!==i&&e(!!i),yt(t,"internal-error")}),gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER)}_originValidation(t){const e=t._key();return this.originValidationPromises[e]||(this.originValidationPromises[e]=async function(t){if(t.config.emulator)return;const{authorizedDomains:e}=await async function(t,e={}){return Ot(t,"GET","/v1/projects",e)}(t);for(const t of e)try{if(yn(t))return}catch(t){}yt(t,"unauthorized-domain")}(t)),this.originValidationPromises[e]}get _shouldInitProactively(){return ce()||ee()||ae()}};var Dn,Ln="@firebase/auth",On="0.19.4";class Pn{constructor(t){this.auth=t,this.internalListeners=new Map}getUid(){var t;return this.assertAuthConfigured(),(null===(t=this.auth.currentUser)||void 0===t?void 0:t.uid)||null}async getToken(t){return this.assertAuthConfigured(),await this.auth._initializationPromise,this.auth.currentUser?{accessToken:await this.auth.currentUser.getIdToken(t)}:null}addAuthTokenListener(t){if(this.assertAuthConfigured(),this.internalListeners.has(t))return;const e=this.auth.onIdTokenChanged((e=>{var n;t((null===(n=e)||void 0===n?void 0:n.stsTokenManager.accessToken)||null)}));this.internalListeners.set(t,e),this.updateProactiveRefresh()}removeAuthTokenListener(t){this.assertAuthConfigured();const e=this.internalListeners.get(t);e&&(this.internalListeners.delete(t),e(),this.updateProactiveRefresh())}assertAuthConfigured(){Et(this.auth._initializationPromise,"dependent-sdk-initialized-before-auth")}updateProactiveRefresh(){this.internalListeners.size>0?this.auth._startProactiveRefresh():this.auth._stopProactiveRefresh()}}Dn="Browser",rt(new V("auth",((t,{options:e})=>{const n=t.getProvider("app").getImmediate(),{apiKey:s,authDomain:i}=n.options;return(t=>{Et(s&&!s.includes(":"),"invalid-api-key",{appName:t.name}),Et(!(null==i?void 0:i.includes(":")),"argument-error",{appName:t.name});const n={apiKey:s,authDomain:i,clientPlatform:Dn,apiHost:"identitytoolkit.googleapis.com",tokenApiHost:"securetoken.googleapis.com",apiScheme:"https",sdkClientVersion:ue(Dn)},r=new le(t,n);return function(t,e){const n=(null==e?void 0:e.persistence)||[],s=(Array.isArray(n)?n:[n]).map(Tt);(null==e?void 0:e.errorMap)&&t._updateErrorMap(e.errorMap),t._initializeWithPersistence(s,null==e?void 0:e.popupRedirectResolver)}(r,e),r})(n)}),"PUBLIC").setInstantiationMode("EXPLICIT").setInstanceCreatedCallback(((t,e,n)=>{t.getProvider("auth-internal").initialize()}))),rt(new V("auth-internal",(t=>(t=>new Pn(t))(he(t.getProvider("auth").getImmediate()))),"PRIVATE").setInstantiationMode("EXPLICIT")),ht(Ln,On,void 0),ht(Ln,On,"esm2017");var Mn=n(917);function xn(t){console.log(t),document.querySelector(".header__username").textContent=t}function Un(){document.querySelector(".sidebar").classList.toggle("hide")}function Fn(){document.querySelector(".header__upload").classList.toggle("visible")}function Vn(){const t=document.getElementById("profile"),e=document.querySelector(".header__image");if(this.files){const e=new FileReader;e.readAsDataURL(this.files[0]),e.addEventListener("load",(()=>{t.src=e.result,console.log(t.src)}))}e.click()}const qn=document.querySelector(".container");function jn(){const t=document.querySelector(".sidebar"),e=document.querySelector(".header"),n=document.querySelector(".add__button");t.classList.remove("hide"),e.classList.remove("hide"),n.classList.remove("hide")}function Bn(){return document.querySelector(".header__username").textContent}function Hn(){[...document.querySelector(".container").children].forEach((t=>{t.remove()}))}var $n,Kn="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==n.g?n.g:"undefined"!=typeof self?self:{},zn={},Gn=Gn||{},Wn=Kn||self;function Jn(){}function Qn(t){var e=typeof t;return"array"==(e="object"!=e?e:t?Array.isArray(t)?"array":e:"null")||"object"==e&&"number"==typeof t.length}function Xn(t){var e=typeof t;return"object"==e&&null!=t||"function"==e}var Yn="closure_uid_"+(1e9*Math.random()>>>0),Zn=0;function ts(t,e,n){return t.call.apply(t.bind,arguments)}function es(t,e,n){if(!t)throw Error();if(2<arguments.length){var s=Array.prototype.slice.call(arguments,2);return function(){var n=Array.prototype.slice.call(arguments);return Array.prototype.unshift.apply(n,s),t.apply(e,n)}}return function(){return t.apply(e,arguments)}}function ns(t,e,n){return(ns=Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?ts:es).apply(null,arguments)}function ss(t,e){var n=Array.prototype.slice.call(arguments,1);return function(){var e=n.slice();return e.push.apply(e,arguments),t.apply(this,e)}}function is(t,e){function n(){}n.prototype=e.prototype,t.Z=e.prototype,t.prototype=new n,t.prototype.constructor=t,t.Vb=function(t,n,s){for(var i=Array(arguments.length-2),r=2;r<arguments.length;r++)i[r-2]=arguments[r];return e.prototype[n].apply(t,i)}}function rs(){this.s=this.s,this.o=this.o}var os={};rs.prototype.s=!1,rs.prototype.na=function(){if(!this.s&&(this.s=!0,this.M(),0)){var t=function(t){return Object.prototype.hasOwnProperty.call(t,Yn)&&t[Yn]||(t[Yn]=++Zn)}(this);delete os[t]}},rs.prototype.M=function(){if(this.o)for(;this.o.length;)this.o.shift()()};const as=Array.prototype.indexOf?function(t,e){return Array.prototype.indexOf.call(t,e,void 0)}:function(t,e){if("string"==typeof t)return"string"!=typeof e||1!=e.length?-1:t.indexOf(e,0);for(let n=0;n<t.length;n++)if(n in t&&t[n]===e)return n;return-1},cs=Array.prototype.forEach?function(t,e,n){Array.prototype.forEach.call(t,e,n)}:function(t,e,n){const s=t.length,i="string"==typeof t?t.split(""):t;for(let r=0;r<s;r++)r in i&&e.call(n,i[r],r,t)};function us(t){return Array.prototype.concat.apply([],arguments)}function ls(t){const e=t.length;if(0<e){const n=Array(e);for(let s=0;s<e;s++)n[s]=t[s];return n}return[]}function hs(t){return/^[\s\xa0]*$/.test(t)}var ds,fs=String.prototype.trim?function(t){return t.trim()}:function(t){return/^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(t)[1]};function ps(t,e){return-1!=t.indexOf(e)}function ms(t,e){return t<e?-1:t>e?1:0}t:{var gs=Wn.navigator;if(gs){var ys=gs.userAgent;if(ys){ds=ys;break t}}ds=""}function vs(t,e,n){for(const s in t)e.call(n,t[s],s,t)}function ws(t){const e={};for(const n in t)e[n]=t[n];return e}var Es="constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");function Is(t,e){let n,s;for(let e=1;e<arguments.length;e++){for(n in s=arguments[e],s)t[n]=s[n];for(let e=0;e<Es.length;e++)n=Es[e],Object.prototype.hasOwnProperty.call(s,n)&&(t[n]=s[n])}}function bs(t){return bs[" "](t),t}bs[" "]=Jn;var _s,Ts,Ss=ps(ds,"Opera"),ks=ps(ds,"Trident")||ps(ds,"MSIE"),Cs=ps(ds,"Edge"),As=Cs||ks,Ns=ps(ds,"Gecko")&&!(ps(ds.toLowerCase(),"webkit")&&!ps(ds,"Edge"))&&!(ps(ds,"Trident")||ps(ds,"MSIE"))&&!ps(ds,"Edge"),Rs=ps(ds.toLowerCase(),"webkit")&&!ps(ds,"Edge");function Ds(){var t=Wn.document;return t?t.documentMode:void 0}t:{var Ls="",Os=(Ts=ds,Ns?/rv:([^\);]+)(\)|;)/.exec(Ts):Cs?/Edge\/([\d\.]+)/.exec(Ts):ks?/\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(Ts):Rs?/WebKit\/(\S+)/.exec(Ts):Ss?/(?:Version)[ \/]?(\S+)/.exec(Ts):void 0);if(Os&&(Ls=Os?Os[1]:""),ks){var Ps=Ds();if(null!=Ps&&Ps>parseFloat(Ls)){_s=String(Ps);break t}}_s=Ls}var Ms,xs={};function Us(){return t=xs,Object.prototype.hasOwnProperty.call(t,9)?t[9]:t[9]=function(){let t=0;const e=fs(String(_s)).split("."),n=fs("9").split("."),s=Math.max(e.length,n.length);for(let o=0;0==t&&o<s;o++){var i=e[o]||"",r=n[o]||"";do{if(i=/(\d*)(\D*)(.*)/.exec(i)||["","","",""],r=/(\d*)(\D*)(.*)/.exec(r)||["","","",""],0==i[0].length&&0==r[0].length)break;t=ms(0==i[1].length?0:parseInt(i[1],10),0==r[1].length?0:parseInt(r[1],10))||ms(0==i[2].length,0==r[2].length)||ms(i[2],r[2]),i=i[3],r=r[3]}while(0==t)}return 0<=t}();var t}Wn.document&&ks?Ms=Ds()||parseInt(_s,10)||void 0:Ms=void 0;var Fs=Ms,Vs=function(){if(!Wn.addEventListener||!Object.defineProperty)return!1;var t=!1,e=Object.defineProperty({},"passive",{get:function(){t=!0}});try{Wn.addEventListener("test",Jn,e),Wn.removeEventListener("test",Jn,e)}catch(t){}return t}();function qs(t,e){this.type=t,this.g=this.target=e,this.defaultPrevented=!1}function js(t,e){if(qs.call(this,t?t.type:""),this.relatedTarget=this.g=this.target=null,this.button=this.screenY=this.screenX=this.clientY=this.clientX=0,this.key="",this.metaKey=this.shiftKey=this.altKey=this.ctrlKey=!1,this.state=null,this.pointerId=0,this.pointerType="",this.i=null,t){var n=this.type=t.type,s=t.changedTouches&&t.changedTouches.length?t.changedTouches[0]:null;if(this.target=t.target||t.srcElement,this.g=e,e=t.relatedTarget){if(Ns){t:{try{bs(e.nodeName);var i=!0;break t}catch(t){}i=!1}i||(e=null)}}else"mouseover"==n?e=t.fromElement:"mouseout"==n&&(e=t.toElement);this.relatedTarget=e,s?(this.clientX=void 0!==s.clientX?s.clientX:s.pageX,this.clientY=void 0!==s.clientY?s.clientY:s.pageY,this.screenX=s.screenX||0,this.screenY=s.screenY||0):(this.clientX=void 0!==t.clientX?t.clientX:t.pageX,this.clientY=void 0!==t.clientY?t.clientY:t.pageY,this.screenX=t.screenX||0,this.screenY=t.screenY||0),this.button=t.button,this.key=t.key||"",this.ctrlKey=t.ctrlKey,this.altKey=t.altKey,this.shiftKey=t.shiftKey,this.metaKey=t.metaKey,this.pointerId=t.pointerId||0,this.pointerType="string"==typeof t.pointerType?t.pointerType:Bs[t.pointerType]||"",this.state=t.state,this.i=t,t.defaultPrevented&&js.Z.h.call(this)}}qs.prototype.h=function(){this.defaultPrevented=!0},is(js,qs);var Bs={2:"touch",3:"pen",4:"mouse"};js.prototype.h=function(){js.Z.h.call(this);var t=this.i;t.preventDefault?t.preventDefault():t.returnValue=!1};var Hs="closure_listenable_"+(1e6*Math.random()|0),$s=0;function Ks(t,e,n,s,i){this.listener=t,this.proxy=null,this.src=e,this.type=n,this.capture=!!s,this.ia=i,this.key=++$s,this.ca=this.fa=!1}function zs(t){t.ca=!0,t.listener=null,t.proxy=null,t.src=null,t.ia=null}function Gs(t){this.src=t,this.g={},this.h=0}function Ws(t,e){var n=e.type;if(n in t.g){var s,i=t.g[n],r=as(i,e);(s=0<=r)&&Array.prototype.splice.call(i,r,1),s&&(zs(e),0==t.g[n].length&&(delete t.g[n],t.h--))}}function Js(t,e,n,s){for(var i=0;i<t.length;++i){var r=t[i];if(!r.ca&&r.listener==e&&r.capture==!!n&&r.ia==s)return i}return-1}Gs.prototype.add=function(t,e,n,s,i){var r=t.toString();(t=this.g[r])||(t=this.g[r]=[],this.h++);var o=Js(t,e,s,i);return-1<o?(e=t[o],n||(e.fa=!1)):((e=new Ks(e,this.src,r,!!s,i)).fa=n,t.push(e)),e};var Qs="closure_lm_"+(1e6*Math.random()|0),Xs={};function Ys(t,e,n,s,i){if(s&&s.once)return ti(t,e,n,s,i);if(Array.isArray(e)){for(var r=0;r<e.length;r++)Ys(t,e[r],n,s,i);return null}return n=ai(n),t&&t[Hs]?t.N(e,n,Xn(s)?!!s.capture:!!s,i):Zs(t,e,n,!1,s,i)}function Zs(t,e,n,s,i,r){if(!e)throw Error("Invalid event type");var o=Xn(i)?!!i.capture:!!i,a=ri(t);if(a||(t[Qs]=a=new Gs(t)),(n=a.add(e,n,s,o,r)).proxy)return n;if(s=function(){var t=ii;return function e(n){return t.call(e.src,e.listener,n)}}(),n.proxy=s,s.src=t,s.listener=n,t.addEventListener)Vs||(i=o),void 0===i&&(i=!1),t.addEventListener(e.toString(),s,i);else if(t.attachEvent)t.attachEvent(si(e.toString()),s);else{if(!t.addListener||!t.removeListener)throw Error("addEventListener and attachEvent are unavailable.");t.addListener(s)}return n}function ti(t,e,n,s,i){if(Array.isArray(e)){for(var r=0;r<e.length;r++)ti(t,e[r],n,s,i);return null}return n=ai(n),t&&t[Hs]?t.O(e,n,Xn(s)?!!s.capture:!!s,i):Zs(t,e,n,!0,s,i)}function ei(t,e,n,s,i){if(Array.isArray(e))for(var r=0;r<e.length;r++)ei(t,e[r],n,s,i);else s=Xn(s)?!!s.capture:!!s,n=ai(n),t&&t[Hs]?(t=t.i,(e=String(e).toString())in t.g&&-1<(n=Js(r=t.g[e],n,s,i))&&(zs(r[n]),Array.prototype.splice.call(r,n,1),0==r.length&&(delete t.g[e],t.h--))):t&&(t=ri(t))&&(e=t.g[e.toString()],t=-1,e&&(t=Js(e,n,s,i)),(n=-1<t?e[t]:null)&&ni(n))}function ni(t){if("number"!=typeof t&&t&&!t.ca){var e=t.src;if(e&&e[Hs])Ws(e.i,t);else{var n=t.type,s=t.proxy;e.removeEventListener?e.removeEventListener(n,s,t.capture):e.detachEvent?e.detachEvent(si(n),s):e.addListener&&e.removeListener&&e.removeListener(s),(n=ri(e))?(Ws(n,t),0==n.h&&(n.src=null,e[Qs]=null)):zs(t)}}}function si(t){return t in Xs?Xs[t]:Xs[t]="on"+t}function ii(t,e){if(t.ca)t=!0;else{e=new js(e,this);var n=t.listener,s=t.ia||t.src;t.fa&&ni(t),t=n.call(s,e)}return t}function ri(t){return(t=t[Qs])instanceof Gs?t:null}var oi="__closure_events_fn_"+(1e9*Math.random()>>>0);function ai(t){return"function"==typeof t?t:(t[oi]||(t[oi]=function(e){return t.handleEvent(e)}),t[oi])}function ci(){rs.call(this),this.i=new Gs(this),this.P=this,this.I=null}function ui(t,e){var n,s=t.I;if(s)for(n=[];s;s=s.I)n.push(s);if(t=t.P,s=e.type||e,"string"==typeof e)e=new qs(e,t);else if(e instanceof qs)e.target=e.target||t;else{var i=e;Is(e=new qs(s,t),i)}if(i=!0,n)for(var r=n.length-1;0<=r;r--){var o=e.g=n[r];i=li(o,s,!0,e)&&i}if(i=li(o=e.g=t,s,!0,e)&&i,i=li(o,s,!1,e)&&i,n)for(r=0;r<n.length;r++)i=li(o=e.g=n[r],s,!1,e)&&i}function li(t,e,n,s){if(!(e=t.i.g[String(e)]))return!0;e=e.concat();for(var i=!0,r=0;r<e.length;++r){var o=e[r];if(o&&!o.ca&&o.capture==n){var a=o.listener,c=o.ia||o.src;o.fa&&Ws(t.i,o),i=!1!==a.call(c,s)&&i}}return i&&!s.defaultPrevented}is(ci,rs),ci.prototype[Hs]=!0,ci.prototype.removeEventListener=function(t,e,n,s){ei(this,t,e,n,s)},ci.prototype.M=function(){if(ci.Z.M.call(this),this.i){var t,e=this.i;for(t in e.g){for(var n=e.g[t],s=0;s<n.length;s++)zs(n[s]);delete e.g[t],e.h--}}this.I=null},ci.prototype.N=function(t,e,n,s){return this.i.add(String(t),e,!1,n,s)},ci.prototype.O=function(t,e,n,s){return this.i.add(String(t),e,!0,n,s)};var hi=Wn.JSON.stringify;function di(){var t=wi;let e=null;return t.g&&(e=t.g,t.g=t.g.next,t.g||(t.h=null),e.next=null),e}var fi,pi=new class{constructor(t,e){this.i=t,this.j=e,this.h=0,this.g=null}get(){let t;return 0<this.h?(this.h--,t=this.g,this.g=t.next,t.next=null):t=this.i(),t}}((()=>new mi),(t=>t.reset()));class mi{constructor(){this.next=this.g=this.h=null}set(t,e){this.h=t,this.g=e,this.next=null}reset(){this.next=this.g=this.h=null}}function gi(t){Wn.setTimeout((()=>{throw t}),0)}function yi(t,e){fi||function(){var t=Wn.Promise.resolve(void 0);fi=function(){t.then(Ei)}}(),vi||(fi(),vi=!0),wi.add(t,e)}var vi=!1,wi=new class{constructor(){this.h=this.g=null}add(t,e){const n=pi.get();n.set(t,e),this.h?this.h.next=n:this.g=n,this.h=n}};function Ei(){for(var t;t=di();){try{t.h.call(t.g)}catch(t){gi(t)}var e=pi;e.j(t),100>e.h&&(e.h++,t.next=e.g,e.g=t)}vi=!1}function Ii(t,e){ci.call(this),this.h=t||1,this.g=e||Wn,this.j=ns(this.kb,this),this.l=Date.now()}function bi(t){t.da=!1,t.S&&(t.g.clearTimeout(t.S),t.S=null)}function _i(t,e,n){if("function"==typeof t)n&&(t=ns(t,n));else{if(!t||"function"!=typeof t.handleEvent)throw Error("Invalid listener argument");t=ns(t.handleEvent,t)}return 2147483647<Number(e)?-1:Wn.setTimeout(t,e||0)}function Ti(t){t.g=_i((()=>{t.g=null,t.i&&(t.i=!1,Ti(t))}),t.j);const e=t.h;t.h=null,t.m.apply(null,e)}is(Ii,ci),($n=Ii.prototype).da=!1,$n.S=null,$n.kb=function(){if(this.da){var t=Date.now()-this.l;0<t&&t<.8*this.h?this.S=this.g.setTimeout(this.j,this.h-t):(this.S&&(this.g.clearTimeout(this.S),this.S=null),ui(this,"tick"),this.da&&(bi(this),this.start()))}},$n.start=function(){this.da=!0,this.S||(this.S=this.g.setTimeout(this.j,this.h),this.l=Date.now())},$n.M=function(){Ii.Z.M.call(this),bi(this),delete this.g};class Si extends rs{constructor(t,e){super(),this.m=t,this.j=e,this.h=null,this.i=!1,this.g=null}l(t){this.h=arguments,this.g?this.i=!0:Ti(this)}M(){super.M(),this.g&&(Wn.clearTimeout(this.g),this.g=null,this.i=!1,this.h=null)}}function ki(t){rs.call(this),this.h=t,this.g={}}is(ki,rs);var Ci=[];function Ai(t,e,n,s){Array.isArray(n)||(n&&(Ci[0]=n.toString()),n=Ci);for(var i=0;i<n.length;i++){var r=Ys(e,n[i],s||t.handleEvent,!1,t.h||t);if(!r)break;t.g[r.key]=r}}function Ni(t){vs(t.g,(function(t,e){this.g.hasOwnProperty(e)&&ni(t)}),t),t.g={}}function Ri(){this.g=!0}function Di(t,e,n,s){t.info((function(){return"XMLHTTP TEXT ("+e+"): "+function(t,e){if(!t.g)return e;if(!e)return null;try{var n=JSON.parse(e);if(n)for(t=0;t<n.length;t++)if(Array.isArray(n[t])){var s=n[t];if(!(2>s.length)){var i=s[1];if(Array.isArray(i)&&!(1>i.length)){var r=i[0];if("noop"!=r&&"stop"!=r&&"close"!=r)for(var o=1;o<i.length;o++)i[o]=""}}}return hi(n)}catch(t){return e}}(t,n)+(s?" "+s:"")}))}ki.prototype.M=function(){ki.Z.M.call(this),Ni(this)},ki.prototype.handleEvent=function(){throw Error("EventHandler.handleEvent not implemented")},Ri.prototype.Aa=function(){this.g=!1},Ri.prototype.info=function(){};var Li={},Oi=null;function Pi(){return Oi=Oi||new ci}function Mi(t){qs.call(this,Li.Ma,t)}function xi(t){const e=Pi();ui(e,new Mi(e,t))}function Ui(t,e){qs.call(this,Li.STAT_EVENT,t),this.stat=e}function Fi(t){const e=Pi();ui(e,new Ui(e,t))}function Vi(t,e){qs.call(this,Li.Na,t),this.size=e}function qi(t,e){if("function"!=typeof t)throw Error("Fn must not be null and must be a function");return Wn.setTimeout((function(){t()}),e)}Li.Ma="serverreachability",is(Mi,qs),Li.STAT_EVENT="statevent",is(Ui,qs),Li.Na="timingevent",is(Vi,qs);var ji={NO_ERROR:0,lb:1,yb:2,xb:3,sb:4,wb:5,zb:6,Ja:7,TIMEOUT:8,Cb:9},Bi={qb:"complete",Mb:"success",Ka:"error",Ja:"abort",Eb:"ready",Fb:"readystatechange",TIMEOUT:"timeout",Ab:"incrementaldata",Db:"progress",tb:"downloadprogress",Ub:"uploadprogress"};function Hi(){}function $i(t){return t.h||(t.h=t.i())}function Ki(){}Hi.prototype.h=null;var zi,Gi={OPEN:"a",pb:"b",Ka:"c",Bb:"d"};function Wi(){qs.call(this,"d")}function Ji(){qs.call(this,"c")}function Qi(){}function Xi(t,e,n,s){this.l=t,this.j=e,this.m=n,this.X=s||1,this.V=new ki(this),this.P=Zi,t=As?125:void 0,this.W=new Ii(t),this.H=null,this.i=!1,this.s=this.A=this.v=this.K=this.F=this.Y=this.B=null,this.D=[],this.g=null,this.C=0,this.o=this.u=null,this.N=-1,this.I=!1,this.O=0,this.L=null,this.aa=this.J=this.$=this.U=!1,this.h=new Yi}function Yi(){this.i=null,this.g="",this.h=!1}is(Wi,qs),is(Ji,qs),is(Qi,Hi),Qi.prototype.g=function(){return new XMLHttpRequest},Qi.prototype.i=function(){return{}},zi=new Qi;var Zi=45e3,tr={},er={};function nr(t,e,n){t.K=1,t.v=Sr(wr(e)),t.s=n,t.U=!0,sr(t,null)}function sr(t,e){t.F=Date.now(),ar(t),t.A=wr(t.v);var n=t.A,s=t.X;Array.isArray(s)||(s=[String(s)]),Fr(n.h,"t",s),t.C=0,n=t.l.H,t.h=new Yi,t.g=Vo(t.l,n?e:null,!t.s),0<t.O&&(t.L=new Si(ns(t.Ia,t,t.g),t.O)),Ai(t.V,t.g,"readystatechange",t.gb),e=t.H?ws(t.H):{},t.s?(t.u||(t.u="POST"),e["Content-Type"]="application/x-www-form-urlencoded",t.g.ea(t.A,t.u,t.s,e)):(t.u="GET",t.g.ea(t.A,t.u,null,e)),xi(1),function(t,e,n,s,i,r){t.info((function(){if(t.g)if(r)for(var o="",a=r.split("&"),c=0;c<a.length;c++){var u=a[c].split("=");if(1<u.length){var l=u[0];u=u[1];var h=l.split("_");o=2<=h.length&&"type"==h[1]?o+(l+"=")+u+"&":o+(l+"=redacted&")}}else o=null;else o=r;return"XMLHTTP REQ ("+s+") [attempt "+i+"]: "+e+"\n"+n+"\n"+o}))}(t.j,t.u,t.A,t.m,t.X,t.s)}function ir(t){return!!t.g&&"GET"==t.u&&2!=t.K&&t.l.Ba}function rr(t,e,n){let s,i=!0;for(;!t.I&&t.C<n.length;){if(s=or(t,n),s==er){4==e&&(t.o=4,Fi(14),i=!1),Di(t.j,t.m,null,"[Incomplete Response]");break}if(s==tr){t.o=4,Fi(15),Di(t.j,t.m,n,"[Invalid Chunk]"),i=!1;break}Di(t.j,t.m,s,null),dr(t,s)}ir(t)&&s!=er&&s!=tr&&(t.h.g="",t.C=0),4!=e||0!=n.length||t.h.h||(t.o=1,Fi(16),i=!1),t.i=t.i&&i,i?0<n.length&&!t.aa&&(t.aa=!0,(e=t.l).g==t&&e.$&&!e.L&&(e.h.info("Great, no buffering proxy detected. Bytes received: "+n.length),Do(e),e.L=!0,Fi(11))):(Di(t.j,t.m,n,"[Invalid Chunked Response]"),hr(t),lr(t))}function or(t,e){var n=t.C,s=e.indexOf("\n",n);return-1==s?er:(n=Number(e.substring(n,s)),isNaN(n)?tr:(s+=1)+n>e.length?er:(e=e.substr(s,n),t.C=s+n,e))}function ar(t){t.Y=Date.now()+t.P,cr(t,t.P)}function cr(t,e){if(null!=t.B)throw Error("WatchDog timer not null");t.B=qi(ns(t.eb,t),e)}function ur(t){t.B&&(Wn.clearTimeout(t.B),t.B=null)}function lr(t){0==t.l.G||t.I||Po(t.l,t)}function hr(t){ur(t);var e=t.L;e&&"function"==typeof e.na&&e.na(),t.L=null,bi(t.W),Ni(t.V),t.g&&(e=t.g,t.g=null,e.abort(),e.na())}function dr(t,e){try{var n=t.l;if(0!=n.G&&(n.g==t||$r(n.i,t)))if(n.I=t.N,!t.J&&$r(n.i,t)&&3==n.G){try{var s=n.Ca.g.parse(e)}catch(t){s=null}if(Array.isArray(s)&&3==s.length){var i=s;if(0==i[0]){t:if(!n.u){if(n.g){if(!(n.g.F+3e3<t.F))break t;Oo(n),bo(n)}Ro(n),Fi(18)}}else n.ta=i[1],0<n.ta-n.U&&37500>i[2]&&n.N&&0==n.A&&!n.v&&(n.v=qi(ns(n.ab,n),6e3));if(1>=Hr(n.i)&&n.ka){try{n.ka()}catch(t){}n.ka=void 0}}else xo(n,11)}else if((t.J||n.g==t)&&Oo(n),!hs(e))for(i=n.Ca.g.parse(e),e=0;e<i.length;e++){let u=i[e];if(n.U=u[0],u=u[1],2==n.G)if("c"==u[0]){n.J=u[1],n.la=u[2];const e=u[3];null!=e&&(n.ma=e,n.h.info("VER="+n.ma));const i=u[4];null!=i&&(n.za=i,n.h.info("SVER="+n.za));const l=u[5];null!=l&&"number"==typeof l&&0<l&&(s=1.5*l,n.K=s,n.h.info("backChannelRequestTimeoutMs_="+s)),s=n;const h=t.g;if(h){const t=h.g?h.g.getResponseHeader("X-Client-Wire-Protocol"):null;if(t){var r=s.i;!r.g&&(ps(t,"spdy")||ps(t,"quic")||ps(t,"h2"))&&(r.j=r.l,r.g=new Set,r.h&&(Kr(r,r.h),r.h=null))}if(s.D){const t=h.g?h.g.getResponseHeader("X-HTTP-Session-Id"):null;t&&(s.sa=t,Tr(s.F,s.D,t))}}n.G=3,n.j&&n.j.xa(),n.$&&(n.O=Date.now()-t.F,n.h.info("Handshake RTT: "+n.O+"ms"));var o=t;if((s=n).oa=Fo(s,s.H?s.la:null,s.W),o.J){zr(s.i,o);var a=o,c=s.K;c&&a.setTimeout(c),a.B&&(ur(a),ar(a)),s.g=o}else No(s);0<n.l.length&&So(n)}else"stop"!=u[0]&&"close"!=u[0]||xo(n,7);else 3==n.G&&("stop"==u[0]||"close"==u[0]?"stop"==u[0]?xo(n,7):Io(n):"noop"!=u[0]&&n.j&&n.j.wa(u),n.A=0)}xi(4)}catch(t){}}function fr(t,e){if(t.forEach&&"function"==typeof t.forEach)t.forEach(e,void 0);else if(Qn(t)||"string"==typeof t)cs(t,e,void 0);else{if(t.T&&"function"==typeof t.T)var n=t.T();else if(t.R&&"function"==typeof t.R)n=void 0;else if(Qn(t)||"string"==typeof t){n=[];for(var s=t.length,i=0;i<s;i++)n.push(i)}else for(i in n=[],s=0,t)n[s++]=i;s=function(t){if(t.R&&"function"==typeof t.R)return t.R();if("string"==typeof t)return t.split("");if(Qn(t)){for(var e=[],n=t.length,s=0;s<n;s++)e.push(t[s]);return e}for(s in e=[],n=0,t)e[n++]=t[s];return e}(t),i=s.length;for(var r=0;r<i;r++)e.call(void 0,s[r],n&&n[r],t)}}function pr(t,e){this.h={},this.g=[],this.i=0;var n=arguments.length;if(1<n){if(n%2)throw Error("Uneven number of arguments");for(var s=0;s<n;s+=2)this.set(arguments[s],arguments[s+1])}else if(t)if(t instanceof pr)for(n=t.T(),s=0;s<n.length;s++)this.set(n[s],t.get(n[s]));else for(s in t)this.set(s,t[s])}function mr(t){if(t.i!=t.g.length){for(var e=0,n=0;e<t.g.length;){var s=t.g[e];gr(t.h,s)&&(t.g[n++]=s),e++}t.g.length=n}if(t.i!=t.g.length){var i={};for(n=e=0;e<t.g.length;)gr(i,s=t.g[e])||(t.g[n++]=s,i[s]=1),e++;t.g.length=n}}function gr(t,e){return Object.prototype.hasOwnProperty.call(t,e)}($n=Xi.prototype).setTimeout=function(t){this.P=t},$n.gb=function(t){t=t.target;const e=this.L;e&&3==go(t)?e.l():this.Ia(t)},$n.Ia=function(t){try{if(t==this.g)t:{const l=go(this.g);var e=this.g.Da();const h=this.g.ba();if(!(3>l)&&(3!=l||As||this.g&&(this.h.h||this.g.ga()||yo(this.g)))){this.I||4!=l||7==e||xi(8==e||0>=h?3:2),ur(this);var n=this.g.ba();this.N=n;e:if(ir(this)){var s=yo(this.g);t="";var i=s.length,r=4==go(this.g);if(!this.h.i){if("undefined"==typeof TextDecoder){hr(this),lr(this);var o="";break e}this.h.i=new Wn.TextDecoder}for(e=0;e<i;e++)this.h.h=!0,t+=this.h.i.decode(s[e],{stream:r&&e==i-1});s.splice(0,i),this.h.g+=t,this.C=0,o=this.h.g}else o=this.g.ga();if(this.i=200==n,function(t,e,n,s,i,r,o){t.info((function(){return"XMLHTTP RESP ("+s+") [ attempt "+i+"]: "+e+"\n"+n+"\n"+r+" "+o}))}(this.j,this.u,this.A,this.m,this.X,l,n),this.i){if(this.$&&!this.J){e:{if(this.g){var a,c=this.g;if((a=c.g?c.g.getResponseHeader("X-HTTP-Initial-Response"):null)&&!hs(a)){var u=a;break e}}u=null}if(!(n=u)){this.i=!1,this.o=3,Fi(12),hr(this),lr(this);break t}Di(this.j,this.m,n,"Initial handshake response via X-HTTP-Initial-Response"),this.J=!0,dr(this,n)}this.U?(rr(this,l,o),As&&this.i&&3==l&&(Ai(this.V,this.W,"tick",this.fb),this.W.start())):(Di(this.j,this.m,o,null),dr(this,o)),4==l&&hr(this),this.i&&!this.I&&(4==l?Po(this.l,this):(this.i=!1,ar(this)))}else 400==n&&0<o.indexOf("Unknown SID")?(this.o=3,Fi(12)):(this.o=0,Fi(13)),hr(this),lr(this)}}}catch(t){}},$n.fb=function(){if(this.g){var t=go(this.g),e=this.g.ga();this.C<e.length&&(ur(this),rr(this,t,e),this.i&&4!=t&&ar(this))}},$n.cancel=function(){this.I=!0,hr(this)},$n.eb=function(){this.B=null;const t=Date.now();0<=t-this.Y?(function(t,e){t.info((function(){return"TIMEOUT: "+e}))}(this.j,this.A),2!=this.K&&(xi(3),Fi(17)),hr(this),this.o=2,lr(this)):cr(this,this.Y-t)},($n=pr.prototype).R=function(){mr(this);for(var t=[],e=0;e<this.g.length;e++)t.push(this.h[this.g[e]]);return t},$n.T=function(){return mr(this),this.g.concat()},$n.get=function(t,e){return gr(this.h,t)?this.h[t]:e},$n.set=function(t,e){gr(this.h,t)||(this.i++,this.g.push(t)),this.h[t]=e},$n.forEach=function(t,e){for(var n=this.T(),s=0;s<n.length;s++){var i=n[s],r=this.get(i);t.call(e,r,i,this)}};var yr=/^(?:([^:/?#.]+):)?(?:\/\/(?:([^\\/?#]*)@)?([^\\/?#]*?)(?::([0-9]+))?(?=[\\/?#]|$))?([^?#]+)?(?:\?([^#]*))?(?:#([\s\S]*))?$/;function vr(t,e){if(this.i=this.s=this.j="",this.m=null,this.o=this.l="",this.g=!1,t instanceof vr){this.g=void 0!==e?e:t.g,Er(this,t.j),this.s=t.s,Ir(this,t.i),br(this,t.m),this.l=t.l,e=t.h;var n=new Pr;n.i=e.i,e.g&&(n.g=new pr(e.g),n.h=e.h),_r(this,n),this.o=t.o}else t&&(n=String(t).match(yr))?(this.g=!!e,Er(this,n[1]||"",!0),this.s=kr(n[2]||""),Ir(this,n[3]||"",!0),br(this,n[4]),this.l=kr(n[5]||"",!0),_r(this,n[6]||"",!0),this.o=kr(n[7]||"")):(this.g=!!e,this.h=new Pr(null,this.g))}function wr(t){return new vr(t)}function Er(t,e,n){t.j=n?kr(e,!0):e,t.j&&(t.j=t.j.replace(/:$/,""))}function Ir(t,e,n){t.i=n?kr(e,!0):e}function br(t,e){if(e){if(e=Number(e),isNaN(e)||0>e)throw Error("Bad port number "+e);t.m=e}else t.m=null}function _r(t,e,n){e instanceof Pr?(t.h=e,function(t,e){e&&!t.j&&(Mr(t),t.i=null,t.g.forEach((function(t,e){var n=e.toLowerCase();e!=n&&(xr(this,e),Fr(this,n,t))}),t)),t.j=e}(t.h,t.g)):(n||(e=Cr(e,Lr)),t.h=new Pr(e,t.g))}function Tr(t,e,n){t.h.set(e,n)}function Sr(t){return Tr(t,"zx",Math.floor(2147483648*Math.random()).toString(36)+Math.abs(Math.floor(2147483648*Math.random())^Date.now()).toString(36)),t}function kr(t,e){return t?e?decodeURI(t.replace(/%25/g,"%2525")):decodeURIComponent(t):""}function Cr(t,e,n){return"string"==typeof t?(t=encodeURI(t).replace(e,Ar),n&&(t=t.replace(/%25([0-9a-fA-F]{2})/g,"%$1")),t):null}function Ar(t){return"%"+((t=t.charCodeAt(0))>>4&15).toString(16)+(15&t).toString(16)}vr.prototype.toString=function(){var t=[],e=this.j;e&&t.push(Cr(e,Nr,!0),":");var n=this.i;return(n||"file"==e)&&(t.push("//"),(e=this.s)&&t.push(Cr(e,Nr,!0),"@"),t.push(encodeURIComponent(String(n)).replace(/%25([0-9a-fA-F]{2})/g,"%$1")),null!=(n=this.m)&&t.push(":",String(n))),(n=this.l)&&(this.i&&"/"!=n.charAt(0)&&t.push("/"),t.push(Cr(n,"/"==n.charAt(0)?Dr:Rr,!0))),(n=this.h.toString())&&t.push("?",n),(n=this.o)&&t.push("#",Cr(n,Or)),t.join("")};var Nr=/[#\/\?@]/g,Rr=/[#\?:]/g,Dr=/[#\?]/g,Lr=/[#\?@]/g,Or=/#/g;function Pr(t,e){this.h=this.g=null,this.i=t||null,this.j=!!e}function Mr(t){t.g||(t.g=new pr,t.h=0,t.i&&function(t,e){if(t){t=t.split("&");for(var n=0;n<t.length;n++){var s=t[n].indexOf("="),i=null;if(0<=s){var r=t[n].substring(0,s);i=t[n].substring(s+1)}else r=t[n];e(r,i?decodeURIComponent(i.replace(/\+/g," ")):"")}}}(t.i,(function(e,n){t.add(decodeURIComponent(e.replace(/\+/g," ")),n)})))}function xr(t,e){Mr(t),e=Vr(t,e),gr(t.g.h,e)&&(t.i=null,t.h-=t.g.get(e).length,gr((t=t.g).h,e)&&(delete t.h[e],t.i--,t.g.length>2*t.i&&mr(t)))}function Ur(t,e){return Mr(t),e=Vr(t,e),gr(t.g.h,e)}function Fr(t,e,n){xr(t,e),0<n.length&&(t.i=null,t.g.set(Vr(t,e),ls(n)),t.h+=n.length)}function Vr(t,e){return e=String(e),t.j&&(e=e.toLowerCase()),e}function qr(t){this.l=t||jr,t=Wn.PerformanceNavigationTiming?0<(t=Wn.performance.getEntriesByType("navigation")).length&&("hq"==t[0].nextHopProtocol||"h2"==t[0].nextHopProtocol):!!(Wn.g&&Wn.g.Ea&&Wn.g.Ea()&&Wn.g.Ea().Zb),this.j=t?this.l:1,this.g=null,1<this.j&&(this.g=new Set),this.h=null,this.i=[]}($n=Pr.prototype).add=function(t,e){Mr(this),this.i=null,t=Vr(this,t);var n=this.g.get(t);return n||this.g.set(t,n=[]),n.push(e),this.h+=1,this},$n.forEach=function(t,e){Mr(this),this.g.forEach((function(n,s){cs(n,(function(n){t.call(e,n,s,this)}),this)}),this)},$n.T=function(){Mr(this);for(var t=this.g.R(),e=this.g.T(),n=[],s=0;s<e.length;s++)for(var i=t[s],r=0;r<i.length;r++)n.push(e[s]);return n},$n.R=function(t){Mr(this);var e=[];if("string"==typeof t)Ur(this,t)&&(e=us(e,this.g.get(Vr(this,t))));else{t=this.g.R();for(var n=0;n<t.length;n++)e=us(e,t[n])}return e},$n.set=function(t,e){return Mr(this),this.i=null,Ur(this,t=Vr(this,t))&&(this.h-=this.g.get(t).length),this.g.set(t,[e]),this.h+=1,this},$n.get=function(t,e){return t&&0<(t=this.R(t)).length?String(t[0]):e},$n.toString=function(){if(this.i)return this.i;if(!this.g)return"";for(var t=[],e=this.g.T(),n=0;n<e.length;n++){var s=e[n],i=encodeURIComponent(String(s));s=this.R(s);for(var r=0;r<s.length;r++){var o=i;""!==s[r]&&(o+="="+encodeURIComponent(String(s[r]))),t.push(o)}}return this.i=t.join("&")};var jr=10;function Br(t){return!!t.h||!!t.g&&t.g.size>=t.j}function Hr(t){return t.h?1:t.g?t.g.size:0}function $r(t,e){return t.h?t.h==e:!!t.g&&t.g.has(e)}function Kr(t,e){t.g?t.g.add(e):t.h=e}function zr(t,e){t.h&&t.h==e?t.h=null:t.g&&t.g.has(e)&&t.g.delete(e)}function Gr(t){if(null!=t.h)return t.i.concat(t.h.D);if(null!=t.g&&0!==t.g.size){let e=t.i;for(const n of t.g.values())e=e.concat(n.D);return e}return ls(t.i)}function Wr(){}function Jr(){this.g=new Wr}function Qr(t,e,n){const s=n||"";try{fr(t,(function(t,n){let i=t;Xn(t)&&(i=hi(t)),e.push(s+n+"="+encodeURIComponent(i))}))}catch(t){throw e.push(s+"type="+encodeURIComponent("_badmap")),t}}function Xr(t,e,n,s,i){try{e.onload=null,e.onerror=null,e.onabort=null,e.ontimeout=null,i(s)}catch(t){}}function Yr(t){this.l=t.$b||null,this.j=t.ib||!1}function Zr(t,e){ci.call(this),this.D=t,this.u=e,this.m=void 0,this.readyState=to,this.status=0,this.responseType=this.responseText=this.response=this.statusText="",this.onreadystatechange=null,this.v=new Headers,this.h=null,this.C="GET",this.B="",this.g=!1,this.A=this.j=this.l=null}qr.prototype.cancel=function(){if(this.i=Gr(this),this.h)this.h.cancel(),this.h=null;else if(this.g&&0!==this.g.size){for(const t of this.g.values())t.cancel();this.g.clear()}},Wr.prototype.stringify=function(t){return Wn.JSON.stringify(t,void 0)},Wr.prototype.parse=function(t){return Wn.JSON.parse(t,void 0)},is(Yr,Hi),Yr.prototype.g=function(){return new Zr(this.l,this.j)},Yr.prototype.i=function(t){return function(){return t}}({}),is(Zr,ci);var to=0;function eo(t){t.j.read().then(t.Sa.bind(t)).catch(t.ha.bind(t))}function no(t){t.readyState=4,t.l=null,t.j=null,t.A=null,so(t)}function so(t){t.onreadystatechange&&t.onreadystatechange.call(t)}($n=Zr.prototype).open=function(t,e){if(this.readyState!=to)throw this.abort(),Error("Error reopening a connection");this.C=t,this.B=e,this.readyState=1,so(this)},$n.send=function(t){if(1!=this.readyState)throw this.abort(),Error("need to call open() first. ");this.g=!0;const e={headers:this.v,method:this.C,credentials:this.m,cache:void 0};t&&(e.body=t),(this.D||Wn).fetch(new Request(this.B,e)).then(this.Va.bind(this),this.ha.bind(this))},$n.abort=function(){this.response=this.responseText="",this.v=new Headers,this.status=0,this.j&&this.j.cancel("Request was aborted."),1<=this.readyState&&this.g&&4!=this.readyState&&(this.g=!1,no(this)),this.readyState=to},$n.Va=function(t){if(this.g&&(this.l=t,this.h||(this.status=this.l.status,this.statusText=this.l.statusText,this.h=t.headers,this.readyState=2,so(this)),this.g&&(this.readyState=3,so(this),this.g)))if("arraybuffer"===this.responseType)t.arrayBuffer().then(this.Ta.bind(this),this.ha.bind(this));else if(void 0!==Wn.ReadableStream&&"body"in t){if(this.j=t.body.getReader(),this.u){if(this.responseType)throw Error('responseType must be empty for "streamBinaryChunks" mode responses.');this.response=[]}else this.response=this.responseText="",this.A=new TextDecoder;eo(this)}else t.text().then(this.Ua.bind(this),this.ha.bind(this))},$n.Sa=function(t){if(this.g){if(this.u&&t.value)this.response.push(t.value);else if(!this.u){var e=t.value?t.value:new Uint8Array(0);(e=this.A.decode(e,{stream:!t.done}))&&(this.response=this.responseText+=e)}t.done?no(this):so(this),3==this.readyState&&eo(this)}},$n.Ua=function(t){this.g&&(this.response=this.responseText=t,no(this))},$n.Ta=function(t){this.g&&(this.response=t,no(this))},$n.ha=function(){this.g&&no(this)},$n.setRequestHeader=function(t,e){this.v.append(t,e)},$n.getResponseHeader=function(t){return this.h&&this.h.get(t.toLowerCase())||""},$n.getAllResponseHeaders=function(){if(!this.h)return"";const t=[],e=this.h.entries();for(var n=e.next();!n.done;)n=n.value,t.push(n[0]+": "+n[1]),n=e.next();return t.join("\r\n")},Object.defineProperty(Zr.prototype,"withCredentials",{get:function(){return"include"===this.m},set:function(t){this.m=t?"include":"same-origin"}});var io=Wn.JSON.parse;function ro(t){ci.call(this),this.headers=new pr,this.u=t||null,this.h=!1,this.C=this.g=null,this.H="",this.m=0,this.j="",this.l=this.F=this.v=this.D=!1,this.B=0,this.A=null,this.J=oo,this.K=this.L=!1}is(ro,ci);var oo="",ao=/^https?$/i,co=["POST","PUT"];function uo(t){return"content-type"==t.toLowerCase()}function lo(t,e){t.h=!1,t.g&&(t.l=!0,t.g.abort(),t.l=!1),t.j=e,t.m=5,ho(t),po(t)}function ho(t){t.D||(t.D=!0,ui(t,"complete"),ui(t,"error"))}function fo(t){if(t.h&&void 0!==Gn&&(!t.C[1]||4!=go(t)||2!=t.ba()))if(t.v&&4==go(t))_i(t.Fa,0,t);else if(ui(t,"readystatechange"),4==go(t)){t.h=!1;try{const a=t.ba();t:switch(a){case 200:case 201:case 202:case 204:case 206:case 304:case 1223:var e=!0;break t;default:e=!1}var n;if(!(n=e)){var s;if(s=0===a){var i=String(t.H).match(yr)[1]||null;if(!i&&Wn.self&&Wn.self.location){var r=Wn.self.location.protocol;i=r.substr(0,r.length-1)}s=!ao.test(i?i.toLowerCase():"")}n=s}if(n)ui(t,"complete"),ui(t,"success");else{t.m=6;try{var o=2<go(t)?t.g.statusText:""}catch(t){o=""}t.j=o+" ["+t.ba()+"]",ho(t)}}finally{po(t)}}}function po(t,e){if(t.g){mo(t);const n=t.g,s=t.C[0]?Jn:null;t.g=null,t.C=null,e||ui(t,"ready");try{n.onreadystatechange=s}catch(t){}}}function mo(t){t.g&&t.K&&(t.g.ontimeout=null),t.A&&(Wn.clearTimeout(t.A),t.A=null)}function go(t){return t.g?t.g.readyState:0}function yo(t){try{if(!t.g)return null;if("response"in t.g)return t.g.response;switch(t.J){case oo:case"text":return t.g.responseText;case"arraybuffer":if("mozResponseArrayBuffer"in t.g)return t.g.mozResponseArrayBuffer}return null}catch(t){return null}}function vo(t,e,n){t:{for(s in n){var s=!1;break t}s=!0}s||(n=function(t){let e="";return vs(t,(function(t,n){e+=n,e+=":",e+=t,e+="\r\n"})),e}(n),"string"==typeof t?null!=n&&encodeURIComponent(String(n)):Tr(t,e,n))}function wo(t,e,n){return n&&n.internalChannelParams&&n.internalChannelParams[t]||e}function Eo(t){this.za=0,this.l=[],this.h=new Ri,this.la=this.oa=this.F=this.W=this.g=this.sa=this.D=this.aa=this.o=this.P=this.s=null,this.Za=this.V=0,this.Xa=wo("failFast",!1,t),this.N=this.v=this.u=this.m=this.j=null,this.X=!0,this.I=this.ta=this.U=-1,this.Y=this.A=this.C=0,this.Pa=wo("baseRetryDelayMs",5e3,t),this.$a=wo("retryDelaySeedMs",1e4,t),this.Ya=wo("forwardChannelMaxRetries",2,t),this.ra=wo("forwardChannelRequestTimeoutMs",2e4,t),this.qa=t&&t.xmlHttpFactory||void 0,this.Ba=t&&t.Yb||!1,this.K=void 0,this.H=t&&t.supportsCrossDomainXhr||!1,this.J="",this.i=new qr(t&&t.concurrentRequestLimit),this.Ca=new Jr,this.ja=t&&t.fastHandshake||!1,this.Ra=t&&t.Wb||!1,t&&t.Aa&&this.h.Aa(),t&&t.forceLongPolling&&(this.X=!1),this.$=!this.ja&&this.X&&t&&t.detectBufferingProxy||!1,this.ka=void 0,this.O=0,this.L=!1,this.B=null,this.Wa=!t||!1!==t.Xb}function Io(t){if(_o(t),3==t.G){var e=t.V++,n=wr(t.F);Tr(n,"SID",t.J),Tr(n,"RID",e),Tr(n,"TYPE","terminate"),Co(t,n),(e=new Xi(t,t.h,e,void 0)).K=2,e.v=Sr(wr(n)),n=!1,Wn.navigator&&Wn.navigator.sendBeacon&&(n=Wn.navigator.sendBeacon(e.v.toString(),"")),!n&&Wn.Image&&((new Image).src=e.v,n=!0),n||(e.g=Vo(e.l,null),e.g.ea(e.v)),e.F=Date.now(),ar(e)}Uo(t)}function bo(t){t.g&&(Do(t),t.g.cancel(),t.g=null)}function _o(t){bo(t),t.u&&(Wn.clearTimeout(t.u),t.u=null),Oo(t),t.i.cancel(),t.m&&("number"==typeof t.m&&Wn.clearTimeout(t.m),t.m=null)}function To(t,e){t.l.push(new class{constructor(t,e){this.h=t,this.g=e}}(t.Za++,e)),3==t.G&&So(t)}function So(t){Br(t.i)||t.m||(t.m=!0,yi(t.Ha,t),t.C=0)}function ko(t,e){var n;n=e?e.m:t.V++;const s=wr(t.F);Tr(s,"SID",t.J),Tr(s,"RID",n),Tr(s,"AID",t.U),Co(t,s),t.o&&t.s&&vo(s,t.o,t.s),n=new Xi(t,t.h,n,t.C+1),null===t.o&&(n.H=t.s),e&&(t.l=e.D.concat(t.l)),e=Ao(t,n,1e3),n.setTimeout(Math.round(.5*t.ra)+Math.round(.5*t.ra*Math.random())),Kr(t.i,n),nr(n,s,e)}function Co(t,e){t.j&&fr({},(function(t,n){Tr(e,n,t)}))}function Ao(t,e,n){n=Math.min(t.l.length,n);var s=t.j?ns(t.j.Oa,t.j,t):null;t:{var i=t.l;let e=-1;for(;;){const t=["count="+n];-1==e?0<n?(e=i[0].h,t.push("ofs="+e)):e=0:t.push("ofs="+e);let r=!0;for(let o=0;o<n;o++){let n=i[o].h;const a=i[o].g;if(n-=e,0>n)e=Math.max(0,i[o].h-100),r=!1;else try{Qr(a,t,"req"+n+"_")}catch(t){s&&s(a)}}if(r){s=t.join("&");break t}}}return t=t.l.splice(0,n),e.D=t,s}function No(t){t.g||t.u||(t.Y=1,yi(t.Ga,t),t.A=0)}function Ro(t){return!(t.g||t.u||3<=t.A||(t.Y++,t.u=qi(ns(t.Ga,t),Mo(t,t.A)),t.A++,0))}function Do(t){null!=t.B&&(Wn.clearTimeout(t.B),t.B=null)}function Lo(t){t.g=new Xi(t,t.h,"rpc",t.Y),null===t.o&&(t.g.H=t.s),t.g.O=0;var e=wr(t.oa);Tr(e,"RID","rpc"),Tr(e,"SID",t.J),Tr(e,"CI",t.N?"0":"1"),Tr(e,"AID",t.U),Co(t,e),Tr(e,"TYPE","xmlhttp"),t.o&&t.s&&vo(e,t.o,t.s),t.K&&t.g.setTimeout(t.K);var n=t.g;t=t.la,n.K=1,n.v=Sr(wr(e)),n.s=null,n.U=!0,sr(n,t)}function Oo(t){null!=t.v&&(Wn.clearTimeout(t.v),t.v=null)}function Po(t,e){var n=null;if(t.g==e){Oo(t),Do(t),t.g=null;var s=2}else{if(!$r(t.i,e))return;n=e.D,zr(t.i,e),s=1}if(t.I=e.N,0!=t.G)if(e.i)if(1==s){n=e.s?e.s.length:0,e=Date.now()-e.F;var i=t.C;ui(s=Pi(),new Vi(s,n,e,i)),So(t)}else No(t);else if(3==(i=e.o)||0==i&&0<t.I||!(1==s&&function(t,e){return!(Hr(t.i)>=t.i.j-(t.m?1:0)||(t.m?(t.l=e.D.concat(t.l),0):1==t.G||2==t.G||t.C>=(t.Xa?0:t.Ya)||(t.m=qi(ns(t.Ha,t,e),Mo(t,t.C)),t.C++,0)))}(t,e)||2==s&&Ro(t)))switch(n&&0<n.length&&(e=t.i,e.i=e.i.concat(n)),i){case 1:xo(t,5);break;case 4:xo(t,10);break;case 3:xo(t,6);break;default:xo(t,2)}}function Mo(t,e){let n=t.Pa+Math.floor(Math.random()*t.$a);return t.j||(n*=2),n*e}function xo(t,e){if(t.h.info("Error code "+e),2==e){var n=null;t.j&&(n=null);var s=ns(t.jb,t);n||(n=new vr("//www.google.com/images/cleardot.gif"),Wn.location&&"http"==Wn.location.protocol||Er(n,"https"),Sr(n)),function(t,e){const n=new Ri;if(Wn.Image){const s=new Image;s.onload=ss(Xr,n,s,"TestLoadImage: loaded",!0,e),s.onerror=ss(Xr,n,s,"TestLoadImage: error",!1,e),s.onabort=ss(Xr,n,s,"TestLoadImage: abort",!1,e),s.ontimeout=ss(Xr,n,s,"TestLoadImage: timeout",!1,e),Wn.setTimeout((function(){s.ontimeout&&s.ontimeout()}),1e4),s.src=t}else e(!1)}(n.toString(),s)}else Fi(2);t.G=0,t.j&&t.j.va(e),Uo(t),_o(t)}function Uo(t){t.G=0,t.I=-1,t.j&&(0==Gr(t.i).length&&0==t.l.length||(t.i.i.length=0,ls(t.l),t.l.length=0),t.j.ua())}function Fo(t,e,n){let s=function(t){return t instanceof vr?wr(t):new vr(t,void 0)}(n);if(""!=s.i)e&&Ir(s,e+"."+s.i),br(s,s.m);else{const t=Wn.location;s=function(t,e,n,s){var i=new vr(null,void 0);return t&&Er(i,t),e&&Ir(i,e),n&&br(i,n),s&&(i.l=s),i}(t.protocol,e?e+"."+t.hostname:t.hostname,+t.port,n)}return t.aa&&vs(t.aa,(function(t,e){Tr(s,e,t)})),e=t.D,n=t.sa,e&&n&&Tr(s,e,n),Tr(s,"VER",t.ma),Co(t,s),s}function Vo(t,e,n){if(e&&!t.H)throw Error("Can't create secondary domain capable XhrIo object.");return(e=n&&t.Ba&&!t.qa?new ro(new Yr({ib:!0})):new ro(t.qa)).L=t.H,e}function qo(){}function jo(){if(ks&&!(10<=Number(Fs)))throw Error("Environmental error: no available transport.")}function Bo(t,e){ci.call(this),this.g=new Eo(e),this.l=t,this.h=e&&e.messageUrlParams||null,t=e&&e.messageHeaders||null,e&&e.clientProtocolHeaderRequired&&(t?t["X-Client-Protocol"]="webchannel":t={"X-Client-Protocol":"webchannel"}),this.g.s=t,t=e&&e.initMessageHeaders||null,e&&e.messageContentType&&(t?t["X-WebChannel-Content-Type"]=e.messageContentType:t={"X-WebChannel-Content-Type":e.messageContentType}),e&&e.ya&&(t?t["X-WebChannel-Client-Profile"]=e.ya:t={"X-WebChannel-Client-Profile":e.ya}),this.g.P=t,(t=e&&e.httpHeadersOverwriteParam)&&!hs(t)&&(this.g.o=t),this.A=e&&e.supportsCrossDomainXhr||!1,this.v=e&&e.sendRawJson||!1,(e=e&&e.httpSessionIdParam)&&!hs(e)&&(this.g.D=e,null!==(t=this.h)&&e in t&&e in(t=this.h)&&delete t[e]),this.j=new Ko(this)}function Ho(t){Wi.call(this);var e=t.__sm__;if(e){t:{for(const n in e){t=n;break t}t=void 0}(this.i=t)&&(t=this.i,e=null!==e&&t in e?e[t]:void 0),this.data=e}else this.data=t}function $o(){Ji.call(this),this.status=1}function Ko(t){this.g=t}($n=ro.prototype).ea=function(t,e,n,s){if(this.g)throw Error("[goog.net.XhrIo] Object is active with another request="+this.H+"; newUri="+t);e=e?e.toUpperCase():"GET",this.H=t,this.j="",this.m=0,this.D=!1,this.h=!0,this.g=this.u?this.u.g():zi.g(),this.C=this.u?$i(this.u):$i(zi),this.g.onreadystatechange=ns(this.Fa,this);try{this.F=!0,this.g.open(e,String(t),!0),this.F=!1}catch(t){return void lo(this,t)}t=n||"";const i=new pr(this.headers);s&&fr(s,(function(t,e){i.set(e,t)})),s=function(t){t:{var e=uo;const n=t.length,s="string"==typeof t?t.split(""):t;for(let i=0;i<n;i++)if(i in s&&e.call(void 0,s[i],i,t)){e=i;break t}e=-1}return 0>e?null:"string"==typeof t?t.charAt(e):t[e]}(i.T()),n=Wn.FormData&&t instanceof Wn.FormData,!(0<=as(co,e))||s||n||i.set("Content-Type","application/x-www-form-urlencoded;charset=utf-8"),i.forEach((function(t,e){this.g.setRequestHeader(e,t)}),this),this.J&&(this.g.responseType=this.J),"withCredentials"in this.g&&this.g.withCredentials!==this.L&&(this.g.withCredentials=this.L);try{mo(this),0<this.B&&((this.K=function(t){return ks&&Us()&&"number"==typeof t.timeout&&void 0!==t.ontimeout}(this.g))?(this.g.timeout=this.B,this.g.ontimeout=ns(this.pa,this)):this.A=_i(this.pa,this.B,this)),this.v=!0,this.g.send(t),this.v=!1}catch(t){lo(this,t)}},$n.pa=function(){void 0!==Gn&&this.g&&(this.j="Timed out after "+this.B+"ms, aborting",this.m=8,ui(this,"timeout"),this.abort(8))},$n.abort=function(t){this.g&&this.h&&(this.h=!1,this.l=!0,this.g.abort(),this.l=!1,this.m=t||7,ui(this,"complete"),ui(this,"abort"),po(this))},$n.M=function(){this.g&&(this.h&&(this.h=!1,this.l=!0,this.g.abort(),this.l=!1),po(this,!0)),ro.Z.M.call(this)},$n.Fa=function(){this.s||(this.F||this.v||this.l?fo(this):this.cb())},$n.cb=function(){fo(this)},$n.ba=function(){try{return 2<go(this)?this.g.status:-1}catch(t){return-1}},$n.ga=function(){try{return this.g?this.g.responseText:""}catch(t){return""}},$n.Qa=function(t){if(this.g){var e=this.g.responseText;return t&&0==e.indexOf(t)&&(e=e.substring(t.length)),io(e)}},$n.Da=function(){return this.m},$n.La=function(){return"string"==typeof this.j?this.j:String(this.j)},($n=Eo.prototype).ma=8,$n.G=1,$n.hb=function(t){try{this.h.info("Origin Trials invoked: "+t)}catch(t){}},$n.Ha=function(t){if(this.m)if(this.m=null,1==this.G){if(!t){this.V=Math.floor(1e5*Math.random()),t=this.V++;const i=new Xi(this,this.h,t,void 0);let r=this.s;if(this.P&&(r?(r=ws(r),Is(r,this.P)):r=this.P),null===this.o&&(i.H=r),this.ja)t:{for(var e=0,n=0;n<this.l.length;n++){var s=this.l[n];if(void 0===(s="__data__"in s.g&&"string"==typeof(s=s.g.__data__)?s.length:void 0))break;if(4096<(e+=s)){e=n;break t}if(4096===e||n===this.l.length-1){e=n+1;break t}}e=1e3}else e=1e3;e=Ao(this,i,e),Tr(n=wr(this.F),"RID",t),Tr(n,"CVER",22),this.D&&Tr(n,"X-HTTP-Session-Id",this.D),Co(this,n),this.o&&r&&vo(n,this.o,r),Kr(this.i,i),this.Ra&&Tr(n,"TYPE","init"),this.ja?(Tr(n,"$req",e),Tr(n,"SID","null"),i.$=!0,nr(i,n,null)):nr(i,n,e),this.G=2}}else 3==this.G&&(t?ko(this,t):0==this.l.length||Br(this.i)||ko(this))},$n.Ga=function(){if(this.u=null,Lo(this),this.$&&!(this.L||null==this.g||0>=this.O)){var t=2*this.O;this.h.info("BP detection timer enabled: "+t),this.B=qi(ns(this.bb,this),t)}},$n.bb=function(){this.B&&(this.B=null,this.h.info("BP detection timeout reached."),this.h.info("Buffering proxy detected and switch to long-polling!"),this.N=!1,this.L=!0,Fi(10),bo(this),Lo(this))},$n.ab=function(){null!=this.v&&(this.v=null,bo(this),Ro(this),Fi(19))},$n.jb=function(t){t?(this.h.info("Successfully pinged google.com"),Fi(2)):(this.h.info("Failed to ping google.com"),Fi(1))},($n=qo.prototype).xa=function(){},$n.wa=function(){},$n.va=function(){},$n.ua=function(){},$n.Oa=function(){},jo.prototype.g=function(t,e){return new Bo(t,e)},is(Bo,ci),Bo.prototype.m=function(){this.g.j=this.j,this.A&&(this.g.H=!0);var t=this.g,e=this.l,n=this.h||void 0;t.Wa&&(t.h.info("Origin Trials enabled."),yi(ns(t.hb,t,e))),Fi(0),t.W=e,t.aa=n||{},t.N=t.X,t.F=Fo(t,null,t.W),So(t)},Bo.prototype.close=function(){Io(this.g)},Bo.prototype.u=function(t){if("string"==typeof t){var e={};e.__data__=t,To(this.g,e)}else this.v?((e={}).__data__=hi(t),To(this.g,e)):To(this.g,t)},Bo.prototype.M=function(){this.g.j=null,delete this.j,Io(this.g),delete this.g,Bo.Z.M.call(this)},is(Ho,Wi),is($o,Ji),is(Ko,qo),Ko.prototype.xa=function(){ui(this.g,"a")},Ko.prototype.wa=function(t){ui(this.g,new Ho(t))},Ko.prototype.va=function(t){ui(this.g,new $o(t))},Ko.prototype.ua=function(){ui(this.g,"b")},jo.prototype.createWebChannel=jo.prototype.g,Bo.prototype.send=Bo.prototype.u,Bo.prototype.open=Bo.prototype.m,Bo.prototype.close=Bo.prototype.close,ji.NO_ERROR=0,ji.TIMEOUT=8,ji.HTTP_ERROR=6,Bi.COMPLETE="complete",Ki.EventType=Gi,Gi.OPEN="a",Gi.CLOSE="b",Gi.ERROR="c",Gi.MESSAGE="d",ci.prototype.listen=ci.prototype.N,ro.prototype.listenOnce=ro.prototype.O,ro.prototype.getLastError=ro.prototype.La,ro.prototype.getLastErrorCode=ro.prototype.Da,ro.prototype.getStatus=ro.prototype.ba,ro.prototype.getResponseJson=ro.prototype.Qa,ro.prototype.getResponseText=ro.prototype.ga,ro.prototype.send=ro.prototype.ea;var zo=zn.createWebChannelTransport=function(){return new jo},Go=zn.getStatEventTarget=function(){return Pi()},Wo=zn.ErrorCode=ji,Jo=zn.EventType=Bi,Qo=zn.Event=Li,Xo=zn.Stat={rb:0,ub:1,vb:2,Ob:3,Tb:4,Qb:5,Rb:6,Pb:7,Nb:8,Sb:9,PROXY:10,NOPROXY:11,Lb:12,Hb:13,Ib:14,Gb:15,Jb:16,Kb:17,nb:18,mb:19,ob:20},Yo=zn.FetchXmlHttpFactory=Yr,Zo=zn.WebChannel=Ki,ta=zn.XhrIo=ro;const ea="@firebase/firestore";class na{constructor(t){this.uid=t}isAuthenticated(){return null!=this.uid}toKey(){return this.isAuthenticated()?"uid:"+this.uid:"anonymous-user"}isEqual(t){return t.uid===this.uid}}na.UNAUTHENTICATED=new na(null),na.GOOGLE_CREDENTIALS=new na("google-credentials-uid"),na.FIRST_PARTY=new na("first-party-uid"),na.MOCK_USER=new na("mock-user");let sa="9.6.1";const ia=new Q("@firebase/firestore");function ra(){return ia.logLevel}function oa(t,...e){if(ia.logLevel<=$.DEBUG){const n=e.map(ua);ia.debug(`Firestore (${sa}): ${t}`,...n)}}function aa(t,...e){if(ia.logLevel<=$.ERROR){const n=e.map(ua);ia.error(`Firestore (${sa}): ${t}`,...n)}}function ca(t,...e){if(ia.logLevel<=$.WARN){const n=e.map(ua);ia.warn(`Firestore (${sa}): ${t}`,...n)}}function ua(t){if("string"==typeof t)return t;try{return e=t,JSON.stringify(e)}catch(e){return t}var e}function la(t="Unexpected state"){const e=`FIRESTORE (${sa}) INTERNAL ASSERTION FAILED: `+t;throw aa(e),new Error(e)}function ha(t,e){t||la()}function da(t,e){return t}const fa={OK:"ok",CANCELLED:"cancelled",UNKNOWN:"unknown",INVALID_ARGUMENT:"invalid-argument",DEADLINE_EXCEEDED:"deadline-exceeded",NOT_FOUND:"not-found",ALREADY_EXISTS:"already-exists",PERMISSION_DENIED:"permission-denied",UNAUTHENTICATED:"unauthenticated",RESOURCE_EXHAUSTED:"resource-exhausted",FAILED_PRECONDITION:"failed-precondition",ABORTED:"aborted",OUT_OF_RANGE:"out-of-range",UNIMPLEMENTED:"unimplemented",INTERNAL:"internal",UNAVAILABLE:"unavailable",DATA_LOSS:"data-loss"};class pa extends Error{constructor(t,e){super(e),this.code=t,this.message=e,this.name="FirebaseError",this.toString=()=>`${this.name}: [code=${this.code}]: ${this.message}`}}class ma{constructor(){this.promise=new Promise(((t,e)=>{this.resolve=t,this.reject=e}))}}class ga{constructor(t,e){this.user=e,this.type="OAuth",this.headers=new Map,this.headers.set("Authorization",`Bearer ${t}`)}}class ya{getToken(){return Promise.resolve(null)}invalidateToken(){}start(t,e){t.enqueueRetryable((()=>e(na.UNAUTHENTICATED)))}shutdown(){}}class va{constructor(t){this.t=t,this.currentUser=na.UNAUTHENTICATED,this.i=0,this.forceRefresh=!1,this.auth=null}start(t,e){let n=this.i;const s=t=>this.i!==n?(n=this.i,e(t)):Promise.resolve();let i=new ma;this.o=()=>{this.i++,this.currentUser=this.u(),i.resolve(),i=new ma,t.enqueueRetryable((()=>s(this.currentUser)))};const r=()=>{const e=i;t.enqueueRetryable((async()=>{await e.promise,await s(this.currentUser)}))},o=t=>{oa("FirebaseAuthCredentialsProvider","Auth detected"),this.auth=t,this.auth.addAuthTokenListener(this.o),r()};this.t.onInit((t=>o(t))),setTimeout((()=>{if(!this.auth){const t=this.t.getImmediate({optional:!0});t?o(t):(oa("FirebaseAuthCredentialsProvider","Auth not yet detected"),i.resolve(),i=new ma)}}),0),r()}getToken(){const t=this.i,e=this.forceRefresh;return this.forceRefresh=!1,this.auth?this.auth.getToken(e).then((e=>this.i!==t?(oa("FirebaseAuthCredentialsProvider","getToken aborted due to token change."),this.getToken()):e?(ha("string"==typeof e.accessToken),new ga(e.accessToken,this.currentUser)):null)):Promise.resolve(null)}invalidateToken(){this.forceRefresh=!0}shutdown(){this.auth&&this.auth.removeAuthTokenListener(this.o)}u(){const t=this.auth&&this.auth.getUid();return ha(null===t||"string"==typeof t),new na(t)}}class wa{constructor(t,e,n){this.type="FirstParty",this.user=na.FIRST_PARTY,this.headers=new Map,this.headers.set("X-Goog-AuthUser",e);const s=t.auth.getAuthHeaderValueForFirstParty([]);s&&this.headers.set("Authorization",s),n&&this.headers.set("X-Goog-Iam-Authorization-Token",n)}}class Ea{constructor(t,e,n){this.h=t,this.l=e,this.m=n}getToken(){return Promise.resolve(new wa(this.h,this.l,this.m))}start(t,e){t.enqueueRetryable((()=>e(na.FIRST_PARTY)))}shutdown(){}invalidateToken(){}}class Ia{constructor(t){this.value=t,this.type="AppCheck",this.headers=new Map,t&&t.length>0&&this.headers.set("x-firebase-appcheck",this.value)}}class ba{constructor(t){this.g=t,this.forceRefresh=!1,this.appCheck=null}start(t,e){this.o=n=>{t.enqueueRetryable((()=>(t=>(null!=t.error&&oa("FirebaseAppCheckTokenProvider",`Error getting App Check token; using placeholder token instead. Error: ${t.error.message}`),e(t.token)))(n)))};const n=t=>{oa("FirebaseAppCheckTokenProvider","AppCheck detected"),this.appCheck=t,this.appCheck.addTokenListener(this.o)};this.g.onInit((t=>n(t))),setTimeout((()=>{if(!this.appCheck){const t=this.g.getImmediate({optional:!0});t?n(t):oa("FirebaseAppCheckTokenProvider","AppCheck not yet detected")}}),0)}getToken(){const t=this.forceRefresh;return this.forceRefresh=!1,this.appCheck?this.appCheck.getToken(t).then((t=>t?(ha("string"==typeof t.token),new Ia(t.token)):null)):Promise.resolve(null)}invalidateToken(){this.forceRefresh=!0}shutdown(){this.appCheck&&this.appCheck.removeTokenListener(this.o)}}class _a{constructor(t,e){this.previousValue=t,e&&(e.sequenceNumberHandler=t=>this.p(t),this.T=t=>e.writeSequenceNumber(t))}p(t){return this.previousValue=Math.max(t,this.previousValue),this.previousValue}next(){const t=++this.previousValue;return this.T&&this.T(t),t}}function Ta(t){const e="undefined"!=typeof self&&(self.crypto||self.msCrypto),n=new Uint8Array(t);if(e&&"function"==typeof e.getRandomValues)e.getRandomValues(n);else for(let e=0;e<t;e++)n[e]=Math.floor(256*Math.random());return n}_a.I=-1;class Sa{static A(){const t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",e=Math.floor(256/t.length)*t.length;let n="";for(;n.length<20;){const s=Ta(40);for(let i=0;i<s.length;++i)n.length<20&&s[i]<e&&(n+=t.charAt(s[i]%t.length))}return n}}function ka(t,e){return t<e?-1:t>e?1:0}function Ca(t,e,n){return t.length===e.length&&t.every(((t,s)=>n(t,e[s])))}class Aa{constructor(t,e){if(this.seconds=t,this.nanoseconds=e,e<0)throw new pa(fa.INVALID_ARGUMENT,"Timestamp nanoseconds out of range: "+e);if(e>=1e9)throw new pa(fa.INVALID_ARGUMENT,"Timestamp nanoseconds out of range: "+e);if(t<-62135596800)throw new pa(fa.INVALID_ARGUMENT,"Timestamp seconds out of range: "+t);if(t>=253402300800)throw new pa(fa.INVALID_ARGUMENT,"Timestamp seconds out of range: "+t)}static now(){return Aa.fromMillis(Date.now())}static fromDate(t){return Aa.fromMillis(t.getTime())}static fromMillis(t){const e=Math.floor(t/1e3),n=Math.floor(1e6*(t-1e3*e));return new Aa(e,n)}toDate(){return new Date(this.toMillis())}toMillis(){return 1e3*this.seconds+this.nanoseconds/1e6}_compareTo(t){return this.seconds===t.seconds?ka(this.nanoseconds,t.nanoseconds):ka(this.seconds,t.seconds)}isEqual(t){return t.seconds===this.seconds&&t.nanoseconds===this.nanoseconds}toString(){return"Timestamp(seconds="+this.seconds+", nanoseconds="+this.nanoseconds+")"}toJSON(){return{seconds:this.seconds,nanoseconds:this.nanoseconds}}valueOf(){const t=this.seconds- -62135596800;return String(t).padStart(12,"0")+"."+String(this.nanoseconds).padStart(9,"0")}}class Na{constructor(t){this.timestamp=t}static fromTimestamp(t){return new Na(t)}static min(){return new Na(new Aa(0,0))}compareTo(t){return this.timestamp._compareTo(t.timestamp)}isEqual(t){return this.timestamp.isEqual(t.timestamp)}toMicroseconds(){return 1e6*this.timestamp.seconds+this.timestamp.nanoseconds/1e3}toString(){return"SnapshotVersion("+this.timestamp.toString()+")"}toTimestamp(){return this.timestamp}}function Ra(t){let e=0;for(const n in t)Object.prototype.hasOwnProperty.call(t,n)&&e++;return e}function Da(t,e){for(const n in t)Object.prototype.hasOwnProperty.call(t,n)&&e(n,t[n])}function La(t){for(const e in t)if(Object.prototype.hasOwnProperty.call(t,e))return!1;return!0}class Oa{constructor(t,e,n){void 0===e?e=0:e>t.length&&la(),void 0===n?n=t.length-e:n>t.length-e&&la(),this.segments=t,this.offset=e,this.len=n}get length(){return this.len}isEqual(t){return 0===Oa.comparator(this,t)}child(t){const e=this.segments.slice(this.offset,this.limit());return t instanceof Oa?t.forEach((t=>{e.push(t)})):e.push(t),this.construct(e)}limit(){return this.offset+this.length}popFirst(t){return t=void 0===t?1:t,this.construct(this.segments,this.offset+t,this.length-t)}popLast(){return this.construct(this.segments,this.offset,this.length-1)}firstSegment(){return this.segments[this.offset]}lastSegment(){return this.get(this.length-1)}get(t){return this.segments[this.offset+t]}isEmpty(){return 0===this.length}isPrefixOf(t){if(t.length<this.length)return!1;for(let e=0;e<this.length;e++)if(this.get(e)!==t.get(e))return!1;return!0}isImmediateParentOf(t){if(this.length+1!==t.length)return!1;for(let e=0;e<this.length;e++)if(this.get(e)!==t.get(e))return!1;return!0}forEach(t){for(let e=this.offset,n=this.limit();e<n;e++)t(this.segments[e])}toArray(){return this.segments.slice(this.offset,this.limit())}static comparator(t,e){const n=Math.min(t.length,e.length);for(let s=0;s<n;s++){const n=t.get(s),i=e.get(s);if(n<i)return-1;if(n>i)return 1}return t.length<e.length?-1:t.length>e.length?1:0}}class Pa extends Oa{construct(t,e,n){return new Pa(t,e,n)}canonicalString(){return this.toArray().join("/")}toString(){return this.canonicalString()}static fromString(...t){const e=[];for(const n of t){if(n.indexOf("//")>=0)throw new pa(fa.INVALID_ARGUMENT,`Invalid segment (${n}). Paths must not contain // in them.`);e.push(...n.split("/").filter((t=>t.length>0)))}return new Pa(e)}static emptyPath(){return new Pa([])}}const Ma=/^[_a-zA-Z][_a-zA-Z0-9]*$/;class xa extends Oa{construct(t,e,n){return new xa(t,e,n)}static isValidIdentifier(t){return Ma.test(t)}canonicalString(){return this.toArray().map((t=>(t=t.replace(/\\/g,"\\\\").replace(/`/g,"\\`"),xa.isValidIdentifier(t)||(t="`"+t+"`"),t))).join(".")}toString(){return this.canonicalString()}isKeyField(){return 1===this.length&&"__name__"===this.get(0)}static keyField(){return new xa(["__name__"])}static fromServerFormat(t){const e=[];let n="",s=0;const i=()=>{if(0===n.length)throw new pa(fa.INVALID_ARGUMENT,`Invalid field path (${t}). Paths must not be empty, begin with '.', end with '.', or contain '..'`);e.push(n),n=""};let r=!1;for(;s<t.length;){const e=t[s];if("\\"===e){if(s+1===t.length)throw new pa(fa.INVALID_ARGUMENT,"Path has trailing escape character: "+t);const e=t[s+1];if("\\"!==e&&"."!==e&&"`"!==e)throw new pa(fa.INVALID_ARGUMENT,"Path has invalid escape sequence: "+t);n+=e,s+=2}else"`"===e?(r=!r,s++):"."!==e||r?(n+=e,s++):(i(),s++)}if(i(),r)throw new pa(fa.INVALID_ARGUMENT,"Unterminated ` in path: "+t);return new xa(e)}static emptyPath(){return new xa([])}}class Ua{constructor(t){this.fields=t,t.sort(xa.comparator)}covers(t){for(const e of this.fields)if(e.isPrefixOf(t))return!0;return!1}isEqual(t){return Ca(this.fields,t.fields,((t,e)=>t.isEqual(e)))}}class Fa{constructor(t){this.binaryString=t}static fromBase64String(t){const e=atob(t);return new Fa(e)}static fromUint8Array(t){const e=function(t){let e="";for(let n=0;n<t.length;++n)e+=String.fromCharCode(t[n]);return e}(t);return new Fa(e)}toBase64(){return t=this.binaryString,btoa(t);var t}toUint8Array(){return function(t){const e=new Uint8Array(t.length);for(let n=0;n<t.length;n++)e[n]=t.charCodeAt(n);return e}(this.binaryString)}approximateByteSize(){return 2*this.binaryString.length}compareTo(t){return ka(this.binaryString,t.binaryString)}isEqual(t){return this.binaryString===t.binaryString}}Fa.EMPTY_BYTE_STRING=new Fa("");const Va=new RegExp(/^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(?:\.(\d+))?Z$/);function qa(t){if(ha(!!t),"string"==typeof t){let e=0;const n=Va.exec(t);if(ha(!!n),n[1]){let t=n[1];t=(t+"000000000").substr(0,9),e=Number(t)}const s=new Date(t);return{seconds:Math.floor(s.getTime()/1e3),nanos:e}}return{seconds:ja(t.seconds),nanos:ja(t.nanos)}}function ja(t){return"number"==typeof t?t:"string"==typeof t?Number(t):0}function Ba(t){return"string"==typeof t?Fa.fromBase64String(t):Fa.fromUint8Array(t)}function Ha(t){var e,n;return"server_timestamp"===(null===(n=((null===(e=null==t?void 0:t.mapValue)||void 0===e?void 0:e.fields)||{}).__type__)||void 0===n?void 0:n.stringValue)}function $a(t){const e=t.mapValue.fields.__previous_value__;return Ha(e)?$a(e):e}function Ka(t){const e=qa(t.mapValue.fields.__local_write_time__.timestampValue);return new Aa(e.seconds,e.nanos)}function za(t){return null==t}function Ga(t){return 0===t&&1/t==-1/0}class Wa{constructor(t){this.path=t}static fromPath(t){return new Wa(Pa.fromString(t))}static fromName(t){return new Wa(Pa.fromString(t).popFirst(5))}hasCollectionId(t){return this.path.length>=2&&this.path.get(this.path.length-2)===t}isEqual(t){return null!==t&&0===Pa.comparator(this.path,t.path)}toString(){return this.path.toString()}static comparator(t,e){return Pa.comparator(t.path,e.path)}static isDocumentKey(t){return t.length%2==0}static fromSegments(t){return new Wa(new Pa(t.slice()))}}function Ja(t){return"nullValue"in t?0:"booleanValue"in t?1:"integerValue"in t||"doubleValue"in t?2:"timestampValue"in t?3:"stringValue"in t?5:"bytesValue"in t?6:"referenceValue"in t?7:"geoPointValue"in t?8:"arrayValue"in t?9:"mapValue"in t?Ha(t)?4:10:la()}function Qa(t,e){const n=Ja(t);if(n!==Ja(e))return!1;switch(n){case 0:return!0;case 1:return t.booleanValue===e.booleanValue;case 4:return Ka(t).isEqual(Ka(e));case 3:return function(t,e){if("string"==typeof t.timestampValue&&"string"==typeof e.timestampValue&&t.timestampValue.length===e.timestampValue.length)return t.timestampValue===e.timestampValue;const n=qa(t.timestampValue),s=qa(e.timestampValue);return n.seconds===s.seconds&&n.nanos===s.nanos}(t,e);case 5:return t.stringValue===e.stringValue;case 6:return function(t,e){return Ba(t.bytesValue).isEqual(Ba(e.bytesValue))}(t,e);case 7:return t.referenceValue===e.referenceValue;case 8:return function(t,e){return ja(t.geoPointValue.latitude)===ja(e.geoPointValue.latitude)&&ja(t.geoPointValue.longitude)===ja(e.geoPointValue.longitude)}(t,e);case 2:return function(t,e){if("integerValue"in t&&"integerValue"in e)return ja(t.integerValue)===ja(e.integerValue);if("doubleValue"in t&&"doubleValue"in e){const n=ja(t.doubleValue),s=ja(e.doubleValue);return n===s?Ga(n)===Ga(s):isNaN(n)&&isNaN(s)}return!1}(t,e);case 9:return Ca(t.arrayValue.values||[],e.arrayValue.values||[],Qa);case 10:return function(t,e){const n=t.mapValue.fields||{},s=e.mapValue.fields||{};if(Ra(n)!==Ra(s))return!1;for(const t in n)if(n.hasOwnProperty(t)&&(void 0===s[t]||!Qa(n[t],s[t])))return!1;return!0}(t,e);default:return la()}}function Xa(t,e){return void 0!==(t.values||[]).find((t=>Qa(t,e)))}function Ya(t,e){const n=Ja(t),s=Ja(e);if(n!==s)return ka(n,s);switch(n){case 0:return 0;case 1:return ka(t.booleanValue,e.booleanValue);case 2:return function(t,e){const n=ja(t.integerValue||t.doubleValue),s=ja(e.integerValue||e.doubleValue);return n<s?-1:n>s?1:n===s?0:isNaN(n)?isNaN(s)?0:-1:1}(t,e);case 3:return Za(t.timestampValue,e.timestampValue);case 4:return Za(Ka(t),Ka(e));case 5:return ka(t.stringValue,e.stringValue);case 6:return function(t,e){const n=Ba(t),s=Ba(e);return n.compareTo(s)}(t.bytesValue,e.bytesValue);case 7:return function(t,e){const n=t.split("/"),s=e.split("/");for(let t=0;t<n.length&&t<s.length;t++){const e=ka(n[t],s[t]);if(0!==e)return e}return ka(n.length,s.length)}(t.referenceValue,e.referenceValue);case 8:return function(t,e){const n=ka(ja(t.latitude),ja(e.latitude));return 0!==n?n:ka(ja(t.longitude),ja(e.longitude))}(t.geoPointValue,e.geoPointValue);case 9:return function(t,e){const n=t.values||[],s=e.values||[];for(let t=0;t<n.length&&t<s.length;++t){const e=Ya(n[t],s[t]);if(e)return e}return ka(n.length,s.length)}(t.arrayValue,e.arrayValue);case 10:return function(t,e){const n=t.fields||{},s=Object.keys(n),i=e.fields||{},r=Object.keys(i);s.sort(),r.sort();for(let t=0;t<s.length&&t<r.length;++t){const e=ka(s[t],r[t]);if(0!==e)return e;const o=Ya(n[s[t]],i[r[t]]);if(0!==o)return o}return ka(s.length,r.length)}(t.mapValue,e.mapValue);default:throw la()}}function Za(t,e){if("string"==typeof t&&"string"==typeof e&&t.length===e.length)return ka(t,e);const n=qa(t),s=qa(e),i=ka(n.seconds,s.seconds);return 0!==i?i:ka(n.nanos,s.nanos)}function tc(t){return ec(t)}function ec(t){return"nullValue"in t?"null":"booleanValue"in t?""+t.booleanValue:"integerValue"in t?""+t.integerValue:"doubleValue"in t?""+t.doubleValue:"timestampValue"in t?function(t){const e=qa(t);return`time(${e.seconds},${e.nanos})`}(t.timestampValue):"stringValue"in t?t.stringValue:"bytesValue"in t?Ba(t.bytesValue).toBase64():"referenceValue"in t?(n=t.referenceValue,Wa.fromName(n).toString()):"geoPointValue"in t?`geo(${(e=t.geoPointValue).latitude},${e.longitude})`:"arrayValue"in t?function(t){let e="[",n=!0;for(const s of t.values||[])n?n=!1:e+=",",e+=ec(s);return e+"]"}(t.arrayValue):"mapValue"in t?function(t){const e=Object.keys(t.fields||{}).sort();let n="{",s=!0;for(const i of e)s?s=!1:n+=",",n+=`${i}:${ec(t.fields[i])}`;return n+"}"}(t.mapValue):la();var e,n}function nc(t){return!!t&&"integerValue"in t}function sc(t){return!!t&&"arrayValue"in t}function ic(t){return!!t&&"nullValue"in t}function rc(t){return!!t&&"doubleValue"in t&&isNaN(Number(t.doubleValue))}function oc(t){return!!t&&"mapValue"in t}function ac(t){if(t.geoPointValue)return{geoPointValue:Object.assign({},t.geoPointValue)};if(t.timestampValue&&"object"==typeof t.timestampValue)return{timestampValue:Object.assign({},t.timestampValue)};if(t.mapValue){const e={mapValue:{fields:{}}};return Da(t.mapValue.fields,((t,n)=>e.mapValue.fields[t]=ac(n))),e}if(t.arrayValue){const e={arrayValue:{values:[]}};for(let n=0;n<(t.arrayValue.values||[]).length;++n)e.arrayValue.values[n]=ac(t.arrayValue.values[n]);return e}return Object.assign({},t)}class cc{constructor(t){this.value=t}static empty(){return new cc({mapValue:{}})}field(t){if(t.isEmpty())return this.value;{let e=this.value;for(let n=0;n<t.length-1;++n)if(e=(e.mapValue.fields||{})[t.get(n)],!oc(e))return null;return e=(e.mapValue.fields||{})[t.lastSegment()],e||null}}set(t,e){this.getFieldsMap(t.popLast())[t.lastSegment()]=ac(e)}setAll(t){let e=xa.emptyPath(),n={},s=[];t.forEach(((t,i)=>{if(!e.isImmediateParentOf(i)){const t=this.getFieldsMap(e);this.applyChanges(t,n,s),n={},s=[],e=i.popLast()}t?n[i.lastSegment()]=ac(t):s.push(i.lastSegment())}));const i=this.getFieldsMap(e);this.applyChanges(i,n,s)}delete(t){const e=this.field(t.popLast());oc(e)&&e.mapValue.fields&&delete e.mapValue.fields[t.lastSegment()]}isEqual(t){return Qa(this.value,t.value)}getFieldsMap(t){let e=this.value;e.mapValue.fields||(e.mapValue={fields:{}});for(let n=0;n<t.length;++n){let s=e.mapValue.fields[t.get(n)];oc(s)&&s.mapValue.fields||(s={mapValue:{fields:{}}},e.mapValue.fields[t.get(n)]=s),e=s}return e.mapValue.fields}applyChanges(t,e,n){Da(e,((e,n)=>t[e]=n));for(const e of n)delete t[e]}clone(){return new cc(ac(this.value))}}function uc(t){const e=[];return Da(t.fields,((t,n)=>{const s=new xa([t]);if(oc(n)){const t=uc(n.mapValue).fields;if(0===t.length)e.push(s);else for(const n of t)e.push(s.child(n))}else e.push(s)})),new Ua(e)}class lc{constructor(t,e,n,s,i){this.key=t,this.documentType=e,this.version=n,this.data=s,this.documentState=i}static newInvalidDocument(t){return new lc(t,0,Na.min(),cc.empty(),0)}static newFoundDocument(t,e,n){return new lc(t,1,e,n,0)}static newNoDocument(t,e){return new lc(t,2,e,cc.empty(),0)}static newUnknownDocument(t,e){return new lc(t,3,e,cc.empty(),2)}convertToFoundDocument(t,e){return this.version=t,this.documentType=1,this.data=e,this.documentState=0,this}convertToNoDocument(t){return this.version=t,this.documentType=2,this.data=cc.empty(),this.documentState=0,this}convertToUnknownDocument(t){return this.version=t,this.documentType=3,this.data=cc.empty(),this.documentState=2,this}setHasCommittedMutations(){return this.documentState=2,this}setHasLocalMutations(){return this.documentState=1,this}get hasLocalMutations(){return 1===this.documentState}get hasCommittedMutations(){return 2===this.documentState}get hasPendingWrites(){return this.hasLocalMutations||this.hasCommittedMutations}isValidDocument(){return 0!==this.documentType}isFoundDocument(){return 1===this.documentType}isNoDocument(){return 2===this.documentType}isUnknownDocument(){return 3===this.documentType}isEqual(t){return t instanceof lc&&this.key.isEqual(t.key)&&this.version.isEqual(t.version)&&this.documentType===t.documentType&&this.documentState===t.documentState&&this.data.isEqual(t.data)}clone(){return new lc(this.key,this.documentType,this.version,this.data.clone(),this.documentState)}toString(){return`Document(${this.key}, ${this.version}, ${JSON.stringify(this.data.value)}, {documentType: ${this.documentType}}), {documentState: ${this.documentState}})`}}class hc{constructor(t,e=null,n=[],s=[],i=null,r=null,o=null){this.path=t,this.collectionGroup=e,this.orderBy=n,this.filters=s,this.limit=i,this.startAt=r,this.endAt=o,this.R=null}}function dc(t,e=null,n=[],s=[],i=null,r=null,o=null){return new hc(t,e,n,s,i,r,o)}function fc(t){const e=da(t);if(null===e.R){let t=e.path.canonicalString();null!==e.collectionGroup&&(t+="|cg:"+e.collectionGroup),t+="|f:",t+=e.filters.map((t=>function(t){return t.field.canonicalString()+t.op.toString()+tc(t.value)}(t))).join(","),t+="|ob:",t+=e.orderBy.map((t=>function(t){return t.field.canonicalString()+t.dir}(t))).join(","),za(e.limit)||(t+="|l:",t+=e.limit),e.startAt&&(t+="|lb:",t+=kc(e.startAt)),e.endAt&&(t+="|ub:",t+=kc(e.endAt)),e.R=t}return e.R}function pc(t,e){if(t.limit!==e.limit)return!1;if(t.orderBy.length!==e.orderBy.length)return!1;for(let n=0;n<t.orderBy.length;n++)if(!Ac(t.orderBy[n],e.orderBy[n]))return!1;if(t.filters.length!==e.filters.length)return!1;for(let i=0;i<t.filters.length;i++)if(n=t.filters[i],s=e.filters[i],n.op!==s.op||!n.field.isEqual(s.field)||!Qa(n.value,s.value))return!1;var n,s;return t.collectionGroup===e.collectionGroup&&!!t.path.isEqual(e.path)&&!!Rc(t.startAt,e.startAt)&&Rc(t.endAt,e.endAt)}function mc(t){return Wa.isDocumentKey(t.path)&&null===t.collectionGroup&&0===t.filters.length}class gc extends class{}{constructor(t,e,n){super(),this.field=t,this.op=e,this.value=n}static create(t,e,n){return t.isKeyField()?"in"===e||"not-in"===e?this.P(t,e,n):new yc(t,e,n):"array-contains"===e?new Ic(t,n):"in"===e?new bc(t,n):"not-in"===e?new _c(t,n):"array-contains-any"===e?new Tc(t,n):new gc(t,e,n)}static P(t,e,n){return"in"===e?new vc(t,n):new wc(t,n)}matches(t){const e=t.data.field(this.field);return"!="===this.op?null!==e&&this.v(Ya(e,this.value)):null!==e&&Ja(this.value)===Ja(e)&&this.v(Ya(e,this.value))}v(t){switch(this.op){case"<":return t<0;case"<=":return t<=0;case"==":return 0===t;case"!=":return 0!==t;case">":return t>0;case">=":return t>=0;default:return la()}}V(){return["<","<=",">",">=","!=","not-in"].indexOf(this.op)>=0}}class yc extends gc{constructor(t,e,n){super(t,e,n),this.key=Wa.fromName(n.referenceValue)}matches(t){const e=Wa.comparator(t.key,this.key);return this.v(e)}}class vc extends gc{constructor(t,e){super(t,"in",e),this.keys=Ec(0,e)}matches(t){return this.keys.some((e=>e.isEqual(t.key)))}}class wc extends gc{constructor(t,e){super(t,"not-in",e),this.keys=Ec(0,e)}matches(t){return!this.keys.some((e=>e.isEqual(t.key)))}}function Ec(t,e){var n;return((null===(n=e.arrayValue)||void 0===n?void 0:n.values)||[]).map((t=>Wa.fromName(t.referenceValue)))}class Ic extends gc{constructor(t,e){super(t,"array-contains",e)}matches(t){const e=t.data.field(this.field);return sc(e)&&Xa(e.arrayValue,this.value)}}class bc extends gc{constructor(t,e){super(t,"in",e)}matches(t){const e=t.data.field(this.field);return null!==e&&Xa(this.value.arrayValue,e)}}class _c extends gc{constructor(t,e){super(t,"not-in",e)}matches(t){if(Xa(this.value.arrayValue,{nullValue:"NULL_VALUE"}))return!1;const e=t.data.field(this.field);return null!==e&&!Xa(this.value.arrayValue,e)}}class Tc extends gc{constructor(t,e){super(t,"array-contains-any",e)}matches(t){const e=t.data.field(this.field);return!(!sc(e)||!e.arrayValue.values)&&e.arrayValue.values.some((t=>Xa(this.value.arrayValue,t)))}}class Sc{constructor(t,e){this.position=t,this.before=e}}function kc(t){return`${t.before?"b":"a"}:${t.position.map((t=>tc(t))).join(",")}`}class Cc{constructor(t,e="asc"){this.field=t,this.dir=e}}function Ac(t,e){return t.dir===e.dir&&t.field.isEqual(e.field)}function Nc(t,e,n){let s=0;for(let i=0;i<t.position.length;i++){const r=e[i],o=t.position[i];if(s=r.field.isKeyField()?Wa.comparator(Wa.fromName(o.referenceValue),n.key):Ya(o,n.data.field(r.field)),"desc"===r.dir&&(s*=-1),0!==s)break}return t.before?s<=0:s<0}function Rc(t,e){if(null===t)return null===e;if(null===e)return!1;if(t.before!==e.before||t.position.length!==e.position.length)return!1;for(let n=0;n<t.position.length;n++)if(!Qa(t.position[n],e.position[n]))return!1;return!0}class Dc{constructor(t,e=null,n=[],s=[],i=null,r="F",o=null,a=null){this.path=t,this.collectionGroup=e,this.explicitOrderBy=n,this.filters=s,this.limit=i,this.limitType=r,this.startAt=o,this.endAt=a,this.S=null,this.D=null,this.startAt,this.endAt}}function Lc(t){return new Dc(t)}function Oc(t){return!za(t.limit)&&"F"===t.limitType}function Pc(t){return!za(t.limit)&&"L"===t.limitType}function Mc(t){const e=da(t);if(null===e.S){e.S=[];const t=function(t){for(const e of t.filters)if(e.V())return e.field;return null}(e),n=function(t){return t.explicitOrderBy.length>0?t.explicitOrderBy[0].field:null}(e);if(null!==t&&null===n)t.isKeyField()||e.S.push(new Cc(t)),e.S.push(new Cc(xa.keyField(),"asc"));else{let t=!1;for(const n of e.explicitOrderBy)e.S.push(n),n.field.isKeyField()&&(t=!0);if(!t){const t=e.explicitOrderBy.length>0?e.explicitOrderBy[e.explicitOrderBy.length-1].dir:"asc";e.S.push(new Cc(xa.keyField(),t))}}}return e.S}function xc(t){const e=da(t);if(!e.D)if("F"===e.limitType)e.D=dc(e.path,e.collectionGroup,Mc(e),e.filters,e.limit,e.startAt,e.endAt);else{const t=[];for(const n of Mc(e)){const e="desc"===n.dir?"asc":"desc";t.push(new Cc(n.field,e))}const n=e.endAt?new Sc(e.endAt.position,!e.endAt.before):null,s=e.startAt?new Sc(e.startAt.position,!e.startAt.before):null;e.D=dc(e.path,e.collectionGroup,t,e.filters,e.limit,n,s)}return e.D}function Uc(t,e){return pc(xc(t),xc(e))&&t.limitType===e.limitType}function Fc(t){return`${fc(xc(t))}|lt:${t.limitType}`}function Vc(t){return`Query(target=${function(t){let e=t.path.canonicalString();return null!==t.collectionGroup&&(e+=" collectionGroup="+t.collectionGroup),t.filters.length>0&&(e+=`, filters: [${t.filters.map((t=>{return`${(e=t).field.canonicalString()} ${e.op} ${tc(e.value)}`;var e})).join(", ")}]`),za(t.limit)||(e+=", limit: "+t.limit),t.orderBy.length>0&&(e+=`, orderBy: [${t.orderBy.map((t=>function(t){return`${t.field.canonicalString()} (${t.dir})`}(t))).join(", ")}]`),t.startAt&&(e+=", startAt: "+kc(t.startAt)),t.endAt&&(e+=", endAt: "+kc(t.endAt)),`Target(${e})`}(xc(t))}; limitType=${t.limitType})`}function qc(t,e){return e.isFoundDocument()&&function(t,e){const n=e.key.path;return null!==t.collectionGroup?e.key.hasCollectionId(t.collectionGroup)&&t.path.isPrefixOf(n):Wa.isDocumentKey(t.path)?t.path.isEqual(n):t.path.isImmediateParentOf(n)}(t,e)&&function(t,e){for(const n of t.explicitOrderBy)if(!n.field.isKeyField()&&null===e.data.field(n.field))return!1;return!0}(t,e)&&function(t,e){for(const n of t.filters)if(!n.matches(e))return!1;return!0}(t,e)&&function(t,e){return!(t.startAt&&!Nc(t.startAt,Mc(t),e)||t.endAt&&Nc(t.endAt,Mc(t),e))}(t,e)}function jc(t){return(e,n)=>{let s=!1;for(const i of Mc(t)){const t=Bc(i,e,n);if(0!==t)return t;s=s||i.field.isKeyField()}return 0}}function Bc(t,e,n){const s=t.field.isKeyField()?Wa.comparator(e.key,n.key):function(t,e,n){const s=e.data.field(t),i=n.data.field(t);return null!==s&&null!==i?Ya(s,i):la()}(t.field,e,n);switch(t.dir){case"asc":return s;case"desc":return-1*s;default:return la()}}function Hc(t,e){if(t.C){if(isNaN(e))return{doubleValue:"NaN"};if(e===1/0)return{doubleValue:"Infinity"};if(e===-1/0)return{doubleValue:"-Infinity"}}return{doubleValue:Ga(e)?"-0":e}}function $c(t){return{integerValue:""+t}}function Kc(t,e){return function(t){return"number"==typeof t&&Number.isInteger(t)&&!Ga(t)&&t<=Number.MAX_SAFE_INTEGER&&t>=Number.MIN_SAFE_INTEGER}(e)?$c(e):Hc(t,e)}class zc{constructor(){this._=void 0}}function Gc(t,e,n){return t instanceof Qc?function(t,e){const n={fields:{__type__:{stringValue:"server_timestamp"},__local_write_time__:{timestampValue:{seconds:t.seconds,nanos:t.nanoseconds}}}};return e&&(n.fields.__previous_value__=e),{mapValue:n}}(n,e):t instanceof Xc?Yc(t,e):t instanceof Zc?tu(t,e):function(t,e){const n=Jc(t,e),s=nu(n)+nu(t.N);return nc(n)&&nc(t.N)?$c(s):Hc(t.k,s)}(t,e)}function Wc(t,e,n){return t instanceof Xc?Yc(t,e):t instanceof Zc?tu(t,e):n}function Jc(t,e){return t instanceof eu?nc(n=e)||function(t){return!!t&&"doubleValue"in t}(n)?e:{integerValue:0}:null;var n}class Qc extends zc{}class Xc extends zc{constructor(t){super(),this.elements=t}}function Yc(t,e){const n=su(e);for(const e of t.elements)n.some((t=>Qa(t,e)))||n.push(e);return{arrayValue:{values:n}}}class Zc extends zc{constructor(t){super(),this.elements=t}}function tu(t,e){let n=su(e);for(const e of t.elements)n=n.filter((t=>!Qa(t,e)));return{arrayValue:{values:n}}}class eu extends zc{constructor(t,e){super(),this.k=t,this.N=e}}function nu(t){return ja(t.integerValue||t.doubleValue)}function su(t){return sc(t)&&t.arrayValue.values?t.arrayValue.values.slice():[]}class iu{constructor(t,e){this.version=t,this.transformResults=e}}class ru{constructor(t,e){this.updateTime=t,this.exists=e}static none(){return new ru}static exists(t){return new ru(void 0,t)}static updateTime(t){return new ru(t)}get isNone(){return void 0===this.updateTime&&void 0===this.exists}isEqual(t){return this.exists===t.exists&&(this.updateTime?!!t.updateTime&&this.updateTime.isEqual(t.updateTime):!t.updateTime)}}function ou(t,e){return void 0!==t.updateTime?e.isFoundDocument()&&e.version.isEqual(t.updateTime):void 0===t.exists||t.exists===e.isFoundDocument()}class au{}function cu(t,e,n){t instanceof fu?function(t,e,n){const s=t.value.clone(),i=gu(t.fieldTransforms,e,n.transformResults);s.setAll(i),e.convertToFoundDocument(n.version,s).setHasCommittedMutations()}(t,e,n):t instanceof pu?function(t,e,n){if(!ou(t.precondition,e))return void e.convertToUnknownDocument(n.version);const s=gu(t.fieldTransforms,e,n.transformResults),i=e.data;i.setAll(mu(t)),i.setAll(s),e.convertToFoundDocument(n.version,i).setHasCommittedMutations()}(t,e,n):function(t,e,n){e.convertToNoDocument(n.version).setHasCommittedMutations()}(0,e,n)}function uu(t,e,n){t instanceof fu?function(t,e,n){if(!ou(t.precondition,e))return;const s=t.value.clone(),i=yu(t.fieldTransforms,n,e);s.setAll(i),e.convertToFoundDocument(du(e),s).setHasLocalMutations()}(t,e,n):t instanceof pu?function(t,e,n){if(!ou(t.precondition,e))return;const s=yu(t.fieldTransforms,n,e),i=e.data;i.setAll(mu(t)),i.setAll(s),e.convertToFoundDocument(du(e),i).setHasLocalMutations()}(t,e,n):function(t,e){ou(t.precondition,e)&&e.convertToNoDocument(Na.min())}(t,e)}function lu(t,e){let n=null;for(const s of t.fieldTransforms){const t=e.data.field(s.field),i=Jc(s.transform,t||null);null!=i&&(null==n&&(n=cc.empty()),n.set(s.field,i))}return n||null}function hu(t,e){return t.type===e.type&&!!t.key.isEqual(e.key)&&!!t.precondition.isEqual(e.precondition)&&!!function(t,e){return void 0===t&&void 0===e||!(!t||!e)&&Ca(t,e,((t,e)=>function(t,e){return t.field.isEqual(e.field)&&function(t,e){return t instanceof Xc&&e instanceof Xc||t instanceof Zc&&e instanceof Zc?Ca(t.elements,e.elements,Qa):t instanceof eu&&e instanceof eu?Qa(t.N,e.N):t instanceof Qc&&e instanceof Qc}(t.transform,e.transform)}(t,e)))}(t.fieldTransforms,e.fieldTransforms)&&(0===t.type?t.value.isEqual(e.value):1!==t.type||t.data.isEqual(e.data)&&t.fieldMask.isEqual(e.fieldMask))}function du(t){return t.isFoundDocument()?t.version:Na.min()}class fu extends au{constructor(t,e,n,s=[]){super(),this.key=t,this.value=e,this.precondition=n,this.fieldTransforms=s,this.type=0}}class pu extends au{constructor(t,e,n,s,i=[]){super(),this.key=t,this.data=e,this.fieldMask=n,this.precondition=s,this.fieldTransforms=i,this.type=1}}function mu(t){const e=new Map;return t.fieldMask.fields.forEach((n=>{if(!n.isEmpty()){const s=t.data.field(n);e.set(n,s)}})),e}function gu(t,e,n){const s=new Map;ha(t.length===n.length);for(let i=0;i<n.length;i++){const r=t[i],o=r.transform,a=e.data.field(r.field);s.set(r.field,Wc(o,a,n[i]))}return s}function yu(t,e,n){const s=new Map;for(const i of t){const t=i.transform,r=n.data.field(i.field);s.set(i.field,Gc(t,r,e))}return s}class vu extends au{constructor(t,e){super(),this.key=t,this.precondition=e,this.type=2,this.fieldTransforms=[]}}class wu extends au{constructor(t,e){super(),this.key=t,this.precondition=e,this.type=3,this.fieldTransforms=[]}}class Eu{constructor(t){this.count=t}}var Iu,bu;function _u(t){if(void 0===t)return aa("GRPC error has no .code"),fa.UNKNOWN;switch(t){case Iu.OK:return fa.OK;case Iu.CANCELLED:return fa.CANCELLED;case Iu.UNKNOWN:return fa.UNKNOWN;case Iu.DEADLINE_EXCEEDED:return fa.DEADLINE_EXCEEDED;case Iu.RESOURCE_EXHAUSTED:return fa.RESOURCE_EXHAUSTED;case Iu.INTERNAL:return fa.INTERNAL;case Iu.UNAVAILABLE:return fa.UNAVAILABLE;case Iu.UNAUTHENTICATED:return fa.UNAUTHENTICATED;case Iu.INVALID_ARGUMENT:return fa.INVALID_ARGUMENT;case Iu.NOT_FOUND:return fa.NOT_FOUND;case Iu.ALREADY_EXISTS:return fa.ALREADY_EXISTS;case Iu.PERMISSION_DENIED:return fa.PERMISSION_DENIED;case Iu.FAILED_PRECONDITION:return fa.FAILED_PRECONDITION;case Iu.ABORTED:return fa.ABORTED;case Iu.OUT_OF_RANGE:return fa.OUT_OF_RANGE;case Iu.UNIMPLEMENTED:return fa.UNIMPLEMENTED;case Iu.DATA_LOSS:return fa.DATA_LOSS;default:return la()}}(bu=Iu||(Iu={}))[bu.OK=0]="OK",bu[bu.CANCELLED=1]="CANCELLED",bu[bu.UNKNOWN=2]="UNKNOWN",bu[bu.INVALID_ARGUMENT=3]="INVALID_ARGUMENT",bu[bu.DEADLINE_EXCEEDED=4]="DEADLINE_EXCEEDED",bu[bu.NOT_FOUND=5]="NOT_FOUND",bu[bu.ALREADY_EXISTS=6]="ALREADY_EXISTS",bu[bu.PERMISSION_DENIED=7]="PERMISSION_DENIED",bu[bu.UNAUTHENTICATED=16]="UNAUTHENTICATED",bu[bu.RESOURCE_EXHAUSTED=8]="RESOURCE_EXHAUSTED",bu[bu.FAILED_PRECONDITION=9]="FAILED_PRECONDITION",bu[bu.ABORTED=10]="ABORTED",bu[bu.OUT_OF_RANGE=11]="OUT_OF_RANGE",bu[bu.UNIMPLEMENTED=12]="UNIMPLEMENTED",bu[bu.INTERNAL=13]="INTERNAL",bu[bu.UNAVAILABLE=14]="UNAVAILABLE",bu[bu.DATA_LOSS=15]="DATA_LOSS";class Tu{constructor(t,e){this.comparator=t,this.root=e||ku.EMPTY}insert(t,e){return new Tu(this.comparator,this.root.insert(t,e,this.comparator).copy(null,null,ku.BLACK,null,null))}remove(t){return new Tu(this.comparator,this.root.remove(t,this.comparator).copy(null,null,ku.BLACK,null,null))}get(t){let e=this.root;for(;!e.isEmpty();){const n=this.comparator(t,e.key);if(0===n)return e.value;n<0?e=e.left:n>0&&(e=e.right)}return null}indexOf(t){let e=0,n=this.root;for(;!n.isEmpty();){const s=this.comparator(t,n.key);if(0===s)return e+n.left.size;s<0?n=n.left:(e+=n.left.size+1,n=n.right)}return-1}isEmpty(){return this.root.isEmpty()}get size(){return this.root.size}minKey(){return this.root.minKey()}maxKey(){return this.root.maxKey()}inorderTraversal(t){return this.root.inorderTraversal(t)}forEach(t){this.inorderTraversal(((e,n)=>(t(e,n),!1)))}toString(){const t=[];return this.inorderTraversal(((e,n)=>(t.push(`${e}:${n}`),!1))),`{${t.join(", ")}}`}reverseTraversal(t){return this.root.reverseTraversal(t)}getIterator(){return new Su(this.root,null,this.comparator,!1)}getIteratorFrom(t){return new Su(this.root,t,this.comparator,!1)}getReverseIterator(){return new Su(this.root,null,this.comparator,!0)}getReverseIteratorFrom(t){return new Su(this.root,t,this.comparator,!0)}}class Su{constructor(t,e,n,s){this.isReverse=s,this.nodeStack=[];let i=1;for(;!t.isEmpty();)if(i=e?n(t.key,e):1,s&&(i*=-1),i<0)t=this.isReverse?t.left:t.right;else{if(0===i){this.nodeStack.push(t);break}this.nodeStack.push(t),t=this.isReverse?t.right:t.left}}getNext(){let t=this.nodeStack.pop();const e={key:t.key,value:t.value};if(this.isReverse)for(t=t.left;!t.isEmpty();)this.nodeStack.push(t),t=t.right;else for(t=t.right;!t.isEmpty();)this.nodeStack.push(t),t=t.left;return e}hasNext(){return this.nodeStack.length>0}peek(){if(0===this.nodeStack.length)return null;const t=this.nodeStack[this.nodeStack.length-1];return{key:t.key,value:t.value}}}class ku{constructor(t,e,n,s,i){this.key=t,this.value=e,this.color=null!=n?n:ku.RED,this.left=null!=s?s:ku.EMPTY,this.right=null!=i?i:ku.EMPTY,this.size=this.left.size+1+this.right.size}copy(t,e,n,s,i){return new ku(null!=t?t:this.key,null!=e?e:this.value,null!=n?n:this.color,null!=s?s:this.left,null!=i?i:this.right)}isEmpty(){return!1}inorderTraversal(t){return this.left.inorderTraversal(t)||t(this.key,this.value)||this.right.inorderTraversal(t)}reverseTraversal(t){return this.right.reverseTraversal(t)||t(this.key,this.value)||this.left.reverseTraversal(t)}min(){return this.left.isEmpty()?this:this.left.min()}minKey(){return this.min().key}maxKey(){return this.right.isEmpty()?this.key:this.right.maxKey()}insert(t,e,n){let s=this;const i=n(t,s.key);return s=i<0?s.copy(null,null,null,s.left.insert(t,e,n),null):0===i?s.copy(null,e,null,null,null):s.copy(null,null,null,null,s.right.insert(t,e,n)),s.fixUp()}removeMin(){if(this.left.isEmpty())return ku.EMPTY;let t=this;return t.left.isRed()||t.left.left.isRed()||(t=t.moveRedLeft()),t=t.copy(null,null,null,t.left.removeMin(),null),t.fixUp()}remove(t,e){let n,s=this;if(e(t,s.key)<0)s.left.isEmpty()||s.left.isRed()||s.left.left.isRed()||(s=s.moveRedLeft()),s=s.copy(null,null,null,s.left.remove(t,e),null);else{if(s.left.isRed()&&(s=s.rotateRight()),s.right.isEmpty()||s.right.isRed()||s.right.left.isRed()||(s=s.moveRedRight()),0===e(t,s.key)){if(s.right.isEmpty())return ku.EMPTY;n=s.right.min(),s=s.copy(n.key,n.value,null,null,s.right.removeMin())}s=s.copy(null,null,null,null,s.right.remove(t,e))}return s.fixUp()}isRed(){return this.color}fixUp(){let t=this;return t.right.isRed()&&!t.left.isRed()&&(t=t.rotateLeft()),t.left.isRed()&&t.left.left.isRed()&&(t=t.rotateRight()),t.left.isRed()&&t.right.isRed()&&(t=t.colorFlip()),t}moveRedLeft(){let t=this.colorFlip();return t.right.left.isRed()&&(t=t.copy(null,null,null,null,t.right.rotateRight()),t=t.rotateLeft(),t=t.colorFlip()),t}moveRedRight(){let t=this.colorFlip();return t.left.left.isRed()&&(t=t.rotateRight(),t=t.colorFlip()),t}rotateLeft(){const t=this.copy(null,null,ku.RED,null,this.right.left);return this.right.copy(null,null,this.color,t,null)}rotateRight(){const t=this.copy(null,null,ku.RED,this.left.right,null);return this.left.copy(null,null,this.color,null,t)}colorFlip(){const t=this.left.copy(null,null,!this.left.color,null,null),e=this.right.copy(null,null,!this.right.color,null,null);return this.copy(null,null,!this.color,t,e)}checkMaxDepth(){const t=this.check();return Math.pow(2,t)<=this.size+1}check(){if(this.isRed()&&this.left.isRed())throw la();if(this.right.isRed())throw la();const t=this.left.check();if(t!==this.right.check())throw la();return t+(this.isRed()?0:1)}}ku.EMPTY=null,ku.RED=!0,ku.BLACK=!1,ku.EMPTY=new class{constructor(){this.size=0}get key(){throw la()}get value(){throw la()}get color(){throw la()}get left(){throw la()}get right(){throw la()}copy(t,e,n,s,i){return this}insert(t,e,n){return new ku(t,e)}remove(t,e){return this}isEmpty(){return!0}inorderTraversal(t){return!1}reverseTraversal(t){return!1}minKey(){return null}maxKey(){return null}isRed(){return!1}checkMaxDepth(){return!0}check(){return 0}};class Cu{constructor(t){this.comparator=t,this.data=new Tu(this.comparator)}has(t){return null!==this.data.get(t)}first(){return this.data.minKey()}last(){return this.data.maxKey()}get size(){return this.data.size}indexOf(t){return this.data.indexOf(t)}forEach(t){this.data.inorderTraversal(((e,n)=>(t(e),!1)))}forEachInRange(t,e){const n=this.data.getIteratorFrom(t[0]);for(;n.hasNext();){const s=n.getNext();if(this.comparator(s.key,t[1])>=0)return;e(s.key)}}forEachWhile(t,e){let n;for(n=void 0!==e?this.data.getIteratorFrom(e):this.data.getIterator();n.hasNext();)if(!t(n.getNext().key))return}firstAfterOrEqual(t){const e=this.data.getIteratorFrom(t);return e.hasNext()?e.getNext().key:null}getIterator(){return new Au(this.data.getIterator())}getIteratorFrom(t){return new Au(this.data.getIteratorFrom(t))}add(t){return this.copy(this.data.remove(t).insert(t,!0))}delete(t){return this.has(t)?this.copy(this.data.remove(t)):this}isEmpty(){return this.data.isEmpty()}unionWith(t){let e=this;return e.size<t.size&&(e=t,t=this),t.forEach((t=>{e=e.add(t)})),e}isEqual(t){if(!(t instanceof Cu))return!1;if(this.size!==t.size)return!1;const e=this.data.getIterator(),n=t.data.getIterator();for(;e.hasNext();){const t=e.getNext().key,s=n.getNext().key;if(0!==this.comparator(t,s))return!1}return!0}toArray(){const t=[];return this.forEach((e=>{t.push(e)})),t}toString(){const t=[];return this.forEach((e=>t.push(e))),"SortedSet("+t.toString()+")"}copy(t){const e=new Cu(this.comparator);return e.data=t,e}}class Au{constructor(t){this.iter=t}getNext(){return this.iter.getNext().key}hasNext(){return this.iter.hasNext()}}const Nu=new Tu(Wa.comparator);function Ru(){return Nu}const Du=new Tu(Wa.comparator);function Lu(){return Du}const Ou=new Tu(Wa.comparator);const Pu=new Cu(Wa.comparator);function Mu(...t){let e=Pu;for(const n of t)e=e.add(n);return e}const xu=new Cu(ka);function Uu(){return xu}class Fu{constructor(t,e,n,s,i){this.snapshotVersion=t,this.targetChanges=e,this.targetMismatches=n,this.documentUpdates=s,this.resolvedLimboDocuments=i}static createSynthesizedRemoteEventForCurrentChange(t,e){const n=new Map;return n.set(t,Vu.createSynthesizedTargetChangeForCurrentChange(t,e)),new Fu(Na.min(),n,Uu(),Ru(),Mu())}}class Vu{constructor(t,e,n,s,i){this.resumeToken=t,this.current=e,this.addedDocuments=n,this.modifiedDocuments=s,this.removedDocuments=i}static createSynthesizedTargetChangeForCurrentChange(t,e){return new Vu(Fa.EMPTY_BYTE_STRING,e,Mu(),Mu(),Mu())}}class qu{constructor(t,e,n,s){this.$=t,this.removedTargetIds=e,this.key=n,this.F=s}}class ju{constructor(t,e){this.targetId=t,this.O=e}}class Bu{constructor(t,e,n=Fa.EMPTY_BYTE_STRING,s=null){this.state=t,this.targetIds=e,this.resumeToken=n,this.cause=s}}class Hu{constructor(){this.M=0,this.L=zu(),this.B=Fa.EMPTY_BYTE_STRING,this.U=!1,this.q=!0}get current(){return this.U}get resumeToken(){return this.B}get K(){return 0!==this.M}get j(){return this.q}W(t){t.approximateByteSize()>0&&(this.q=!0,this.B=t)}G(){let t=Mu(),e=Mu(),n=Mu();return this.L.forEach(((s,i)=>{switch(i){case 0:t=t.add(s);break;case 2:e=e.add(s);break;case 1:n=n.add(s);break;default:la()}})),new Vu(this.B,this.U,t,e,n)}H(){this.q=!1,this.L=zu()}J(t,e){this.q=!0,this.L=this.L.insert(t,e)}Y(t){this.q=!0,this.L=this.L.remove(t)}X(){this.M+=1}Z(){this.M-=1}tt(){this.q=!0,this.U=!0}}class $u{constructor(t){this.et=t,this.nt=new Map,this.st=Ru(),this.it=Ku(),this.rt=new Cu(ka)}ot(t){for(const e of t.$)t.F&&t.F.isFoundDocument()?this.at(e,t.F):this.ct(e,t.key,t.F);for(const e of t.removedTargetIds)this.ct(e,t.key,t.F)}ut(t){this.forEachTarget(t,(e=>{const n=this.ht(e);switch(t.state){case 0:this.lt(e)&&n.W(t.resumeToken);break;case 1:n.Z(),n.K||n.H(),n.W(t.resumeToken);break;case 2:n.Z(),n.K||this.removeTarget(e);break;case 3:this.lt(e)&&(n.tt(),n.W(t.resumeToken));break;case 4:this.lt(e)&&(this.ft(e),n.W(t.resumeToken));break;default:la()}}))}forEachTarget(t,e){t.targetIds.length>0?t.targetIds.forEach(e):this.nt.forEach(((t,n)=>{this.lt(n)&&e(n)}))}dt(t){const e=t.targetId,n=t.O.count,s=this.wt(e);if(s){const t=s.target;if(mc(t))if(0===n){const n=new Wa(t.path);this.ct(e,n,lc.newNoDocument(n,Na.min()))}else ha(1===n);else this._t(e)!==n&&(this.ft(e),this.rt=this.rt.add(e))}}gt(t){const e=new Map;this.nt.forEach(((n,s)=>{const i=this.wt(s);if(i){if(n.current&&mc(i.target)){const e=new Wa(i.target.path);null!==this.st.get(e)||this.yt(s,e)||this.ct(s,e,lc.newNoDocument(e,t))}n.j&&(e.set(s,n.G()),n.H())}}));let n=Mu();this.it.forEach(((t,e)=>{let s=!0;e.forEachWhile((t=>{const e=this.wt(t);return!e||2===e.purpose||(s=!1,!1)})),s&&(n=n.add(t))}));const s=new Fu(t,e,this.rt,this.st,n);return this.st=Ru(),this.it=Ku(),this.rt=new Cu(ka),s}at(t,e){if(!this.lt(t))return;const n=this.yt(t,e.key)?2:0;this.ht(t).J(e.key,n),this.st=this.st.insert(e.key,e),this.it=this.it.insert(e.key,this.Tt(e.key).add(t))}ct(t,e,n){if(!this.lt(t))return;const s=this.ht(t);this.yt(t,e)?s.J(e,1):s.Y(e),this.it=this.it.insert(e,this.Tt(e).delete(t)),n&&(this.st=this.st.insert(e,n))}removeTarget(t){this.nt.delete(t)}_t(t){const e=this.ht(t).G();return this.et.getRemoteKeysForTarget(t).size+e.addedDocuments.size-e.removedDocuments.size}X(t){this.ht(t).X()}ht(t){let e=this.nt.get(t);return e||(e=new Hu,this.nt.set(t,e)),e}Tt(t){let e=this.it.get(t);return e||(e=new Cu(ka),this.it=this.it.insert(t,e)),e}lt(t){const e=null!==this.wt(t);return e||oa("WatchChangeAggregator","Detected inactive target",t),e}wt(t){const e=this.nt.get(t);return e&&e.K?null:this.et.Et(t)}ft(t){this.nt.set(t,new Hu),this.et.getRemoteKeysForTarget(t).forEach((e=>{this.ct(t,e,null)}))}yt(t,e){return this.et.getRemoteKeysForTarget(t).has(e)}}function Ku(){return new Tu(Wa.comparator)}function zu(){return new Tu(Wa.comparator)}const Gu={asc:"ASCENDING",desc:"DESCENDING"},Wu={"<":"LESS_THAN","<=":"LESS_THAN_OR_EQUAL",">":"GREATER_THAN",">=":"GREATER_THAN_OR_EQUAL","==":"EQUAL","!=":"NOT_EQUAL","array-contains":"ARRAY_CONTAINS",in:"IN","not-in":"NOT_IN","array-contains-any":"ARRAY_CONTAINS_ANY"};class Ju{constructor(t,e){this.databaseId=t,this.C=e}}function Qu(t,e){return t.C?`${new Date(1e3*e.seconds).toISOString().replace(/\.\d*/,"").replace("Z","")}.${("000000000"+e.nanoseconds).slice(-9)}Z`:{seconds:""+e.seconds,nanos:e.nanoseconds}}function Xu(t,e){return t.C?e.toBase64():e.toUint8Array()}function Yu(t,e){return Qu(t,e.toTimestamp())}function Zu(t){return ha(!!t),Na.fromTimestamp(function(t){const e=qa(t);return new Aa(e.seconds,e.nanos)}(t))}function tl(t,e){return function(t){return new Pa(["projects",t.projectId,"databases",t.database])}(t).child("documents").child(e).canonicalString()}function el(t){const e=Pa.fromString(t);return ha(Il(e)),e}function nl(t,e){return tl(t.databaseId,e.path)}function sl(t,e){const n=el(e);if(n.get(1)!==t.databaseId.projectId)throw new pa(fa.INVALID_ARGUMENT,"Tried to deserialize key from different project: "+n.get(1)+" vs "+t.databaseId.projectId);if(n.get(3)!==t.databaseId.database)throw new pa(fa.INVALID_ARGUMENT,"Tried to deserialize key from different database: "+n.get(3)+" vs "+t.databaseId.database);return new Wa(ol(n))}function il(t,e){return tl(t.databaseId,e)}function rl(t){return new Pa(["projects",t.databaseId.projectId,"databases",t.databaseId.database]).canonicalString()}function ol(t){return ha(t.length>4&&"documents"===t.get(4)),t.popFirst(5)}function al(t,e,n){return{name:nl(t,e),fields:n.value.mapValue.fields}}function cl(t,e){return{documents:[il(t,e.path)]}}function ul(t,e){const n={structuredQuery:{}},s=e.path;null!==e.collectionGroup?(n.parent=il(t,s),n.structuredQuery.from=[{collectionId:e.collectionGroup,allDescendants:!0}]):(n.parent=il(t,s.popLast()),n.structuredQuery.from=[{collectionId:s.lastSegment()}]);const i=function(t){if(0===t.length)return;const e=t.map((t=>function(t){if("=="===t.op){if(rc(t.value))return{unaryFilter:{field:gl(t.field),op:"IS_NAN"}};if(ic(t.value))return{unaryFilter:{field:gl(t.field),op:"IS_NULL"}}}else if("!="===t.op){if(rc(t.value))return{unaryFilter:{field:gl(t.field),op:"IS_NOT_NAN"}};if(ic(t.value))return{unaryFilter:{field:gl(t.field),op:"IS_NOT_NULL"}}}return{fieldFilter:{field:gl(t.field),op:ml(t.op),value:t.value}}}(t)));return 1===e.length?e[0]:{compositeFilter:{op:"AND",filters:e}}}(e.filters);i&&(n.structuredQuery.where=i);const r=function(t){if(0!==t.length)return t.map((t=>function(t){return{field:gl(t.field),direction:pl(t.dir)}}(t)))}(e.orderBy);r&&(n.structuredQuery.orderBy=r);const o=function(t,e){return t.C||za(e)?e:{value:e}}(t,e.limit);return null!==o&&(n.structuredQuery.limit=o),e.startAt&&(n.structuredQuery.startAt=dl(e.startAt)),e.endAt&&(n.structuredQuery.endAt=dl(e.endAt)),n}function ll(t){let e=function(t){const e=el(t);return 4===e.length?Pa.emptyPath():ol(e)}(t.parent);const n=t.structuredQuery,s=n.from?n.from.length:0;let i=null;if(s>0){ha(1===s);const t=n.from[0];t.allDescendants?i=t.collectionId:e=e.child(t.collectionId)}let r=[];n.where&&(r=hl(n.where));let o=[];n.orderBy&&(o=n.orderBy.map((t=>function(t){return new Cc(yl(t.field),function(t){switch(t){case"ASCENDING":return"asc";case"DESCENDING":return"desc";default:return}}(t.direction))}(t))));let a=null;n.limit&&(a=function(t){let e;return e="object"==typeof t?t.value:t,za(e)?null:e}(n.limit));let c=null;n.startAt&&(c=fl(n.startAt));let u=null;return n.endAt&&(u=fl(n.endAt)),function(t,e,n,s,i,r,o,a){return new Dc(t,e,n,s,i,r,o,a)}(e,i,o,r,a,"F",c,u)}function hl(t){return t?void 0!==t.unaryFilter?[wl(t)]:void 0!==t.fieldFilter?[vl(t)]:void 0!==t.compositeFilter?t.compositeFilter.filters.map((t=>hl(t))).reduce(((t,e)=>t.concat(e))):la():[]}function dl(t){return{before:t.before,values:t.position}}function fl(t){const e=!!t.before,n=t.values||[];return new Sc(n,e)}function pl(t){return Gu[t]}function ml(t){return Wu[t]}function gl(t){return{fieldPath:t.canonicalString()}}function yl(t){return xa.fromServerFormat(t.fieldPath)}function vl(t){return gc.create(yl(t.fieldFilter.field),function(t){switch(t){case"EQUAL":return"==";case"NOT_EQUAL":return"!=";case"GREATER_THAN":return">";case"GREATER_THAN_OR_EQUAL":return">=";case"LESS_THAN":return"<";case"LESS_THAN_OR_EQUAL":return"<=";case"ARRAY_CONTAINS":return"array-contains";case"IN":return"in";case"NOT_IN":return"not-in";case"ARRAY_CONTAINS_ANY":return"array-contains-any";default:return la()}}(t.fieldFilter.op),t.fieldFilter.value)}function wl(t){switch(t.unaryFilter.op){case"IS_NAN":const e=yl(t.unaryFilter.field);return gc.create(e,"==",{doubleValue:NaN});case"IS_NULL":const n=yl(t.unaryFilter.field);return gc.create(n,"==",{nullValue:"NULL_VALUE"});case"IS_NOT_NAN":const s=yl(t.unaryFilter.field);return gc.create(s,"!=",{doubleValue:NaN});case"IS_NOT_NULL":const i=yl(t.unaryFilter.field);return gc.create(i,"!=",{nullValue:"NULL_VALUE"});default:return la()}}function El(t){const e=[];return t.fields.forEach((t=>e.push(t.canonicalString()))),{fieldPaths:e}}function Il(t){return t.length>=4&&"projects"===t.get(0)&&"databases"===t.get(2)}function bl(t){let e="";for(let n=0;n<t.length;n++)e.length>0&&(e=Tl(e)),e=_l(t.get(n),e);return Tl(e)}function _l(t,e){let n=e;const s=t.length;for(let e=0;e<s;e++){const s=t.charAt(e);switch(s){case"\0":n+="";break;case"":n+="";break;default:n+=s}}return n}function Tl(t){return t+""}class Sl{constructor(t,e,n){this.ownerId=t,this.allowTabSynchronization=e,this.leaseTimestampMs=n}}Sl.store="owner",Sl.key="owner";class kl{constructor(t,e,n){this.userId=t,this.lastAcknowledgedBatchId=e,this.lastStreamToken=n}}kl.store="mutationQueues",kl.keyPath="userId";class Cl{constructor(t,e,n,s,i){this.userId=t,this.batchId=e,this.localWriteTimeMs=n,this.baseMutations=s,this.mutations=i}}Cl.store="mutations",Cl.keyPath="batchId",Cl.userMutationsIndex="userMutationsIndex",Cl.userMutationsKeyPath=["userId","batchId"];class Al{constructor(){}static prefixForUser(t){return[t]}static prefixForPath(t,e){return[t,bl(e)]}static key(t,e,n){return[t,bl(e),n]}}Al.store="documentMutations",Al.PLACEHOLDER=new Al;class Nl{constructor(t,e,n,s,i,r){this.unknownDocument=t,this.noDocument=e,this.document=n,this.hasCommittedMutations=s,this.readTime=i,this.parentPath=r}}Nl.store="remoteDocuments",Nl.readTimeIndex="readTimeIndex",Nl.readTimeIndexPath="readTime",Nl.collectionReadTimeIndex="collectionReadTimeIndex",Nl.collectionReadTimeIndexPath=["parentPath","readTime"];class Rl{constructor(t){this.byteSize=t}}Rl.store="remoteDocumentGlobal",Rl.key="remoteDocumentGlobalKey";class Dl{constructor(t,e,n,s,i,r,o){this.targetId=t,this.canonicalId=e,this.readTime=n,this.resumeToken=s,this.lastListenSequenceNumber=i,this.lastLimboFreeSnapshotVersion=r,this.query=o}}Dl.store="targets",Dl.keyPath="targetId",Dl.queryTargetsIndexName="queryTargetsIndex",Dl.queryTargetsKeyPath=["canonicalId","targetId"];class Ll{constructor(t,e,n){this.targetId=t,this.path=e,this.sequenceNumber=n}}Ll.store="targetDocuments",Ll.keyPath=["targetId","path"],Ll.documentTargetsIndex="documentTargetsIndex",Ll.documentTargetsKeyPath=["path","targetId"];class Ol{constructor(t,e,n,s){this.highestTargetId=t,this.highestListenSequenceNumber=e,this.lastRemoteSnapshotVersion=n,this.targetCount=s}}Ol.key="targetGlobalKey",Ol.store="targetGlobal";class Pl{constructor(t,e){this.collectionId=t,this.parent=e}}Pl.store="collectionParents",Pl.keyPath=["collectionId","parent"];class Ml{constructor(t,e,n,s){this.clientId=t,this.updateTimeMs=e,this.networkEnabled=n,this.inForeground=s}}Ml.store="clientMetadata",Ml.keyPath="clientId";class xl{constructor(t,e,n){this.bundleId=t,this.createTime=e,this.version=n}}xl.store="bundles",xl.keyPath="bundleId";class Ul{constructor(t,e,n){this.name=t,this.readTime=e,this.bundledQuery=n}}Ul.store="namedQueries",Ul.keyPath="name",kl.store,Cl.store,Al.store,Nl.store,Dl.store,Sl.store,Ol.store,Ll.store,Ml.store,Rl.store,Pl.store,xl.store,Ul.store;class Fl{constructor(t){this.nextCallback=null,this.catchCallback=null,this.result=void 0,this.error=void 0,this.isDone=!1,this.callbackAttached=!1,t((t=>{this.isDone=!0,this.result=t,this.nextCallback&&this.nextCallback(t)}),(t=>{this.isDone=!0,this.error=t,this.catchCallback&&this.catchCallback(t)}))}catch(t){return this.next(void 0,t)}next(t,e){return this.callbackAttached&&la(),this.callbackAttached=!0,this.isDone?this.error?this.wrapFailure(e,this.error):this.wrapSuccess(t,this.result):new Fl(((n,s)=>{this.nextCallback=e=>{this.wrapSuccess(t,e).next(n,s)},this.catchCallback=t=>{this.wrapFailure(e,t).next(n,s)}}))}toPromise(){return new Promise(((t,e)=>{this.next(t,e)}))}wrapUserFunction(t){try{const e=t();return e instanceof Fl?e:Fl.resolve(e)}catch(t){return Fl.reject(t)}}wrapSuccess(t,e){return t?this.wrapUserFunction((()=>t(e))):Fl.resolve(e)}wrapFailure(t,e){return t?this.wrapUserFunction((()=>t(e))):Fl.reject(e)}static resolve(t){return new Fl(((e,n)=>{e(t)}))}static reject(t){return new Fl(((e,n)=>{n(t)}))}static waitFor(t){return new Fl(((e,n)=>{let s=0,i=0,r=!1;t.forEach((t=>{++s,t.next((()=>{++i,r&&i===s&&e()}),(t=>n(t)))})),r=!0,i===s&&e()}))}static or(t){let e=Fl.resolve(!1);for(const n of t)e=e.next((t=>t?Fl.resolve(t):n()));return e}static forEach(t,e){const n=[];return t.forEach(((t,s)=>{n.push(e.call(this,t,s))})),this.waitFor(n)}}function Vl(t){return"IndexedDbTransactionError"===t.name}class ql{constructor(t,e,n,s){this.batchId=t,this.localWriteTime=e,this.baseMutations=n,this.mutations=s}applyToRemoteDocument(t,e){const n=e.mutationResults;for(let e=0;e<this.mutations.length;e++){const s=this.mutations[e];s.key.isEqual(t.key)&&cu(s,t,n[e])}}applyToLocalView(t){for(const e of this.baseMutations)e.key.isEqual(t.key)&&uu(e,t,this.localWriteTime);for(const e of this.mutations)e.key.isEqual(t.key)&&uu(e,t,this.localWriteTime)}applyToLocalDocumentSet(t){this.mutations.forEach((e=>{const n=t.get(e.key),s=n;this.applyToLocalView(s),n.isValidDocument()||s.convertToNoDocument(Na.min())}))}keys(){return this.mutations.reduce(((t,e)=>t.add(e.key)),Mu())}isEqual(t){return this.batchId===t.batchId&&Ca(this.mutations,t.mutations,((t,e)=>hu(t,e)))&&Ca(this.baseMutations,t.baseMutations,((t,e)=>hu(t,e)))}}class jl{constructor(t,e,n,s){this.batch=t,this.commitVersion=e,this.mutationResults=n,this.docVersions=s}static from(t,e,n){ha(t.mutations.length===n.length);let s=Ou;const i=t.mutations;for(let t=0;t<i.length;t++)s=s.insert(i[t].key,n[t].version);return new jl(t,e,n,s)}}class Bl{constructor(t,e,n,s,i=Na.min(),r=Na.min(),o=Fa.EMPTY_BYTE_STRING){this.target=t,this.targetId=e,this.purpose=n,this.sequenceNumber=s,this.snapshotVersion=i,this.lastLimboFreeSnapshotVersion=r,this.resumeToken=o}withSequenceNumber(t){return new Bl(this.target,this.targetId,this.purpose,t,this.snapshotVersion,this.lastLimboFreeSnapshotVersion,this.resumeToken)}withResumeToken(t,e){return new Bl(this.target,this.targetId,this.purpose,this.sequenceNumber,e,this.lastLimboFreeSnapshotVersion,t)}withLastLimboFreeSnapshotVersion(t){return new Bl(this.target,this.targetId,this.purpose,this.sequenceNumber,this.snapshotVersion,t,this.resumeToken)}}class Hl{constructor(t){this.Gt=t}}function $l(t){const e=ll({parent:t.parent,structuredQuery:t.structuredQuery});return"LAST"===t.limitType?function(t,e,n){return new Dc(t.path,t.collectionGroup,t.explicitOrderBy.slice(),t.filters.slice(),e,n,t.startAt,t.endAt)}(e,e.limit,"L"):e}class Kl{constructor(){this.zt=new zl}addToCollectionParentIndex(t,e){return this.zt.add(e),Fl.resolve()}getCollectionParents(t,e){return Fl.resolve(this.zt.getEntries(e))}}class zl{constructor(){this.index={}}add(t){const e=t.lastSegment(),n=t.popLast(),s=this.index[e]||new Cu(Pa.comparator),i=!s.has(n);return this.index[e]=s.add(n),i}has(t){const e=t.lastSegment(),n=t.popLast(),s=this.index[e];return s&&s.has(n)}getEntries(t){return(this.index[t]||new Cu(Pa.comparator)).toArray()}}class Gl{constructor(t,e,n){this.cacheSizeCollectionThreshold=t,this.percentileToCollect=e,this.maximumSequenceNumbersToCollect=n}static withCacheSize(t){return new Gl(t,Gl.DEFAULT_COLLECTION_PERCENTILE,Gl.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT)}}Gl.DEFAULT_COLLECTION_PERCENTILE=10,Gl.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT=1e3,Gl.DEFAULT=new Gl(41943040,Gl.DEFAULT_COLLECTION_PERCENTILE,Gl.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT),Gl.DISABLED=new Gl(-1,0,0);class Wl{constructor(t){this.se=t}next(){return this.se+=2,this.se}static ie(){return new Wl(0)}static re(){return new Wl(-1)}}async function Jl(t){if(t.code!==fa.FAILED_PRECONDITION||"The current tab is not in the required state to perform this operation. It might be necessary to refresh the browser tab."!==t.message)throw t;oa("LocalStore","Unexpectedly lost primary lease")}class Ql{constructor(t,e){this.mapKeyFn=t,this.equalsFn=e,this.inner={}}get(t){const e=this.mapKeyFn(t),n=this.inner[e];if(void 0!==n)for(const[e,s]of n)if(this.equalsFn(e,t))return s}has(t){return void 0!==this.get(t)}set(t,e){const n=this.mapKeyFn(t),s=this.inner[n];if(void 0!==s){for(let n=0;n<s.length;n++)if(this.equalsFn(s[n][0],t))return void(s[n]=[t,e]);s.push([t,e])}else this.inner[n]=[[t,e]]}delete(t){const e=this.mapKeyFn(t),n=this.inner[e];if(void 0===n)return!1;for(let s=0;s<n.length;s++)if(this.equalsFn(n[s][0],t))return 1===n.length?delete this.inner[e]:n.splice(s,1),!0;return!1}forEach(t){Da(this.inner,((e,n)=>{for(const[e,s]of n)t(e,s)}))}isEmpty(){return La(this.inner)}}class Xl{constructor(t,e,n){this.Je=t,this.An=e,this.Jt=n}Rn(t,e){return this.An.getAllMutationBatchesAffectingDocumentKey(t,e).next((n=>this.Pn(t,e,n)))}Pn(t,e,n){return this.Je.getEntry(t,e).next((t=>{for(const e of n)e.applyToLocalView(t);return t}))}bn(t,e){t.forEach(((t,n)=>{for(const t of e)t.applyToLocalView(n)}))}vn(t,e){return this.Je.getEntries(t,e).next((e=>this.Vn(t,e).next((()=>e))))}Vn(t,e){return this.An.getAllMutationBatchesAffectingDocumentKeys(t,e).next((t=>this.bn(e,t)))}getDocumentsMatchingQuery(t,e,n){return function(t){return Wa.isDocumentKey(t.path)&&null===t.collectionGroup&&0===t.filters.length}(e)?this.Sn(t,e.path):function(t){return null!==t.collectionGroup}(e)?this.Dn(t,e,n):this.Cn(t,e,n)}Sn(t,e){return this.Rn(t,new Wa(e)).next((t=>{let e=Lu();return t.isFoundDocument()&&(e=e.insert(t.key,t)),e}))}Dn(t,e,n){const s=e.collectionGroup;let i=Lu();return this.Jt.getCollectionParents(t,s).next((r=>Fl.forEach(r,(r=>{const o=function(t,e){return new Dc(e,null,t.explicitOrderBy.slice(),t.filters.slice(),t.limit,t.limitType,t.startAt,t.endAt)}(e,r.child(s));return this.Cn(t,o,n).next((t=>{t.forEach(((t,e)=>{i=i.insert(t,e)}))}))})).next((()=>i))))}Cn(t,e,n){let s,i;return this.Je.getDocumentsMatchingQuery(t,e,n).next((n=>(s=n,this.An.getAllMutationBatchesAffectingQuery(t,e)))).next((e=>(i=e,this.Nn(t,i,s).next((t=>{s=t;for(const t of i)for(const e of t.mutations){const n=e.key;let i=s.get(n);null==i&&(i=lc.newInvalidDocument(n),s=s.insert(n,i)),uu(e,i,t.localWriteTime),i.isFoundDocument()||(s=s.remove(n))}}))))).next((()=>(s.forEach(((t,n)=>{qc(e,n)||(s=s.remove(t))})),s)))}Nn(t,e,n){let s=Mu();for(const t of e)for(const e of t.mutations)e instanceof pu&&null===n.get(e.key)&&(s=s.add(e.key));let i=n;return this.Je.getEntries(t,s).next((t=>(t.forEach(((t,e)=>{e.isFoundDocument()&&(i=i.insert(t,e))})),i)))}}class Yl{constructor(t,e,n,s){this.targetId=t,this.fromCache=e,this.kn=n,this.xn=s}static $n(t,e){let n=Mu(),s=Mu();for(const t of e.docChanges)switch(t.type){case 0:n=n.add(t.doc.key);break;case 1:s=s.add(t.doc.key)}return new Yl(t,e.fromCache,n,s)}}class Zl{Fn(t){this.On=t}getDocumentsMatchingQuery(t,e,n,s){return function(t){return 0===t.filters.length&&null===t.limit&&null==t.startAt&&null==t.endAt&&(0===t.explicitOrderBy.length||1===t.explicitOrderBy.length&&t.explicitOrderBy[0].field.isKeyField())}(e)||n.isEqual(Na.min())?this.Mn(t,e):this.On.vn(t,s).next((i=>{const r=this.Ln(e,i);return(Oc(e)||Pc(e))&&this.Bn(e.limitType,r,s,n)?this.Mn(t,e):(ra()<=$.DEBUG&&oa("QueryEngine","Re-using previous result from %s to execute query: %s",n.toString(),Vc(e)),this.On.getDocumentsMatchingQuery(t,e,n).next((t=>(r.forEach((e=>{t=t.insert(e.key,e)})),t))))}))}Ln(t,e){let n=new Cu(jc(t));return e.forEach(((e,s)=>{qc(t,s)&&(n=n.add(s))})),n}Bn(t,e,n,s){if(n.size!==e.size)return!0;const i="F"===t?e.last():e.first();return!!i&&(i.hasPendingWrites||i.version.compareTo(s)>0)}Mn(t,e){return ra()<=$.DEBUG&&oa("QueryEngine","Using full collection scan to execute query:",Vc(e)),this.On.getDocumentsMatchingQuery(t,e,Na.min())}}class th{constructor(t,e,n,s){this.persistence=t,this.Un=e,this.k=s,this.qn=new Tu(ka),this.Kn=new Ql((t=>fc(t)),pc),this.jn=Na.min(),this.An=t.getMutationQueue(n),this.Qn=t.getRemoteDocumentCache(),this.He=t.getTargetCache(),this.Wn=new Xl(this.Qn,this.An,this.persistence.getIndexManager()),this.Ye=t.getBundleCache(),this.Un.Fn(this.Wn)}collectGarbage(t){return this.persistence.runTransaction("Collect garbage","readwrite-primary",(e=>t.collect(e,this.qn)))}}async function eh(t,e){const n=da(t);let s=n.An,i=n.Wn;const r=await n.persistence.runTransaction("Handle user change","readonly",(t=>{let r;return n.An.getAllMutationBatches(t).next((o=>(r=o,s=n.persistence.getMutationQueue(e),i=new Xl(n.Qn,s,n.persistence.getIndexManager()),s.getAllMutationBatches(t)))).next((e=>{const n=[],s=[];let o=Mu();for(const t of r){n.push(t.batchId);for(const e of t.mutations)o=o.add(e.key)}for(const t of e){s.push(t.batchId);for(const e of t.mutations)o=o.add(e.key)}return i.vn(t,o).next((t=>({Gn:t,removedBatchIds:n,addedBatchIds:s})))}))}));return n.An=s,n.Wn=i,n.Un.Fn(n.Wn),r}function nh(t){const e=da(t);return e.persistence.runTransaction("Get last remote snapshot version","readonly",(t=>e.He.getLastRemoteSnapshotVersion(t)))}function sh(t,e){const n=da(t);return n.persistence.runTransaction("Get next mutation batch","readonly",(t=>(void 0===e&&(e=-1),n.An.getNextMutationBatchAfterBatchId(t,e))))}async function ih(t,e,n){const s=da(t),i=s.qn.get(e),r=n?"readwrite":"readwrite-primary";try{n||await s.persistence.runTransaction("Release target",r,(t=>s.persistence.referenceDelegate.removeTarget(t,i)))}catch(t){if(!Vl(t))throw t;oa("LocalStore",`Failed to update sequence numbers for target ${e}: ${t}`)}s.qn=s.qn.remove(e),s.Kn.delete(i.target)}function rh(t,e,n){const s=da(t);let i=Na.min(),r=Mu();return s.persistence.runTransaction("Execute query","readonly",(t=>function(t,e,n){const s=da(t),i=s.Kn.get(n);return void 0!==i?Fl.resolve(s.qn.get(i)):s.He.getTargetData(e,n)}(s,t,xc(e)).next((e=>{if(e)return i=e.lastLimboFreeSnapshotVersion,s.He.getMatchingKeysForTargetId(t,e.targetId).next((t=>{r=t}))})).next((()=>s.Un.getDocumentsMatchingQuery(t,e,n?i:Na.min(),n?r:Mu()))).next((t=>({documents:t,zn:r})))))}class oh{constructor(t){this.k=t,this.Xn=new Map,this.Zn=new Map}getBundleMetadata(t,e){return Fl.resolve(this.Xn.get(e))}saveBundleMetadata(t,e){var n;return this.Xn.set(e.id,{id:(n=e).id,version:n.version,createTime:Zu(n.createTime)}),Fl.resolve()}getNamedQuery(t,e){return Fl.resolve(this.Zn.get(e))}saveNamedQuery(t,e){return this.Zn.set(e.name,function(t){return{name:t.name,query:$l(t.bundledQuery),readTime:Zu(t.readTime)}}(e)),Fl.resolve()}}class ah{constructor(){this.ts=new Cu(ch.es),this.ns=new Cu(ch.ss)}isEmpty(){return this.ts.isEmpty()}addReference(t,e){const n=new ch(t,e);this.ts=this.ts.add(n),this.ns=this.ns.add(n)}rs(t,e){t.forEach((t=>this.addReference(t,e)))}removeReference(t,e){this.os(new ch(t,e))}cs(t,e){t.forEach((t=>this.removeReference(t,e)))}us(t){const e=new Wa(new Pa([])),n=new ch(e,t),s=new ch(e,t+1),i=[];return this.ns.forEachInRange([n,s],(t=>{this.os(t),i.push(t.key)})),i}hs(){this.ts.forEach((t=>this.os(t)))}os(t){this.ts=this.ts.delete(t),this.ns=this.ns.delete(t)}ls(t){const e=new Wa(new Pa([])),n=new ch(e,t),s=new ch(e,t+1);let i=Mu();return this.ns.forEachInRange([n,s],(t=>{i=i.add(t.key)})),i}containsKey(t){const e=new ch(t,0),n=this.ts.firstAfterOrEqual(e);return null!==n&&t.isEqual(n.key)}}class ch{constructor(t,e){this.key=t,this.fs=e}static es(t,e){return Wa.comparator(t.key,e.key)||ka(t.fs,e.fs)}static ss(t,e){return ka(t.fs,e.fs)||Wa.comparator(t.key,e.key)}}class uh{constructor(t,e){this.Jt=t,this.referenceDelegate=e,this.An=[],this.ds=1,this.ws=new Cu(ch.es)}checkEmpty(t){return Fl.resolve(0===this.An.length)}addMutationBatch(t,e,n,s){const i=this.ds;this.ds++,this.An.length>0&&this.An[this.An.length-1];const r=new ql(i,e,n,s);this.An.push(r);for(const e of s)this.ws=this.ws.add(new ch(e.key,i)),this.Jt.addToCollectionParentIndex(t,e.key.path.popLast());return Fl.resolve(r)}lookupMutationBatch(t,e){return Fl.resolve(this._s(e))}getNextMutationBatchAfterBatchId(t,e){const n=e+1,s=this.gs(n),i=s<0?0:s;return Fl.resolve(this.An.length>i?this.An[i]:null)}getHighestUnacknowledgedBatchId(){return Fl.resolve(0===this.An.length?-1:this.ds-1)}getAllMutationBatches(t){return Fl.resolve(this.An.slice())}getAllMutationBatchesAffectingDocumentKey(t,e){const n=new ch(e,0),s=new ch(e,Number.POSITIVE_INFINITY),i=[];return this.ws.forEachInRange([n,s],(t=>{const e=this._s(t.fs);i.push(e)})),Fl.resolve(i)}getAllMutationBatchesAffectingDocumentKeys(t,e){let n=new Cu(ka);return e.forEach((t=>{const e=new ch(t,0),s=new ch(t,Number.POSITIVE_INFINITY);this.ws.forEachInRange([e,s],(t=>{n=n.add(t.fs)}))})),Fl.resolve(this.ys(n))}getAllMutationBatchesAffectingQuery(t,e){const n=e.path,s=n.length+1;let i=n;Wa.isDocumentKey(i)||(i=i.child(""));const r=new ch(new Wa(i),0);let o=new Cu(ka);return this.ws.forEachWhile((t=>{const e=t.key.path;return!!n.isPrefixOf(e)&&(e.length===s&&(o=o.add(t.fs)),!0)}),r),Fl.resolve(this.ys(o))}ys(t){const e=[];return t.forEach((t=>{const n=this._s(t);null!==n&&e.push(n)})),e}removeMutationBatch(t,e){ha(0===this.ps(e.batchId,"removed")),this.An.shift();let n=this.ws;return Fl.forEach(e.mutations,(s=>{const i=new ch(s.key,e.batchId);return n=n.delete(i),this.referenceDelegate.markPotentiallyOrphaned(t,s.key)})).next((()=>{this.ws=n}))}ee(t){}containsKey(t,e){const n=new ch(e,0),s=this.ws.firstAfterOrEqual(n);return Fl.resolve(e.isEqual(s&&s.key))}performConsistencyCheck(t){return this.An.length,Fl.resolve()}ps(t,e){return this.gs(t)}gs(t){return 0===this.An.length?0:t-this.An[0].batchId}_s(t){const e=this.gs(t);return e<0||e>=this.An.length?null:this.An[e]}}class lh{constructor(t,e){this.Jt=t,this.Ts=e,this.docs=new Tu(Wa.comparator),this.size=0}addEntry(t,e,n){const s=e.key,i=this.docs.get(s),r=i?i.size:0,o=this.Ts(e);return this.docs=this.docs.insert(s,{document:e.clone(),size:o,readTime:n}),this.size+=o-r,this.Jt.addToCollectionParentIndex(t,s.path.popLast())}removeEntry(t){const e=this.docs.get(t);e&&(this.docs=this.docs.remove(t),this.size-=e.size)}getEntry(t,e){const n=this.docs.get(e);return Fl.resolve(n?n.document.clone():lc.newInvalidDocument(e))}getEntries(t,e){let n=Ru();return e.forEach((t=>{const e=this.docs.get(t);n=n.insert(t,e?e.document.clone():lc.newInvalidDocument(t))})),Fl.resolve(n)}getDocumentsMatchingQuery(t,e,n){let s=Ru();const i=new Wa(e.path.child("")),r=this.docs.getIteratorFrom(i);for(;r.hasNext();){const{key:t,value:{document:i,readTime:o}}=r.getNext();if(!e.path.isPrefixOf(t.path))break;o.compareTo(n)<=0||qc(e,i)&&(s=s.insert(i.key,i.clone()))}return Fl.resolve(s)}Es(t,e){return Fl.forEach(this.docs,(t=>e(t)))}newChangeBuffer(t){return new hh(this)}getSize(t){return Fl.resolve(this.size)}}class hh extends class{constructor(){this.changes=new Ql((t=>t.toString()),((t,e)=>t.isEqual(e))),this.changesApplied=!1}getReadTime(t){const e=this.changes.get(t);return e?e.readTime:Na.min()}addEntry(t,e){this.assertNotApplied(),this.changes.set(t.key,{document:t,readTime:e})}removeEntry(t,e=null){this.assertNotApplied(),this.changes.set(t,{document:lc.newInvalidDocument(t),readTime:e})}getEntry(t,e){this.assertNotApplied();const n=this.changes.get(e);return void 0!==n?Fl.resolve(n.document):this.getFromCache(t,e)}getEntries(t,e){return this.getAllFromCache(t,e)}apply(t){return this.assertNotApplied(),this.changesApplied=!0,this.applyChanges(t)}assertNotApplied(){}}{constructor(t){super(),this.De=t}applyChanges(t){const e=[];return this.changes.forEach(((n,s)=>{s.document.isValidDocument()?e.push(this.De.addEntry(t,s.document,this.getReadTime(n))):this.De.removeEntry(n)})),Fl.waitFor(e)}getFromCache(t,e){return this.De.getEntry(t,e)}getAllFromCache(t,e){return this.De.getEntries(t,e)}}class dh{constructor(t){this.persistence=t,this.Is=new Ql((t=>fc(t)),pc),this.lastRemoteSnapshotVersion=Na.min(),this.highestTargetId=0,this.As=0,this.Rs=new ah,this.targetCount=0,this.Ps=Wl.ie()}forEachTarget(t,e){return this.Is.forEach(((t,n)=>e(n))),Fl.resolve()}getLastRemoteSnapshotVersion(t){return Fl.resolve(this.lastRemoteSnapshotVersion)}getHighestSequenceNumber(t){return Fl.resolve(this.As)}allocateTargetId(t){return this.highestTargetId=this.Ps.next(),Fl.resolve(this.highestTargetId)}setTargetsMetadata(t,e,n){return n&&(this.lastRemoteSnapshotVersion=n),e>this.As&&(this.As=e),Fl.resolve()}ce(t){this.Is.set(t.target,t);const e=t.targetId;e>this.highestTargetId&&(this.Ps=new Wl(e),this.highestTargetId=e),t.sequenceNumber>this.As&&(this.As=t.sequenceNumber)}addTargetData(t,e){return this.ce(e),this.targetCount+=1,Fl.resolve()}updateTargetData(t,e){return this.ce(e),Fl.resolve()}removeTargetData(t,e){return this.Is.delete(e.target),this.Rs.us(e.targetId),this.targetCount-=1,Fl.resolve()}removeTargets(t,e,n){let s=0;const i=[];return this.Is.forEach(((r,o)=>{o.sequenceNumber<=e&&null===n.get(o.targetId)&&(this.Is.delete(r),i.push(this.removeMatchingKeysForTargetId(t,o.targetId)),s++)})),Fl.waitFor(i).next((()=>s))}getTargetCount(t){return Fl.resolve(this.targetCount)}getTargetData(t,e){const n=this.Is.get(e)||null;return Fl.resolve(n)}addMatchingKeys(t,e,n){return this.Rs.rs(e,n),Fl.resolve()}removeMatchingKeys(t,e,n){this.Rs.cs(e,n);const s=this.persistence.referenceDelegate,i=[];return s&&e.forEach((e=>{i.push(s.markPotentiallyOrphaned(t,e))})),Fl.waitFor(i)}removeMatchingKeysForTargetId(t,e){return this.Rs.us(e),Fl.resolve()}getMatchingKeysForTargetId(t,e){const n=this.Rs.ls(e);return Fl.resolve(n)}containsKey(t,e){return Fl.resolve(this.Rs.containsKey(e))}}class fh{constructor(t,e){this.bs={},this.Be=new _a(0),this.Ue=!1,this.Ue=!0,this.referenceDelegate=t(this),this.He=new dh(this),this.Jt=new Kl,this.Je=function(t,e){return new lh(t,e)}(this.Jt,(t=>this.referenceDelegate.vs(t))),this.k=new Hl(e),this.Ye=new oh(this.k)}start(){return Promise.resolve()}shutdown(){return this.Ue=!1,Promise.resolve()}get started(){return this.Ue}setDatabaseDeletedListener(){}setNetworkEnabled(){}getIndexManager(){return this.Jt}getMutationQueue(t){let e=this.bs[t.toKey()];return e||(e=new uh(this.Jt,this.referenceDelegate),this.bs[t.toKey()]=e),e}getTargetCache(){return this.He}getRemoteDocumentCache(){return this.Je}getBundleCache(){return this.Ye}runTransaction(t,e,n){oa("MemoryPersistence","Starting transaction:",t);const s=new ph(this.Be.next());return this.referenceDelegate.Vs(),n(s).next((t=>this.referenceDelegate.Ss(s).next((()=>t)))).toPromise().then((t=>(s.raiseOnCommittedEvent(),t)))}Ds(t,e){return Fl.or(Object.values(this.bs).map((n=>()=>n.containsKey(t,e))))}}class ph extends class{constructor(){this.onCommittedListeners=[]}addOnCommittedListener(t){this.onCommittedListeners.push(t)}raiseOnCommittedEvent(){this.onCommittedListeners.forEach((t=>t()))}}{constructor(t){super(),this.currentSequenceNumber=t}}class mh{constructor(t){this.persistence=t,this.Cs=new ah,this.Ns=null}static ks(t){return new mh(t)}get xs(){if(this.Ns)return this.Ns;throw la()}addReference(t,e,n){return this.Cs.addReference(n,e),this.xs.delete(n.toString()),Fl.resolve()}removeReference(t,e,n){return this.Cs.removeReference(n,e),this.xs.add(n.toString()),Fl.resolve()}markPotentiallyOrphaned(t,e){return this.xs.add(e.toString()),Fl.resolve()}removeTarget(t,e){this.Cs.us(e.targetId).forEach((t=>this.xs.add(t.toString())));const n=this.persistence.getTargetCache();return n.getMatchingKeysForTargetId(t,e.targetId).next((t=>{t.forEach((t=>this.xs.add(t.toString())))})).next((()=>n.removeTargetData(t,e)))}Vs(){this.Ns=new Set}Ss(t){const e=this.persistence.getRemoteDocumentCache().newChangeBuffer();return Fl.forEach(this.xs,(n=>{const s=Wa.fromPath(n);return this.$s(t,s).next((t=>{t||e.removeEntry(s)}))})).next((()=>(this.Ns=null,e.apply(t))))}updateLimboDocument(t,e){return this.$s(t,e).next((t=>{t?this.xs.delete(e.toString()):this.xs.add(e.toString())}))}vs(t){return 0}$s(t,e){return Fl.or([()=>Fl.resolve(this.Cs.containsKey(e)),()=>this.persistence.getTargetCache().containsKey(t,e),()=>this.persistence.Ds(t,e)])}}class gh{constructor(){this.activeTargetIds=Uu()}Ms(t){this.activeTargetIds=this.activeTargetIds.add(t)}Ls(t){this.activeTargetIds=this.activeTargetIds.delete(t)}Os(){const t={activeTargetIds:this.activeTargetIds.toArray(),updateTimeMs:Date.now()};return JSON.stringify(t)}}class yh{constructor(){this.pi=new gh,this.Ti={},this.onlineStateHandler=null,this.sequenceNumberHandler=null}addPendingMutation(t){}updateMutationState(t,e,n){}addLocalQueryTarget(t){return this.pi.Ms(t),this.Ti[t]||"not-current"}updateQueryState(t,e,n){this.Ti[t]=e}removeLocalQueryTarget(t){this.pi.Ls(t)}isLocalQueryTarget(t){return this.pi.activeTargetIds.has(t)}clearQueryState(t){delete this.Ti[t]}getAllActiveQueryTargets(){return this.pi.activeTargetIds}isActiveQueryTarget(t){return this.pi.activeTargetIds.has(t)}start(){return this.pi=new gh,Promise.resolve()}handleUserChange(t,e,n){}setOnlineState(t){}shutdown(){}writeSequenceNumber(t){}notifyBundleLoaded(){}}class vh{Ei(t){}shutdown(){}}class wh{constructor(){this.Ii=()=>this.Ai(),this.Ri=()=>this.Pi(),this.bi=[],this.vi()}Ei(t){this.bi.push(t)}shutdown(){window.removeEventListener("online",this.Ii),window.removeEventListener("offline",this.Ri)}vi(){window.addEventListener("online",this.Ii),window.addEventListener("offline",this.Ri)}Ai(){oa("ConnectivityMonitor","Network connectivity changed: AVAILABLE");for(const t of this.bi)t(0)}Pi(){oa("ConnectivityMonitor","Network connectivity changed: UNAVAILABLE");for(const t of this.bi)t(1)}static bt(){return"undefined"!=typeof window&&void 0!==window.addEventListener&&void 0!==window.removeEventListener}}const Eh={BatchGetDocuments:"batchGet",Commit:"commit",RunQuery:"runQuery"};class Ih{constructor(t){this.Vi=t.Vi,this.Si=t.Si}Di(t){this.Ci=t}Ni(t){this.ki=t}onMessage(t){this.xi=t}close(){this.Si()}send(t){this.Vi(t)}$i(){this.Ci()}Fi(t){this.ki(t)}Oi(t){this.xi(t)}}class bh extends class{constructor(t){this.databaseInfo=t,this.databaseId=t.databaseId;const e=t.ssl?"https":"http";this.Mi=e+"://"+t.host,this.Li="projects/"+this.databaseId.projectId+"/databases/"+this.databaseId.database+"/documents"}Bi(t,e,n,s,i){const r=this.Ui(t,e);oa("RestConnection","Sending: ",r,n);const o={};return this.qi(o,s,i),this.Ki(t,r,o,n).then((t=>(oa("RestConnection","Received: ",t),t)),(e=>{throw ca("RestConnection",`${t} failed with error: `,e,"url: ",r,"request:",n),e}))}ji(t,e,n,s,i){return this.Bi(t,e,n,s,i)}qi(t,e,n){t["X-Goog-Api-Client"]="gl-js/ fire/"+sa,t["Content-Type"]="text/plain",this.databaseInfo.appId&&(t["X-Firebase-GMPID"]=this.databaseInfo.appId),e&&e.headers.forEach(((e,n)=>t[n]=e)),n&&n.headers.forEach(((e,n)=>t[n]=e))}Ui(t,e){const n=Eh[t];return`${this.Mi}/v1/${e}:${n}`}}{constructor(t){super(t),this.forceLongPolling=t.forceLongPolling,this.autoDetectLongPolling=t.autoDetectLongPolling,this.useFetchStreams=t.useFetchStreams}Ki(t,e,n,s){return new Promise(((i,r)=>{const o=new ta;o.listenOnce(Jo.COMPLETE,(()=>{try{switch(o.getLastErrorCode()){case Wo.NO_ERROR:const e=o.getResponseJson();oa("Connection","XHR received:",JSON.stringify(e)),i(e);break;case Wo.TIMEOUT:oa("Connection",'RPC "'+t+'" timed out'),r(new pa(fa.DEADLINE_EXCEEDED,"Request time out"));break;case Wo.HTTP_ERROR:const n=o.getStatus();if(oa("Connection",'RPC "'+t+'" failed with status:',n,"response text:",o.getResponseText()),n>0){const t=o.getResponseJson().error;if(t&&t.status&&t.message){const e=function(t){const e=t.toLowerCase().replace(/_/g,"-");return Object.values(fa).indexOf(e)>=0?e:fa.UNKNOWN}(t.status);r(new pa(e,t.message))}else r(new pa(fa.UNKNOWN,"Server responded with status "+o.getStatus()))}else r(new pa(fa.UNAVAILABLE,"Connection failed."));break;default:la()}}finally{oa("Connection",'RPC "'+t+'" completed.')}}));const a=JSON.stringify(s);o.send(e,"POST",a,n,15)}))}Qi(t,e,n){const s=[this.Mi,"/","google.firestore.v1.Firestore","/",t,"/channel"],i=zo(),r=Go(),o={httpSessionIdParam:"gsessionid",initMessageHeaders:{},messageUrlParams:{database:`projects/${this.databaseId.projectId}/databases/${this.databaseId.database}`},sendRawJson:!0,supportsCrossDomainXhr:!0,internalChannelParams:{forwardChannelRequestTimeoutMs:6e5},forceLongPolling:this.forceLongPolling,detectBufferingProxy:this.autoDetectLongPolling};this.useFetchStreams&&(o.xmlHttpFactory=new Yo({})),this.qi(o.initMessageHeaders,e,n),T()||k()||_().indexOf("Electron/")>=0||C()||_().indexOf("MSAppHost/")>=0||S()||(o.httpHeadersOverwriteParam="$httpHeaders");const a=s.join("");oa("Connection","Creating WebChannel: "+a,o);const c=i.createWebChannel(a,o);let u=!1,l=!1;const h=new Ih({Vi:t=>{l?oa("Connection","Not sending because WebChannel is closed:",t):(u||(oa("Connection","Opening WebChannel transport."),c.open(),u=!0),oa("Connection","WebChannel sending:",t),c.send(t))},Si:()=>c.close()}),d=(t,e,n)=>{t.listen(e,(t=>{try{n(t)}catch(t){setTimeout((()=>{throw t}),0)}}))};return d(c,Zo.EventType.OPEN,(()=>{l||oa("Connection","WebChannel transport opened.")})),d(c,Zo.EventType.CLOSE,(()=>{l||(l=!0,oa("Connection","WebChannel transport closed"),h.Fi())})),d(c,Zo.EventType.ERROR,(t=>{l||(l=!0,ca("Connection","WebChannel transport errored:",t),h.Fi(new pa(fa.UNAVAILABLE,"The operation could not be completed")))})),d(c,Zo.EventType.MESSAGE,(t=>{var e;if(!l){const n=t.data[0];ha(!!n);const s=n,i=s.error||(null===(e=s[0])||void 0===e?void 0:e.error);if(i){oa("Connection","WebChannel received error:",i);const t=i.status;let e=function(t){const e=Iu[t];if(void 0!==e)return _u(e)}(t),n=i.message;void 0===e&&(e=fa.INTERNAL,n="Unknown error status: "+t+" with message "+i.message),l=!0,h.Fi(new pa(e,n)),c.close()}else oa("Connection","WebChannel received:",n),h.Oi(n)}})),d(r,Qo.STAT_EVENT,(t=>{t.stat===Xo.PROXY?oa("Connection","Detected buffering proxy"):t.stat===Xo.NOPROXY&&oa("Connection","Detected no buffering proxy")})),setTimeout((()=>{h.$i()}),0),h}}function _h(){return"undefined"!=typeof document?document:null}function Th(t){return new Ju(t,!0)}class Sh{constructor(t,e,n=1e3,s=1.5,i=6e4){this.Oe=t,this.timerId=e,this.Wi=n,this.Gi=s,this.zi=i,this.Hi=0,this.Ji=null,this.Yi=Date.now(),this.reset()}reset(){this.Hi=0}Xi(){this.Hi=this.zi}Zi(t){this.cancel();const e=Math.floor(this.Hi+this.tr()),n=Math.max(0,Date.now()-this.Yi),s=Math.max(0,e-n);s>0&&oa("ExponentialBackoff",`Backing off for ${s} ms (base delay: ${this.Hi} ms, delay with jitter: ${e} ms, last attempt: ${n} ms ago)`),this.Ji=this.Oe.enqueueAfterDelay(this.timerId,s,(()=>(this.Yi=Date.now(),t()))),this.Hi*=this.Gi,this.Hi<this.Wi&&(this.Hi=this.Wi),this.Hi>this.zi&&(this.Hi=this.zi)}er(){null!==this.Ji&&(this.Ji.skipDelay(),this.Ji=null)}cancel(){null!==this.Ji&&(this.Ji.cancel(),this.Ji=null)}tr(){return(Math.random()-.5)*this.Hi}}class kh{constructor(t,e,n,s,i,r,o,a){this.Oe=t,this.nr=n,this.sr=s,this.ir=i,this.authCredentialsProvider=r,this.appCheckCredentialsProvider=o,this.listener=a,this.state=0,this.rr=0,this.ar=null,this.cr=null,this.stream=null,this.ur=new Sh(t,e)}hr(){return 1===this.state||5===this.state||this.lr()}lr(){return 2===this.state||3===this.state}start(){4!==this.state?this.auth():this.dr()}async stop(){this.hr()&&await this.close(0)}wr(){this.state=0,this.ur.reset()}_r(){this.lr()&&null===this.ar&&(this.ar=this.Oe.enqueueAfterDelay(this.nr,6e4,(()=>this.mr())))}gr(t){this.yr(),this.stream.send(t)}async mr(){if(this.lr())return this.close(0)}yr(){this.ar&&(this.ar.cancel(),this.ar=null)}pr(){this.cr&&(this.cr.cancel(),this.cr=null)}async close(t,e){this.yr(),this.pr(),this.ur.cancel(),this.rr++,4!==t?this.ur.reset():e&&e.code===fa.RESOURCE_EXHAUSTED?(aa(e.toString()),aa("Using maximum backoff delay to prevent overloading the backend."),this.ur.Xi()):e&&e.code===fa.UNAUTHENTICATED&&3!==this.state&&(this.authCredentialsProvider.invalidateToken(),this.appCheckCredentialsProvider.invalidateToken()),null!==this.stream&&(this.Tr(),this.stream.close(),this.stream=null),this.state=t,await this.listener.Ni(e)}Tr(){}auth(){this.state=1;const t=this.Er(this.rr),e=this.rr;Promise.all([this.authCredentialsProvider.getToken(),this.appCheckCredentialsProvider.getToken()]).then((([t,n])=>{this.rr===e&&this.Ir(t,n)}),(e=>{t((()=>{const t=new pa(fa.UNKNOWN,"Fetching auth token failed: "+e.message);return this.Ar(t)}))}))}Ir(t,e){const n=this.Er(this.rr);this.stream=this.Rr(t,e),this.stream.Di((()=>{n((()=>(this.state=2,this.cr=this.Oe.enqueueAfterDelay(this.sr,1e4,(()=>(this.lr()&&(this.state=3),Promise.resolve()))),this.listener.Di())))})),this.stream.Ni((t=>{n((()=>this.Ar(t)))})),this.stream.onMessage((t=>{n((()=>this.onMessage(t)))}))}dr(){this.state=5,this.ur.Zi((async()=>{this.state=0,this.start()}))}Ar(t){return oa("PersistentStream",`close with error: ${t}`),this.stream=null,this.close(4,t)}Er(t){return e=>{this.Oe.enqueueAndForget((()=>this.rr===t?e():(oa("PersistentStream","stream callback skipped by getCloseGuardedDispatcher."),Promise.resolve())))}}}class Ch extends kh{constructor(t,e,n,s,i,r){super(t,"listen_stream_connection_backoff","listen_stream_idle","health_check_timeout",e,n,s,r),this.k=i}Rr(t,e){return this.ir.Qi("Listen",t,e)}onMessage(t){this.ur.reset();const e=function(t,e){let n;if("targetChange"in e){e.targetChange;const s=function(t){return"NO_CHANGE"===t?0:"ADD"===t?1:"REMOVE"===t?2:"CURRENT"===t?3:"RESET"===t?4:la()}(e.targetChange.targetChangeType||"NO_CHANGE"),i=e.targetChange.targetIds||[],r=function(t,e){return t.C?(ha(void 0===e||"string"==typeof e),Fa.fromBase64String(e||"")):(ha(void 0===e||e instanceof Uint8Array),Fa.fromUint8Array(e||new Uint8Array))}(t,e.targetChange.resumeToken),o=e.targetChange.cause,a=o&&function(t){const e=void 0===t.code?fa.UNKNOWN:_u(t.code);return new pa(e,t.message||"")}(o);n=new Bu(s,i,r,a||null)}else if("documentChange"in e){e.documentChange;const s=e.documentChange;s.document,s.document.name,s.document.updateTime;const i=sl(t,s.document.name),r=Zu(s.document.updateTime),o=new cc({mapValue:{fields:s.document.fields}}),a=lc.newFoundDocument(i,r,o),c=s.targetIds||[],u=s.removedTargetIds||[];n=new qu(c,u,a.key,a)}else if("documentDelete"in e){e.documentDelete;const s=e.documentDelete;s.document;const i=sl(t,s.document),r=s.readTime?Zu(s.readTime):Na.min(),o=lc.newNoDocument(i,r),a=s.removedTargetIds||[];n=new qu([],a,o.key,o)}else if("documentRemove"in e){e.documentRemove;const s=e.documentRemove;s.document;const i=sl(t,s.document),r=s.removedTargetIds||[];n=new qu([],r,i,null)}else{if(!("filter"in e))return la();{e.filter;const t=e.filter;t.targetId;const s=t.count||0,i=new Eu(s),r=t.targetId;n=new ju(r,i)}}return n}(this.k,t),n=function(t){if(!("targetChange"in t))return Na.min();const e=t.targetChange;return e.targetIds&&e.targetIds.length?Na.min():e.readTime?Zu(e.readTime):Na.min()}(t);return this.listener.Pr(e,n)}br(t){const e={};e.database=rl(this.k),e.addTarget=function(t,e){let n;const s=e.target;return n=mc(s)?{documents:cl(t,s)}:{query:ul(t,s)},n.targetId=e.targetId,e.resumeToken.approximateByteSize()>0?n.resumeToken=Xu(t,e.resumeToken):e.snapshotVersion.compareTo(Na.min())>0&&(n.readTime=Qu(t,e.snapshotVersion.toTimestamp())),n}(this.k,t);const n=function(t,e){const n=function(t,e){switch(e){case 0:return null;case 1:return"existence-filter-mismatch";case 2:return"limbo-document";default:return la()}}(0,e.purpose);return null==n?null:{"goog-listen-tags":n}}(this.k,t);n&&(e.labels=n),this.gr(e)}vr(t){const e={};e.database=rl(this.k),e.removeTarget=t,this.gr(e)}}class Ah extends kh{constructor(t,e,n,s,i,r){super(t,"write_stream_connection_backoff","write_stream_idle","health_check_timeout",e,n,s,r),this.k=i,this.Vr=!1}get Sr(){return this.Vr}start(){this.Vr=!1,this.lastStreamToken=void 0,super.start()}Tr(){this.Vr&&this.Dr([])}Rr(t,e){return this.ir.Qi("Write",t,e)}onMessage(t){if(ha(!!t.streamToken),this.lastStreamToken=t.streamToken,this.Vr){this.ur.reset();const e=function(t,e){return t&&t.length>0?(ha(void 0!==e),t.map((t=>function(t,e){let n=t.updateTime?Zu(t.updateTime):Zu(e);return n.isEqual(Na.min())&&(n=Zu(e)),new iu(n,t.transformResults||[])}(t,e)))):[]}(t.writeResults,t.commitTime),n=Zu(t.commitTime);return this.listener.Cr(n,e)}return ha(!t.writeResults||0===t.writeResults.length),this.Vr=!0,this.listener.Nr()}kr(){const t={};t.database=rl(this.k),this.gr(t)}Dr(t){const e={streamToken:this.lastStreamToken,writes:t.map((t=>function(t,e){let n;if(e instanceof fu)n={update:al(t,e.key,e.value)};else if(e instanceof vu)n={delete:nl(t,e.key)};else if(e instanceof pu)n={update:al(t,e.key,e.data),updateMask:El(e.fieldMask)};else{if(!(e instanceof wu))return la();n={verify:nl(t,e.key)}}return e.fieldTransforms.length>0&&(n.updateTransforms=e.fieldTransforms.map((t=>function(t,e){const n=e.transform;if(n instanceof Qc)return{fieldPath:e.field.canonicalString(),setToServerValue:"REQUEST_TIME"};if(n instanceof Xc)return{fieldPath:e.field.canonicalString(),appendMissingElements:{values:n.elements}};if(n instanceof Zc)return{fieldPath:e.field.canonicalString(),removeAllFromArray:{values:n.elements}};if(n instanceof eu)return{fieldPath:e.field.canonicalString(),increment:n.N};throw la()}(0,t)))),e.precondition.isNone||(n.currentDocument=function(t,e){return void 0!==e.updateTime?{updateTime:Yu(t,e.updateTime)}:void 0!==e.exists?{exists:e.exists}:la()}(t,e.precondition)),n}(this.k,t)))};this.gr(e)}}class Nh extends class{}{constructor(t,e,n,s){super(),this.authCredentials=t,this.appCheckCredentials=e,this.ir=n,this.k=s,this.$r=!1}Fr(){if(this.$r)throw new pa(fa.FAILED_PRECONDITION,"The client has already been terminated.")}Bi(t,e,n){return this.Fr(),Promise.all([this.authCredentials.getToken(),this.appCheckCredentials.getToken()]).then((([s,i])=>this.ir.Bi(t,e,n,s,i))).catch((t=>{throw"FirebaseError"===t.name?(t.code===fa.UNAUTHENTICATED&&(this.authCredentials.invalidateToken(),this.appCheckCredentials.invalidateToken()),t):new pa(fa.UNKNOWN,t.toString())}))}ji(t,e,n){return this.Fr(),Promise.all([this.authCredentials.getToken(),this.appCheckCredentials.getToken()]).then((([s,i])=>this.ir.ji(t,e,n,s,i))).catch((t=>{throw"FirebaseError"===t.name?(t.code===fa.UNAUTHENTICATED&&(this.authCredentials.invalidateToken(),this.appCheckCredentials.invalidateToken()),t):new pa(fa.UNKNOWN,t.toString())}))}terminate(){this.$r=!0}}class Rh{constructor(t,e){this.asyncQueue=t,this.onlineStateHandler=e,this.state="Unknown",this.Or=0,this.Mr=null,this.Lr=!0}Br(){0===this.Or&&(this.Ur("Unknown"),this.Mr=this.asyncQueue.enqueueAfterDelay("online_state_timeout",1e4,(()=>(this.Mr=null,this.qr("Backend didn't respond within 10 seconds."),this.Ur("Offline"),Promise.resolve()))))}Kr(t){"Online"===this.state?this.Ur("Unknown"):(this.Or++,this.Or>=1&&(this.jr(),this.qr(`Connection failed 1 times. Most recent error: ${t.toString()}`),this.Ur("Offline")))}set(t){this.jr(),this.Or=0,"Online"===t&&(this.Lr=!1),this.Ur(t)}Ur(t){t!==this.state&&(this.state=t,this.onlineStateHandler(t))}qr(t){const e=`Could not reach Cloud Firestore backend. ${t}\nThis typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.`;this.Lr?(aa(e),this.Lr=!1):oa("OnlineStateTracker",e)}jr(){null!==this.Mr&&(this.Mr.cancel(),this.Mr=null)}}class Dh{constructor(t,e,n,s,i){this.localStore=t,this.datastore=e,this.asyncQueue=n,this.remoteSyncer={},this.Qr=[],this.Wr=new Map,this.Gr=new Set,this.zr=[],this.Hr=i,this.Hr.Ei((t=>{n.enqueueAndForget((async()=>{qh(this)&&(oa("RemoteStore","Restarting streams for network reachability change."),await async function(t){const e=da(t);e.Gr.add(4),await Oh(e),e.Jr.set("Unknown"),e.Gr.delete(4),await Lh(e)}(this))}))})),this.Jr=new Rh(n,s)}}async function Lh(t){if(qh(t))for(const e of t.zr)await e(!0)}async function Oh(t){for(const e of t.zr)await e(!1)}function Ph(t,e){const n=da(t);n.Wr.has(e.targetId)||(n.Wr.set(e.targetId,e),Vh(n)?Fh(n):nd(n).lr()&&xh(n,e))}function Mh(t,e){const n=da(t),s=nd(n);n.Wr.delete(e),s.lr()&&Uh(n,e),0===n.Wr.size&&(s.lr()?s._r():qh(n)&&n.Jr.set("Unknown"))}function xh(t,e){t.Yr.X(e.targetId),nd(t).br(e)}function Uh(t,e){t.Yr.X(e),nd(t).vr(e)}function Fh(t){t.Yr=new $u({getRemoteKeysForTarget:e=>t.remoteSyncer.getRemoteKeysForTarget(e),Et:e=>t.Wr.get(e)||null}),nd(t).start(),t.Jr.Br()}function Vh(t){return qh(t)&&!nd(t).hr()&&t.Wr.size>0}function qh(t){return 0===da(t).Gr.size}function jh(t){t.Yr=void 0}async function Bh(t){t.Wr.forEach(((e,n)=>{xh(t,e)}))}async function Hh(t,e){jh(t),Vh(t)?(t.Jr.Kr(e),Fh(t)):t.Jr.set("Unknown")}async function $h(t,e,n){if(t.Jr.set("Online"),e instanceof Bu&&2===e.state&&e.cause)try{await async function(t,e){const n=e.cause;for(const s of e.targetIds)t.Wr.has(s)&&(await t.remoteSyncer.rejectListen(s,n),t.Wr.delete(s),t.Yr.removeTarget(s))}(t,e)}catch(n){oa("RemoteStore","Failed to remove targets %s: %s ",e.targetIds.join(","),n),await Kh(t,n)}else if(e instanceof qu?t.Yr.ot(e):e instanceof ju?t.Yr.dt(e):t.Yr.ut(e),!n.isEqual(Na.min()))try{const e=await nh(t.localStore);n.compareTo(e)>=0&&await function(t,e){const n=t.Yr.gt(e);return n.targetChanges.forEach(((n,s)=>{if(n.resumeToken.approximateByteSize()>0){const i=t.Wr.get(s);i&&t.Wr.set(s,i.withResumeToken(n.resumeToken,e))}})),n.targetMismatches.forEach((e=>{const n=t.Wr.get(e);if(!n)return;t.Wr.set(e,n.withResumeToken(Fa.EMPTY_BYTE_STRING,n.snapshotVersion)),Uh(t,e);const s=new Bl(n.target,e,1,n.sequenceNumber);xh(t,s)})),t.remoteSyncer.applyRemoteEvent(n)}(t,n)}catch(e){oa("RemoteStore","Failed to raise snapshot:",e),await Kh(t,e)}}async function Kh(t,e,n){if(!Vl(e))throw e;t.Gr.add(1),await Oh(t),t.Jr.set("Offline"),n||(n=()=>nh(t.localStore)),t.asyncQueue.enqueueRetryable((async()=>{oa("RemoteStore","Retrying IndexedDB access"),await n(),t.Gr.delete(1),await Lh(t)}))}function zh(t,e){return e().catch((n=>Kh(t,n,e)))}async function Gh(t){const e=da(t),n=sd(e);let s=e.Qr.length>0?e.Qr[e.Qr.length-1].batchId:-1;for(;Wh(e);)try{const t=await sh(e.localStore,s);if(null===t){0===e.Qr.length&&n._r();break}s=t.batchId,Jh(e,t)}catch(t){await Kh(e,t)}Qh(e)&&Xh(e)}function Wh(t){return qh(t)&&t.Qr.length<10}function Jh(t,e){t.Qr.push(e);const n=sd(t);n.lr()&&n.Sr&&n.Dr(e.mutations)}function Qh(t){return qh(t)&&!sd(t).hr()&&t.Qr.length>0}function Xh(t){sd(t).start()}async function Yh(t){sd(t).kr()}async function Zh(t){const e=sd(t);for(const n of t.Qr)e.Dr(n.mutations)}async function td(t,e,n){const s=t.Qr.shift(),i=jl.from(s,e,n);await zh(t,(()=>t.remoteSyncer.applySuccessfulWrite(i))),await Gh(t)}async function ed(t,e){e&&sd(t).Sr&&await async function(t,e){if(function(t){switch(t){default:return la();case fa.CANCELLED:case fa.UNKNOWN:case fa.DEADLINE_EXCEEDED:case fa.RESOURCE_EXHAUSTED:case fa.INTERNAL:case fa.UNAVAILABLE:case fa.UNAUTHENTICATED:return!1;case fa.INVALID_ARGUMENT:case fa.NOT_FOUND:case fa.ALREADY_EXISTS:case fa.PERMISSION_DENIED:case fa.FAILED_PRECONDITION:case fa.ABORTED:case fa.OUT_OF_RANGE:case fa.UNIMPLEMENTED:case fa.DATA_LOSS:return!0}}(n=e.code)&&n!==fa.ABORTED){const n=t.Qr.shift();sd(t).wr(),await zh(t,(()=>t.remoteSyncer.rejectFailedWrite(n.batchId,e))),await Gh(t)}var n}(t,e),Qh(t)&&Xh(t)}function nd(t){return t.Xr||(t.Xr=function(t,e,n){const s=da(t);return s.Fr(),new Ch(e,s.ir,s.authCredentials,s.appCheckCredentials,s.k,n)}(t.datastore,t.asyncQueue,{Di:Bh.bind(null,t),Ni:Hh.bind(null,t),Pr:$h.bind(null,t)}),t.zr.push((async e=>{e?(t.Xr.wr(),Vh(t)?Fh(t):t.Jr.set("Unknown")):(await t.Xr.stop(),jh(t))}))),t.Xr}function sd(t){return t.Zr||(t.Zr=function(t,e,n){const s=da(t);return s.Fr(),new Ah(e,s.ir,s.authCredentials,s.appCheckCredentials,s.k,n)}(t.datastore,t.asyncQueue,{Di:Yh.bind(null,t),Ni:ed.bind(null,t),Nr:Zh.bind(null,t),Cr:td.bind(null,t)}),t.zr.push((async e=>{e?(t.Zr.wr(),await Gh(t)):(await t.Zr.stop(),t.Qr.length>0&&(oa("RemoteStore",`Stopping write stream with ${t.Qr.length} pending writes`),t.Qr=[]))}))),t.Zr}class id{constructor(t,e,n,s,i){this.asyncQueue=t,this.timerId=e,this.targetTimeMs=n,this.op=s,this.removalCallback=i,this.deferred=new ma,this.then=this.deferred.promise.then.bind(this.deferred.promise),this.deferred.promise.catch((t=>{}))}static createAndSchedule(t,e,n,s,i){const r=Date.now()+n,o=new id(t,e,r,s,i);return o.start(n),o}start(t){this.timerHandle=setTimeout((()=>this.handleDelayElapsed()),t)}skipDelay(){return this.handleDelayElapsed()}cancel(t){null!==this.timerHandle&&(this.clearTimeout(),this.deferred.reject(new pa(fa.CANCELLED,"Operation cancelled"+(t?": "+t:""))))}handleDelayElapsed(){this.asyncQueue.enqueueAndForget((()=>null!==this.timerHandle?(this.clearTimeout(),this.op().then((t=>this.deferred.resolve(t)))):Promise.resolve()))}clearTimeout(){null!==this.timerHandle&&(this.removalCallback(this),clearTimeout(this.timerHandle),this.timerHandle=null)}}function rd(t,e){if(aa("AsyncQueue",`${e}: ${t}`),Vl(t))return new pa(fa.UNAVAILABLE,`${e}: ${t}`);throw t}class od{constructor(t){this.comparator=t?(e,n)=>t(e,n)||Wa.comparator(e.key,n.key):(t,e)=>Wa.comparator(t.key,e.key),this.keyedMap=Lu(),this.sortedSet=new Tu(this.comparator)}static emptySet(t){return new od(t.comparator)}has(t){return null!=this.keyedMap.get(t)}get(t){return this.keyedMap.get(t)}first(){return this.sortedSet.minKey()}last(){return this.sortedSet.maxKey()}isEmpty(){return this.sortedSet.isEmpty()}indexOf(t){const e=this.keyedMap.get(t);return e?this.sortedSet.indexOf(e):-1}get size(){return this.sortedSet.size}forEach(t){this.sortedSet.inorderTraversal(((e,n)=>(t(e),!1)))}add(t){const e=this.delete(t.key);return e.copy(e.keyedMap.insert(t.key,t),e.sortedSet.insert(t,null))}delete(t){const e=this.get(t);return e?this.copy(this.keyedMap.remove(t),this.sortedSet.remove(e)):this}isEqual(t){if(!(t instanceof od))return!1;if(this.size!==t.size)return!1;const e=this.sortedSet.getIterator(),n=t.sortedSet.getIterator();for(;e.hasNext();){const t=e.getNext().key,s=n.getNext().key;if(!t.isEqual(s))return!1}return!0}toString(){const t=[];return this.forEach((e=>{t.push(e.toString())})),0===t.length?"DocumentSet ()":"DocumentSet (\n  "+t.join("  \n")+"\n)"}copy(t,e){const n=new od;return n.comparator=this.comparator,n.keyedMap=t,n.sortedSet=e,n}}class ad{constructor(){this.eo=new Tu(Wa.comparator)}track(t){const e=t.doc.key,n=this.eo.get(e);n?0!==t.type&&3===n.type?this.eo=this.eo.insert(e,t):3===t.type&&1!==n.type?this.eo=this.eo.insert(e,{type:n.type,doc:t.doc}):2===t.type&&2===n.type?this.eo=this.eo.insert(e,{type:2,doc:t.doc}):2===t.type&&0===n.type?this.eo=this.eo.insert(e,{type:0,doc:t.doc}):1===t.type&&0===n.type?this.eo=this.eo.remove(e):1===t.type&&2===n.type?this.eo=this.eo.insert(e,{type:1,doc:n.doc}):0===t.type&&1===n.type?this.eo=this.eo.insert(e,{type:2,doc:t.doc}):la():this.eo=this.eo.insert(e,t)}no(){const t=[];return this.eo.inorderTraversal(((e,n)=>{t.push(n)})),t}}class cd{constructor(t,e,n,s,i,r,o,a){this.query=t,this.docs=e,this.oldDocs=n,this.docChanges=s,this.mutatedKeys=i,this.fromCache=r,this.syncStateChanged=o,this.excludesMetadataChanges=a}static fromInitialDocuments(t,e,n,s){const i=[];return e.forEach((t=>{i.push({type:0,doc:t})})),new cd(t,e,od.emptySet(e),i,n,s,!0,!1)}get hasPendingWrites(){return!this.mutatedKeys.isEmpty()}isEqual(t){if(!(this.fromCache===t.fromCache&&this.syncStateChanged===t.syncStateChanged&&this.mutatedKeys.isEqual(t.mutatedKeys)&&Uc(this.query,t.query)&&this.docs.isEqual(t.docs)&&this.oldDocs.isEqual(t.oldDocs)))return!1;const e=this.docChanges,n=t.docChanges;if(e.length!==n.length)return!1;for(let t=0;t<e.length;t++)if(e[t].type!==n[t].type||!e[t].doc.isEqual(n[t].doc))return!1;return!0}}class ud{constructor(){this.so=void 0,this.listeners=[]}}class ld{constructor(){this.queries=new Ql((t=>Fc(t)),Uc),this.onlineState="Unknown",this.io=new Set}}async function hd(t,e){const n=da(t),s=e.query;let i=!1,r=n.queries.get(s);if(r||(i=!0,r=new ud),i)try{r.so=await n.onListen(s)}catch(t){const n=rd(t,`Initialization of query '${Vc(e.query)}' failed`);return void e.onError(n)}n.queries.set(s,r),r.listeners.push(e),e.ro(n.onlineState),r.so&&e.oo(r.so)&&md(n)}async function dd(t,e){const n=da(t),s=e.query;let i=!1;const r=n.queries.get(s);if(r){const t=r.listeners.indexOf(e);t>=0&&(r.listeners.splice(t,1),i=0===r.listeners.length)}if(i)return n.queries.delete(s),n.onUnlisten(s)}function fd(t,e){const n=da(t);let s=!1;for(const t of e){const e=t.query,i=n.queries.get(e);if(i){for(const e of i.listeners)e.oo(t)&&(s=!0);i.so=t}}s&&md(n)}function pd(t,e,n){const s=da(t),i=s.queries.get(e);if(i)for(const t of i.listeners)t.onError(n);s.queries.delete(e)}function md(t){t.io.forEach((t=>{t.next()}))}class gd{constructor(t,e,n){this.query=t,this.ao=e,this.co=!1,this.uo=null,this.onlineState="Unknown",this.options=n||{}}oo(t){if(!this.options.includeMetadataChanges){const e=[];for(const n of t.docChanges)3!==n.type&&e.push(n);t=new cd(t.query,t.docs,t.oldDocs,e,t.mutatedKeys,t.fromCache,t.syncStateChanged,!0)}let e=!1;return this.co?this.ho(t)&&(this.ao.next(t),e=!0):this.lo(t,this.onlineState)&&(this.fo(t),e=!0),this.uo=t,e}onError(t){this.ao.error(t)}ro(t){this.onlineState=t;let e=!1;return this.uo&&!this.co&&this.lo(this.uo,t)&&(this.fo(this.uo),e=!0),e}lo(t,e){if(!t.fromCache)return!0;const n="Offline"!==e;return!(this.options.wo&&n||t.docs.isEmpty()&&"Offline"!==e)}ho(t){if(t.docChanges.length>0)return!0;const e=this.uo&&this.uo.hasPendingWrites!==t.hasPendingWrites;return!(!t.syncStateChanged&&!e)&&!0===this.options.includeMetadataChanges}fo(t){t=cd.fromInitialDocuments(t.query,t.docs,t.mutatedKeys,t.fromCache),this.co=!0,this.ao.next(t)}}class yd{constructor(t){this.key=t}}class vd{constructor(t){this.key=t}}class wd{constructor(t,e){this.query=t,this.To=e,this.Eo=null,this.current=!1,this.Io=Mu(),this.mutatedKeys=Mu(),this.Ao=jc(t),this.Ro=new od(this.Ao)}get Po(){return this.To}bo(t,e){const n=e?e.vo:new ad,s=e?e.Ro:this.Ro;let i=e?e.mutatedKeys:this.mutatedKeys,r=s,o=!1;const a=Oc(this.query)&&s.size===this.query.limit?s.last():null,c=Pc(this.query)&&s.size===this.query.limit?s.first():null;if(t.inorderTraversal(((t,e)=>{const u=s.get(t),l=qc(this.query,e)?e:null,h=!!u&&this.mutatedKeys.has(u.key),d=!!l&&(l.hasLocalMutations||this.mutatedKeys.has(l.key)&&l.hasCommittedMutations);let f=!1;u&&l?u.data.isEqual(l.data)?h!==d&&(n.track({type:3,doc:l}),f=!0):this.Vo(u,l)||(n.track({type:2,doc:l}),f=!0,(a&&this.Ao(l,a)>0||c&&this.Ao(l,c)<0)&&(o=!0)):!u&&l?(n.track({type:0,doc:l}),f=!0):u&&!l&&(n.track({type:1,doc:u}),f=!0,(a||c)&&(o=!0)),f&&(l?(r=r.add(l),i=d?i.add(t):i.delete(t)):(r=r.delete(t),i=i.delete(t)))})),Oc(this.query)||Pc(this.query))for(;r.size>this.query.limit;){const t=Oc(this.query)?r.last():r.first();r=r.delete(t.key),i=i.delete(t.key),n.track({type:1,doc:t})}return{Ro:r,vo:n,Bn:o,mutatedKeys:i}}Vo(t,e){return t.hasLocalMutations&&e.hasCommittedMutations&&!e.hasLocalMutations}applyChanges(t,e,n){const s=this.Ro;this.Ro=t.Ro,this.mutatedKeys=t.mutatedKeys;const i=t.vo.no();i.sort(((t,e)=>function(t,e){const n=t=>{switch(t){case 0:return 1;case 2:case 3:return 2;case 1:return 0;default:return la()}};return n(t)-n(e)}(t.type,e.type)||this.Ao(t.doc,e.doc))),this.So(n);const r=e?this.Do():[],o=0===this.Io.size&&this.current?1:0,a=o!==this.Eo;return this.Eo=o,0!==i.length||a?{snapshot:new cd(this.query,t.Ro,s,i,t.mutatedKeys,0===o,a,!1),Co:r}:{Co:r}}ro(t){return this.current&&"Offline"===t?(this.current=!1,this.applyChanges({Ro:this.Ro,vo:new ad,mutatedKeys:this.mutatedKeys,Bn:!1},!1)):{Co:[]}}No(t){return!this.To.has(t)&&!!this.Ro.has(t)&&!this.Ro.get(t).hasLocalMutations}So(t){t&&(t.addedDocuments.forEach((t=>this.To=this.To.add(t))),t.modifiedDocuments.forEach((t=>{})),t.removedDocuments.forEach((t=>this.To=this.To.delete(t))),this.current=t.current)}Do(){if(!this.current)return[];const t=this.Io;this.Io=Mu(),this.Ro.forEach((t=>{this.No(t.key)&&(this.Io=this.Io.add(t.key))}));const e=[];return t.forEach((t=>{this.Io.has(t)||e.push(new vd(t))})),this.Io.forEach((n=>{t.has(n)||e.push(new yd(n))})),e}ko(t){this.To=t.zn,this.Io=Mu();const e=this.bo(t.documents);return this.applyChanges(e,!0)}xo(){return cd.fromInitialDocuments(this.query,this.Ro,this.mutatedKeys,0===this.Eo)}}class Ed{constructor(t,e,n){this.query=t,this.targetId=e,this.view=n}}class Id{constructor(t){this.key=t,this.$o=!1}}class bd{constructor(t,e,n,s,i,r){this.localStore=t,this.remoteStore=e,this.eventManager=n,this.sharedClientState=s,this.currentUser=i,this.maxConcurrentLimboResolutions=r,this.Fo={},this.Oo=new Ql((t=>Fc(t)),Uc),this.Mo=new Map,this.Lo=new Set,this.Bo=new Tu(Wa.comparator),this.Uo=new Map,this.qo=new ah,this.Ko={},this.jo=new Map,this.Qo=Wl.re(),this.onlineState="Unknown",this.Wo=void 0}get isPrimaryClient(){return!0===this.Wo}}async function _d(t,e){const n=function(t){const e=da(t);return e.remoteStore.remoteSyncer.applyRemoteEvent=Sd.bind(null,e),e.remoteStore.remoteSyncer.getRemoteKeysForTarget=Vd.bind(null,e),e.remoteStore.remoteSyncer.rejectListen=Cd.bind(null,e),e.Fo.Pr=fd.bind(null,e.eventManager),e.Fo.zo=pd.bind(null,e.eventManager),e}(t);let s,i;const r=n.Oo.get(e);if(r)s=r.targetId,n.sharedClientState.addLocalQueryTarget(s),i=r.view.xo();else{const t=await function(t,e){const n=da(t);return n.persistence.runTransaction("Allocate target","readwrite",(t=>{let s;return n.He.getTargetData(t,e).next((i=>i?(s=i,Fl.resolve(s)):n.He.allocateTargetId(t).next((i=>(s=new Bl(e,i,0,t.currentSequenceNumber),n.He.addTargetData(t,s).next((()=>s)))))))})).then((t=>{const s=n.qn.get(t.targetId);return(null===s||t.snapshotVersion.compareTo(s.snapshotVersion)>0)&&(n.qn=n.qn.insert(t.targetId,t),n.Kn.set(e,t.targetId)),t}))}(n.localStore,xc(e)),r=n.sharedClientState.addLocalQueryTarget(t.targetId);s=t.targetId,i=await async function(t,e,n,s){t.Go=(e,n,s)=>async function(t,e,n,s){let i=e.view.bo(n);i.Bn&&(i=await rh(t.localStore,e.query,!1).then((({documents:t})=>e.view.bo(t,i))));const r=s&&s.targetChanges.get(e.targetId),o=e.view.applyChanges(i,t.isPrimaryClient,r);return Pd(t,e.targetId,o.Co),o.snapshot}(t,e,n,s);const i=await rh(t.localStore,e,!0),r=new wd(e,i.zn),o=r.bo(i.documents),a=Vu.createSynthesizedTargetChangeForCurrentChange(n,s&&"Offline"!==t.onlineState),c=r.applyChanges(o,t.isPrimaryClient,a);Pd(t,n,c.Co);const u=new Ed(e,n,r);return t.Oo.set(e,u),t.Mo.has(n)?t.Mo.get(n).push(e):t.Mo.set(n,[e]),c.snapshot}(n,e,s,"current"===r),n.isPrimaryClient&&Ph(n.remoteStore,t)}return i}async function Td(t,e){const n=da(t),s=n.Oo.get(e),i=n.Mo.get(s.targetId);if(i.length>1)return n.Mo.set(s.targetId,i.filter((t=>!Uc(t,e)))),void n.Oo.delete(e);n.isPrimaryClient?(n.sharedClientState.removeLocalQueryTarget(s.targetId),n.sharedClientState.isActiveQueryTarget(s.targetId)||await ih(n.localStore,s.targetId,!1).then((()=>{n.sharedClientState.clearQueryState(s.targetId),Mh(n.remoteStore,s.targetId),Ld(n,s.targetId)})).catch(Jl)):(Ld(n,s.targetId),await ih(n.localStore,s.targetId,!0))}async function Sd(t,e){const n=da(t);try{const t=await function(t,e){const n=da(t),s=e.snapshotVersion;let i=n.qn;return n.persistence.runTransaction("Apply remote event","readwrite-primary",(t=>{const r=n.Qn.newChangeBuffer({trackRemovals:!0});i=n.qn;const o=[];e.targetChanges.forEach(((e,r)=>{const a=i.get(r);if(!a)return;o.push(n.He.removeMatchingKeys(t,e.removedDocuments,r).next((()=>n.He.addMatchingKeys(t,e.addedDocuments,r))));const c=e.resumeToken;if(c.approximateByteSize()>0){const u=a.withResumeToken(c,s).withSequenceNumber(t.currentSequenceNumber);i=i.insert(r,u),function(t,e,n){return ha(e.resumeToken.approximateByteSize()>0),0===t.resumeToken.approximateByteSize()||e.snapshotVersion.toMicroseconds()-t.snapshotVersion.toMicroseconds()>=3e8||n.addedDocuments.size+n.modifiedDocuments.size+n.removedDocuments.size>0}(a,u,e)&&o.push(n.He.updateTargetData(t,u))}}));let a=Ru();if(e.documentUpdates.forEach(((s,i)=>{e.resolvedLimboDocuments.has(s)&&o.push(n.persistence.referenceDelegate.updateLimboDocument(t,s))})),o.push(function(t,e,n,s,i){let r=Mu();return n.forEach((t=>r=r.add(t))),e.getEntries(t,r).next((t=>{let r=Ru();return n.forEach(((n,o)=>{const a=t.get(n),c=(null==i?void 0:i.get(n))||s;o.isNoDocument()&&o.version.isEqual(Na.min())?(e.removeEntry(n,c),r=r.insert(n,o)):!a.isValidDocument()||o.version.compareTo(a.version)>0||0===o.version.compareTo(a.version)&&a.hasPendingWrites?(e.addEntry(o,c),r=r.insert(n,o)):oa("LocalStore","Ignoring outdated watch update for ",n,". Current version:",a.version," Watch version:",o.version)})),r}))}(t,r,e.documentUpdates,s,void 0).next((t=>{a=t}))),!s.isEqual(Na.min())){const e=n.He.getLastRemoteSnapshotVersion(t).next((e=>n.He.setTargetsMetadata(t,t.currentSequenceNumber,s)));o.push(e)}return Fl.waitFor(o).next((()=>r.apply(t))).next((()=>n.Wn.Vn(t,a))).next((()=>a))})).then((t=>(n.qn=i,t)))}(n.localStore,e);e.targetChanges.forEach(((t,e)=>{const s=n.Uo.get(e);s&&(ha(t.addedDocuments.size+t.modifiedDocuments.size+t.removedDocuments.size<=1),t.addedDocuments.size>0?s.$o=!0:t.modifiedDocuments.size>0?ha(s.$o):t.removedDocuments.size>0&&(ha(s.$o),s.$o=!1))})),await Ud(n,t,e)}catch(t){await Jl(t)}}function kd(t,e,n){const s=da(t);if(s.isPrimaryClient&&0===n||!s.isPrimaryClient&&1===n){const t=[];s.Oo.forEach(((n,s)=>{const i=s.view.ro(e);i.snapshot&&t.push(i.snapshot)})),function(t,e){const n=da(t);n.onlineState=e;let s=!1;n.queries.forEach(((t,n)=>{for(const t of n.listeners)t.ro(e)&&(s=!0)})),s&&md(n)}(s.eventManager,e),t.length&&s.Fo.Pr(t),s.onlineState=e,s.isPrimaryClient&&s.sharedClientState.setOnlineState(e)}}async function Cd(t,e,n){const s=da(t);s.sharedClientState.updateQueryState(e,"rejected",n);const i=s.Uo.get(e),r=i&&i.key;if(r){let t=new Tu(Wa.comparator);t=t.insert(r,lc.newNoDocument(r,Na.min()));const n=Mu().add(r),i=new Fu(Na.min(),new Map,new Cu(ka),t,n);await Sd(s,i),s.Bo=s.Bo.remove(r),s.Uo.delete(e),xd(s)}else await ih(s.localStore,e,!1).then((()=>Ld(s,e,n))).catch(Jl)}async function Ad(t,e){const n=da(t),s=e.batch.batchId;try{const t=await function(t,e){const n=da(t);return n.persistence.runTransaction("Acknowledge batch","readwrite-primary",(t=>{const s=e.batch.keys(),i=n.Qn.newChangeBuffer({trackRemovals:!0});return function(t,e,n,s){const i=n.batch,r=i.keys();let o=Fl.resolve();return r.forEach((t=>{o=o.next((()=>s.getEntry(e,t))).next((e=>{const r=n.docVersions.get(t);ha(null!==r),e.version.compareTo(r)<0&&(i.applyToRemoteDocument(e,n),e.isValidDocument()&&s.addEntry(e,n.commitVersion))}))})),o.next((()=>t.An.removeMutationBatch(e,i)))}(n,t,e,i).next((()=>i.apply(t))).next((()=>n.An.performConsistencyCheck(t))).next((()=>n.Wn.vn(t,s)))}))}(n.localStore,e);Dd(n,s,null),Rd(n,s),n.sharedClientState.updateMutationState(s,"acknowledged"),await Ud(n,t)}catch(t){await Jl(t)}}async function Nd(t,e,n){const s=da(t);try{const t=await function(t,e){const n=da(t);return n.persistence.runTransaction("Reject batch","readwrite-primary",(t=>{let s;return n.An.lookupMutationBatch(t,e).next((e=>(ha(null!==e),s=e.keys(),n.An.removeMutationBatch(t,e)))).next((()=>n.An.performConsistencyCheck(t))).next((()=>n.Wn.vn(t,s)))}))}(s.localStore,e);Dd(s,e,n),Rd(s,e),s.sharedClientState.updateMutationState(e,"rejected",n),await Ud(s,t)}catch(n){await Jl(n)}}function Rd(t,e){(t.jo.get(e)||[]).forEach((t=>{t.resolve()})),t.jo.delete(e)}function Dd(t,e,n){const s=da(t);let i=s.Ko[s.currentUser.toKey()];if(i){const t=i.get(e);t&&(n?t.reject(n):t.resolve(),i=i.remove(e)),s.Ko[s.currentUser.toKey()]=i}}function Ld(t,e,n=null){t.sharedClientState.removeLocalQueryTarget(e);for(const s of t.Mo.get(e))t.Oo.delete(s),n&&t.Fo.zo(s,n);t.Mo.delete(e),t.isPrimaryClient&&t.qo.us(e).forEach((e=>{t.qo.containsKey(e)||Od(t,e)}))}function Od(t,e){t.Lo.delete(e.path.canonicalString());const n=t.Bo.get(e);null!==n&&(Mh(t.remoteStore,n),t.Bo=t.Bo.remove(e),t.Uo.delete(n),xd(t))}function Pd(t,e,n){for(const s of n)s instanceof yd?(t.qo.addReference(s.key,e),Md(t,s)):s instanceof vd?(oa("SyncEngine","Document no longer in limbo: "+s.key),t.qo.removeReference(s.key,e),t.qo.containsKey(s.key)||Od(t,s.key)):la()}function Md(t,e){const n=e.key,s=n.path.canonicalString();t.Bo.get(n)||t.Lo.has(s)||(oa("SyncEngine","New document in limbo: "+n),t.Lo.add(s),xd(t))}function xd(t){for(;t.Lo.size>0&&t.Bo.size<t.maxConcurrentLimboResolutions;){const e=t.Lo.values().next().value;t.Lo.delete(e);const n=new Wa(Pa.fromString(e)),s=t.Qo.next();t.Uo.set(s,new Id(n)),t.Bo=t.Bo.insert(n,s),Ph(t.remoteStore,new Bl(xc(Lc(n.path)),s,2,_a.I))}}async function Ud(t,e,n){const s=da(t),i=[],r=[],o=[];s.Oo.isEmpty()||(s.Oo.forEach(((t,a)=>{o.push(s.Go(a,e,n).then((t=>{if(t){s.isPrimaryClient&&s.sharedClientState.updateQueryState(a.targetId,t.fromCache?"not-current":"current"),i.push(t);const e=Yl.$n(a.targetId,t);r.push(e)}})))})),await Promise.all(o),s.Fo.Pr(i),await async function(t,e){const n=da(t);try{await n.persistence.runTransaction("notifyLocalViewChanges","readwrite",(t=>Fl.forEach(e,(e=>Fl.forEach(e.kn,(s=>n.persistence.referenceDelegate.addReference(t,e.targetId,s))).next((()=>Fl.forEach(e.xn,(s=>n.persistence.referenceDelegate.removeReference(t,e.targetId,s)))))))))}catch(t){if(!Vl(t))throw t;oa("LocalStore","Failed to update sequence numbers: "+t)}for(const t of e){const e=t.targetId;if(!t.fromCache){const t=n.qn.get(e),s=t.snapshotVersion,i=t.withLastLimboFreeSnapshotVersion(s);n.qn=n.qn.insert(e,i)}}}(s.localStore,r))}async function Fd(t,e){const n=da(t);if(!n.currentUser.isEqual(e)){oa("SyncEngine","User change. New user:",e.toKey());const t=await eh(n.localStore,e);n.currentUser=e,function(t,e){t.jo.forEach((t=>{t.forEach((t=>{t.reject(new pa(fa.CANCELLED,"'waitForPendingWrites' promise is rejected due to a user change."))}))})),t.jo.clear()}(n),n.sharedClientState.handleUserChange(e,t.removedBatchIds,t.addedBatchIds),await Ud(n,t.Gn)}}function Vd(t,e){const n=da(t),s=n.Uo.get(e);if(s&&s.$o)return Mu().add(s.key);{let t=Mu();const s=n.Mo.get(e);if(!s)return t;for(const e of s){const s=n.Oo.get(e);t=t.unionWith(s.view.Po)}return t}}function qd(t){const e=da(t);return e.remoteStore.remoteSyncer.applySuccessfulWrite=Ad.bind(null,e),e.remoteStore.remoteSyncer.rejectFailedWrite=Nd.bind(null,e),e}class jd{constructor(){this.synchronizeTabs=!1}async initialize(t){this.k=Th(t.databaseInfo.databaseId),this.sharedClientState=this.Jo(t),this.persistence=this.Yo(t),await this.persistence.start(),this.gcScheduler=this.Xo(t),this.localStore=this.Zo(t)}Xo(t){return null}Zo(t){return function(t,e,n,s){return new th(t,e,n,s)}(this.persistence,new Zl,t.initialUser,this.k)}Yo(t){return new fh(mh.ks,this.k)}Jo(t){return new yh}async terminate(){this.gcScheduler&&this.gcScheduler.stop(),await this.sharedClientState.shutdown(),await this.persistence.shutdown()}}class Bd{async initialize(t,e){this.localStore||(this.localStore=t.localStore,this.sharedClientState=t.sharedClientState,this.datastore=this.createDatastore(e),this.remoteStore=this.createRemoteStore(e),this.eventManager=this.createEventManager(e),this.syncEngine=this.createSyncEngine(e,!t.synchronizeTabs),this.sharedClientState.onlineStateHandler=t=>kd(this.syncEngine,t,1),this.remoteStore.remoteSyncer.handleCredentialChange=Fd.bind(null,this.syncEngine),await async function(t,e){const n=da(t);e?(n.Gr.delete(2),await Lh(n)):e||(n.Gr.add(2),await Oh(n),n.Jr.set("Unknown"))}(this.remoteStore,this.syncEngine.isPrimaryClient))}createEventManager(t){return new ld}createDatastore(t){const e=Th(t.databaseInfo.databaseId),n=(s=t.databaseInfo,new bh(s));var s;return function(t,e,n,s){return new Nh(t,e,n,s)}(t.authCredentials,t.appCheckCredentials,n,e)}createRemoteStore(t){return e=this.localStore,n=this.datastore,s=t.asyncQueue,i=t=>kd(this.syncEngine,t,0),r=wh.bt()?new wh:new vh,new Dh(e,n,s,i,r);var e,n,s,i,r}createSyncEngine(t,e){return function(t,e,n,s,i,r,o){const a=new bd(t,e,n,s,i,r);return o&&(a.Wo=!0),a}(this.localStore,this.remoteStore,this.eventManager,this.sharedClientState,t.initialUser,t.maxConcurrentLimboResolutions,e)}terminate(){return async function(t){const e=da(t);oa("RemoteStore","RemoteStore shutting down."),e.Gr.add(5),await Oh(e),e.Hr.shutdown(),e.Jr.set("Unknown")}(this.remoteStore)}}class Hd{constructor(t){this.observer=t,this.muted=!1}next(t){this.observer.next&&this.ea(this.observer.next,t)}error(t){this.observer.error?this.ea(this.observer.error,t):console.error("Uncaught Error in snapshot listener:",t)}na(){this.muted=!0}ea(t,e){this.muted||setTimeout((()=>{this.muted||t(e)}),0)}}class $d{constructor(t,e,n,s){this.authCredentials=t,this.appCheckCredentials=e,this.asyncQueue=n,this.databaseInfo=s,this.user=na.UNAUTHENTICATED,this.clientId=Sa.A(),this.authCredentialListener=()=>Promise.resolve(),this.authCredentials.start(n,(async t=>{oa("FirestoreClient","Received user=",t.uid),await this.authCredentialListener(t),this.user=t})),this.appCheckCredentials.start(n,(()=>Promise.resolve()))}async getConfiguration(){return{asyncQueue:this.asyncQueue,databaseInfo:this.databaseInfo,clientId:this.clientId,authCredentials:this.authCredentials,appCheckCredentials:this.appCheckCredentials,initialUser:this.user,maxConcurrentLimboResolutions:100}}setCredentialChangeListener(t){this.authCredentialListener=t}verifyNotTerminated(){if(this.asyncQueue.isShuttingDown)throw new pa(fa.FAILED_PRECONDITION,"The client has already been terminated.")}terminate(){this.asyncQueue.enterRestrictedMode();const t=new ma;return this.asyncQueue.enqueueAndForgetEvenWhileRestricted((async()=>{try{this.onlineComponents&&await this.onlineComponents.terminate(),this.offlineComponents&&await this.offlineComponents.terminate(),this.authCredentials.shutdown(),this.appCheckCredentials.shutdown(),t.resolve()}catch(e){const n=rd(e,"Failed to shutdown persistence");t.reject(n)}})),t.promise}}async function Kd(t,e){t.asyncQueue.verifyOperationInProgress();const n=await async function(t){return t.offlineComponents||(oa("FirestoreClient","Using default OfflineComponentProvider"),await async function(t,e){t.asyncQueue.verifyOperationInProgress(),oa("FirestoreClient","Initializing OfflineComponentProvider");const n=await t.getConfiguration();await e.initialize(n);let s=n.initialUser;t.setCredentialChangeListener((async t=>{s.isEqual(t)||(await eh(e.localStore,t),s=t)})),e.persistence.setDatabaseDeletedListener((()=>t.terminate())),t.offlineComponents=e}(t,new jd)),t.offlineComponents}(t);oa("FirestoreClient","Initializing OnlineComponentProvider");const s=await t.getConfiguration();await e.initialize(n,s),t.setCredentialChangeListener((t=>async function(t,e){const n=da(t);n.asyncQueue.verifyOperationInProgress(),oa("RemoteStore","RemoteStore received new credentials");const s=qh(n);n.Gr.add(3),await Oh(n),s&&n.Jr.set("Unknown"),await n.remoteSyncer.handleCredentialChange(e),n.Gr.delete(3),await Lh(n)}(e.remoteStore,t))),t.onlineComponents=e}async function zd(t){return t.onlineComponents||(oa("FirestoreClient","Using default OnlineComponentProvider"),await Kd(t,new Bd)),t.onlineComponents}async function Gd(t){const e=await zd(t),n=e.eventManager;return n.onListen=_d.bind(null,e.syncEngine),n.onUnlisten=Td.bind(null,e.syncEngine),n}class Wd{constructor(t,e,n,s,i,r,o,a){this.databaseId=t,this.appId=e,this.persistenceKey=n,this.host=s,this.ssl=i,this.forceLongPolling=r,this.autoDetectLongPolling=o,this.useFetchStreams=a}}class Jd{constructor(t,e){this.projectId=t,this.database=e||"(default)"}get isDefaultDatabase(){return"(default)"===this.database}isEqual(t){return t instanceof Jd&&t.projectId===this.projectId&&t.database===this.database}}const Qd=new Map;function Xd(t,e,n){if(!n)throw new pa(fa.INVALID_ARGUMENT,`Function ${t}() cannot be called with an empty ${e}.`)}function Yd(t){if(!Wa.isDocumentKey(t))throw new pa(fa.INVALID_ARGUMENT,`Invalid document reference. Document references must have an even number of segments, but ${t} has ${t.length}.`)}function Zd(t){if(Wa.isDocumentKey(t))throw new pa(fa.INVALID_ARGUMENT,`Invalid collection reference. Collection references must have an odd number of segments, but ${t} has ${t.length}.`)}function tf(t){if(void 0===t)return"undefined";if(null===t)return"null";if("string"==typeof t)return t.length>20&&(t=`${t.substring(0,20)}...`),JSON.stringify(t);if("number"==typeof t||"boolean"==typeof t)return""+t;if("object"==typeof t){if(t instanceof Array)return"an array";{const e=function(t){return t.constructor?t.constructor.name:null}(t);return e?`a custom ${e} object`:"an object"}}return"function"==typeof t?"a function":la()}function ef(t,e){if("_delegate"in t&&(t=t._delegate),!(t instanceof e)){if(e.name===t.constructor.name)throw new pa(fa.INVALID_ARGUMENT,"Type does not match the expected instance. Did you pass a reference from a different Firestore SDK?");{const n=tf(t);throw new pa(fa.INVALID_ARGUMENT,`Expected type '${e.name}', but it was: ${n}`)}}return t}class nf{constructor(t){var e;if(void 0===t.host){if(void 0!==t.ssl)throw new pa(fa.INVALID_ARGUMENT,"Can't provide ssl option if host option is not set");this.host="firestore.googleapis.com",this.ssl=!0}else this.host=t.host,this.ssl=null===(e=t.ssl)||void 0===e||e;if(this.credentials=t.credentials,this.ignoreUndefinedProperties=!!t.ignoreUndefinedProperties,void 0===t.cacheSizeBytes)this.cacheSizeBytes=41943040;else{if(-1!==t.cacheSizeBytes&&t.cacheSizeBytes<1048576)throw new pa(fa.INVALID_ARGUMENT,"cacheSizeBytes must be at least 1048576");this.cacheSizeBytes=t.cacheSizeBytes}this.experimentalForceLongPolling=!!t.experimentalForceLongPolling,this.experimentalAutoDetectLongPolling=!!t.experimentalAutoDetectLongPolling,this.useFetchStreams=!!t.useFetchStreams,function(t,e,n,s){if(!0===e&&!0===s)throw new pa(fa.INVALID_ARGUMENT,"experimentalForceLongPolling and experimentalAutoDetectLongPolling cannot be used together.")}(0,t.experimentalForceLongPolling,0,t.experimentalAutoDetectLongPolling)}isEqual(t){return this.host===t.host&&this.ssl===t.ssl&&this.credentials===t.credentials&&this.cacheSizeBytes===t.cacheSizeBytes&&this.experimentalForceLongPolling===t.experimentalForceLongPolling&&this.experimentalAutoDetectLongPolling===t.experimentalAutoDetectLongPolling&&this.ignoreUndefinedProperties===t.ignoreUndefinedProperties&&this.useFetchStreams===t.useFetchStreams}}class sf{constructor(t,e,n){this._authCredentials=e,this._appCheckCredentials=n,this.type="firestore-lite",this._persistenceKey="(lite)",this._settings=new nf({}),this._settingsFrozen=!1,t instanceof Jd?this._databaseId=t:(this._app=t,this._databaseId=function(t){if(!Object.prototype.hasOwnProperty.apply(t.options,["projectId"]))throw new pa(fa.INVALID_ARGUMENT,'"projectId" not provided in firebase.initializeApp.');return new Jd(t.options.projectId)}(t))}get app(){if(!this._app)throw new pa(fa.FAILED_PRECONDITION,"Firestore was not initialized using the Firebase SDK. 'app' is not available");return this._app}get _initialized(){return this._settingsFrozen}get _terminated(){return void 0!==this._terminateTask}_setSettings(t){if(this._settingsFrozen)throw new pa(fa.FAILED_PRECONDITION,"Firestore has already been started and its settings can no longer be changed. You can only modify settings before calling any other methods on a Firestore object.");this._settings=new nf(t),void 0!==t.credentials&&(this._authCredentials=function(t){if(!t)return new ya;switch(t.type){case"gapi":const e=t.client;return ha(!("object"!=typeof e||null===e||!e.auth||!e.auth.getAuthHeaderValueForFirstParty)),new Ea(e,t.sessionIndex||"0",t.iamToken||null);case"provider":return t.client;default:throw new pa(fa.INVALID_ARGUMENT,"makeAuthCredentialsProvider failed due to invalid credential type")}}(t.credentials))}_getSettings(){return this._settings}_freezeSettings(){return this._settingsFrozen=!0,this._settings}_delete(){return this._terminateTask||(this._terminateTask=this._terminate()),this._terminateTask}toJSON(){return{app:this._app,databaseId:this._databaseId,settings:this._settings}}_terminate(){return function(t){const e=Qd.get(t);e&&(oa("ComponentProvider","Removing Datastore"),Qd.delete(t),e.terminate())}(this),Promise.resolve()}}class rf{constructor(t,e,n){this.converter=e,this._key=n,this.type="document",this.firestore=t}get _path(){return this._key.path}get id(){return this._key.path.lastSegment()}get path(){return this._key.path.canonicalString()}get parent(){return new af(this.firestore,this.converter,this._key.path.popLast())}withConverter(t){return new rf(this.firestore,t,this._key)}}class of{constructor(t,e,n){this.converter=e,this._query=n,this.type="query",this.firestore=t}withConverter(t){return new of(this.firestore,t,this._query)}}class af extends of{constructor(t,e,n){super(t,e,Lc(n)),this._path=n,this.type="collection"}get id(){return this._query.path.lastSegment()}get path(){return this._query.path.canonicalString()}get parent(){const t=this._path.popLast();return t.isEmpty()?null:new rf(this.firestore,null,new Wa(t))}withConverter(t){return new af(this.firestore,t,this._path)}}function cf(t,e,...n){if(t=F(t),1===arguments.length&&(e=Sa.A()),Xd("doc","path",e),t instanceof sf){const s=Pa.fromString(e,...n);return Yd(s),new rf(t,null,new Wa(s))}{if(!(t instanceof rf||t instanceof af))throw new pa(fa.INVALID_ARGUMENT,"Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore");const s=t._path.child(Pa.fromString(e,...n));return Yd(s),new rf(t.firestore,t instanceof af?t.converter:null,new Wa(s))}}class uf{constructor(){this.ma=Promise.resolve(),this.ga=[],this.ya=!1,this.pa=[],this.Ta=null,this.Ea=!1,this.Ia=!1,this.Aa=[],this.ur=new Sh(this,"async_queue_retry"),this.Ra=()=>{const t=_h();t&&oa("AsyncQueue","Visibility state changed to "+t.visibilityState),this.ur.er()};const t=_h();t&&"function"==typeof t.addEventListener&&t.addEventListener("visibilitychange",this.Ra)}get isShuttingDown(){return this.ya}enqueueAndForget(t){this.enqueue(t)}enqueueAndForgetEvenWhileRestricted(t){this.Pa(),this.ba(t)}enterRestrictedMode(t){if(!this.ya){this.ya=!0,this.Ia=t||!1;const e=_h();e&&"function"==typeof e.removeEventListener&&e.removeEventListener("visibilitychange",this.Ra)}}enqueue(t){if(this.Pa(),this.ya)return new Promise((()=>{}));const e=new ma;return this.ba((()=>this.ya&&this.Ia?Promise.resolve():(t().then(e.resolve,e.reject),e.promise))).then((()=>e.promise))}enqueueRetryable(t){this.enqueueAndForget((()=>(this.ga.push(t),this.va())))}async va(){if(0!==this.ga.length){try{await this.ga[0](),this.ga.shift(),this.ur.reset()}catch(t){if(!Vl(t))throw t;oa("AsyncQueue","Operation failed with retryable error: "+t)}this.ga.length>0&&this.ur.Zi((()=>this.va()))}}ba(t){const e=this.ma.then((()=>(this.Ea=!0,t().catch((t=>{this.Ta=t,this.Ea=!1;const e=function(t){let e=t.message||"";return t.stack&&(e=t.stack.includes(t.message)?t.stack:t.message+"\n"+t.stack),e}(t);throw aa("INTERNAL UNHANDLED ERROR: ",e),t})).then((t=>(this.Ea=!1,t))))));return this.ma=e,e}enqueueAfterDelay(t,e,n){this.Pa(),this.Aa.indexOf(t)>-1&&(e=0);const s=id.createAndSchedule(this,t,e,n,(t=>this.Va(t)));return this.pa.push(s),s}Pa(){this.Ta&&la()}verifyOperationInProgress(){}async Sa(){let t;do{t=this.ma,await t}while(t!==this.ma)}Da(t){for(const e of this.pa)if(e.timerId===t)return!0;return!1}Ca(t){return this.Sa().then((()=>{this.pa.sort(((t,e)=>t.targetTimeMs-e.targetTimeMs));for(const e of this.pa)if(e.skipDelay(),"all"!==t&&e.timerId===t)break;return this.Sa()}))}Na(t){this.Aa.push(t)}Va(t){const e=this.pa.indexOf(t);this.pa.splice(e,1)}}class lf extends sf{constructor(t,e,n){super(t,e,n),this.type="firestore",this._queue=new uf,this._persistenceKey="name"in t?t.name:"[DEFAULT]"}_terminate(){return this._firestoreClient||df(this),this._firestoreClient.terminate()}}function hf(t){return t._firestoreClient||df(t),t._firestoreClient.verifyNotTerminated(),t._firestoreClient}function df(t){var e;const n=t._freezeSettings(),s=function(t,e,n,s){return new Wd(t,e,n,s.host,s.ssl,s.experimentalForceLongPolling,s.experimentalAutoDetectLongPolling,s.useFetchStreams)}(t._databaseId,(null===(e=t._app)||void 0===e?void 0:e.options.appId)||"",t._persistenceKey,n);t._firestoreClient=new $d(t._authCredentials,t._appCheckCredentials,t._queue,s)}class ff{constructor(...t){for(let e=0;e<t.length;++e)if(0===t[e].length)throw new pa(fa.INVALID_ARGUMENT,"Invalid field name at argument $(i + 1). Field names must not be empty.");this._internalPath=new xa(t)}isEqual(t){return this._internalPath.isEqual(t._internalPath)}}class pf{constructor(t){this._byteString=t}static fromBase64String(t){try{return new pf(Fa.fromBase64String(t))}catch(t){throw new pa(fa.INVALID_ARGUMENT,"Failed to construct data from Base64 string: "+t)}}static fromUint8Array(t){return new pf(Fa.fromUint8Array(t))}toBase64(){return this._byteString.toBase64()}toUint8Array(){return this._byteString.toUint8Array()}toString(){return"Bytes(base64: "+this.toBase64()+")"}isEqual(t){return this._byteString.isEqual(t._byteString)}}class mf{constructor(t){this._methodName=t}}class gf{constructor(t,e){if(!isFinite(t)||t<-90||t>90)throw new pa(fa.INVALID_ARGUMENT,"Latitude must be a number between -90 and 90, but was: "+t);if(!isFinite(e)||e<-180||e>180)throw new pa(fa.INVALID_ARGUMENT,"Longitude must be a number between -180 and 180, but was: "+e);this._lat=t,this._long=e}get latitude(){return this._lat}get longitude(){return this._long}isEqual(t){return this._lat===t._lat&&this._long===t._long}toJSON(){return{latitude:this._lat,longitude:this._long}}_compareTo(t){return ka(this._lat,t._lat)||ka(this._long,t._long)}}const yf=/^__.*__$/;class vf{constructor(t,e,n){this.data=t,this.fieldMask=e,this.fieldTransforms=n}toMutation(t,e){return null!==this.fieldMask?new pu(t,this.data,this.fieldMask,e,this.fieldTransforms):new fu(t,this.data,e,this.fieldTransforms)}}class wf{constructor(t,e,n){this.data=t,this.fieldMask=e,this.fieldTransforms=n}toMutation(t,e){return new pu(t,this.data,this.fieldMask,e,this.fieldTransforms)}}function Ef(t){switch(t){case 0:case 2:case 1:return!0;case 3:case 4:return!1;default:throw la()}}class If{constructor(t,e,n,s,i,r){this.settings=t,this.databaseId=e,this.k=n,this.ignoreUndefinedProperties=s,void 0===i&&this.ka(),this.fieldTransforms=i||[],this.fieldMask=r||[]}get path(){return this.settings.path}get xa(){return this.settings.xa}$a(t){return new If(Object.assign(Object.assign({},this.settings),t),this.databaseId,this.k,this.ignoreUndefinedProperties,this.fieldTransforms,this.fieldMask)}Fa(t){var e;const n=null===(e=this.path)||void 0===e?void 0:e.child(t),s=this.$a({path:n,Oa:!1});return s.Ma(t),s}La(t){var e;const n=null===(e=this.path)||void 0===e?void 0:e.child(t),s=this.$a({path:n,Oa:!1});return s.ka(),s}Ba(t){return this.$a({path:void 0,Oa:!0})}Ua(t){return Of(t,this.settings.methodName,this.settings.qa||!1,this.path,this.settings.Ka)}contains(t){return void 0!==this.fieldMask.find((e=>t.isPrefixOf(e)))||void 0!==this.fieldTransforms.find((e=>t.isPrefixOf(e.field)))}ka(){if(this.path)for(let t=0;t<this.path.length;t++)this.Ma(this.path.get(t))}Ma(t){if(0===t.length)throw this.Ua("Document fields must not be empty");if(Ef(this.xa)&&yf.test(t))throw this.Ua('Document fields cannot begin and end with "__"')}}class bf{constructor(t,e,n){this.databaseId=t,this.ignoreUndefinedProperties=e,this.k=n||Th(t)}ja(t,e,n,s=!1){return new If({xa:t,methodName:e,Ka:n,path:xa.emptyPath(),Oa:!1,qa:s},this.databaseId,this.k,this.ignoreUndefinedProperties)}}function _f(t){const e=t._freezeSettings(),n=Th(t._databaseId);return new bf(t._databaseId,!!e.ignoreUndefinedProperties,n)}function Tf(t,e,n,s,i,r={}){const o=t.ja(r.merge||r.mergeFields?2:0,e,n,i);Nf("Data must be an object, but it was:",o,s);const a=Cf(s,o);let c,u;if(r.merge)c=new Ua(o.fieldMask),u=o.fieldTransforms;else if(r.mergeFields){const t=[];for(const s of r.mergeFields){const i=Rf(e,s,n);if(!o.contains(i))throw new pa(fa.INVALID_ARGUMENT,`Field '${i}' is specified in your field mask but missing from your input data.`);Pf(t,i)||t.push(i)}c=new Ua(t),u=o.fieldTransforms.filter((t=>c.covers(t.field)))}else c=null,u=o.fieldTransforms;return new vf(new cc(a),c,u)}class Sf extends mf{_toFieldTransform(t){if(2!==t.xa)throw 1===t.xa?t.Ua(`${this._methodName}() can only appear at the top level of your update data`):t.Ua(`${this._methodName}() cannot be used with set() unless you pass {merge:true}`);return t.fieldMask.push(t.path),null}isEqual(t){return t instanceof Sf}}function kf(t,e){if(Af(t=F(t)))return Nf("Unsupported field value:",e,t),Cf(t,e);if(t instanceof mf)return function(t,e){if(!Ef(e.xa))throw e.Ua(`${t._methodName}() can only be used with update() and set()`);if(!e.path)throw e.Ua(`${t._methodName}() is not currently supported inside arrays`);const n=t._toFieldTransform(e);n&&e.fieldTransforms.push(n)}(t,e),null;if(void 0===t&&e.ignoreUndefinedProperties)return null;if(e.path&&e.fieldMask.push(e.path),t instanceof Array){if(e.settings.Oa&&4!==e.xa)throw e.Ua("Nested arrays are not supported");return function(t,e){const n=[];let s=0;for(const i of t){let t=kf(i,e.Ba(s));null==t&&(t={nullValue:"NULL_VALUE"}),n.push(t),s++}return{arrayValue:{values:n}}}(t,e)}return function(t,e){if(null===(t=F(t)))return{nullValue:"NULL_VALUE"};if("number"==typeof t)return Kc(e.k,t);if("boolean"==typeof t)return{booleanValue:t};if("string"==typeof t)return{stringValue:t};if(t instanceof Date){const n=Aa.fromDate(t);return{timestampValue:Qu(e.k,n)}}if(t instanceof Aa){const n=new Aa(t.seconds,1e3*Math.floor(t.nanoseconds/1e3));return{timestampValue:Qu(e.k,n)}}if(t instanceof gf)return{geoPointValue:{latitude:t.latitude,longitude:t.longitude}};if(t instanceof pf)return{bytesValue:Xu(e.k,t._byteString)};if(t instanceof rf){const n=e.databaseId,s=t.firestore._databaseId;if(!s.isEqual(n))throw e.Ua(`Document reference is for database ${s.projectId}/${s.database} but should be for database ${n.projectId}/${n.database}`);return{referenceValue:tl(t.firestore._databaseId||e.databaseId,t._key.path)}}throw e.Ua(`Unsupported field value: ${tf(t)}`)}(t,e)}function Cf(t,e){const n={};return La(t)?e.path&&e.path.length>0&&e.fieldMask.push(e.path):Da(t,((t,s)=>{const i=kf(s,e.Fa(t));null!=i&&(n[t]=i)})),{mapValue:{fields:n}}}function Af(t){return!("object"!=typeof t||null===t||t instanceof Array||t instanceof Date||t instanceof Aa||t instanceof gf||t instanceof pf||t instanceof rf||t instanceof mf)}function Nf(t,e,n){if(!Af(n)||!function(t){return"object"==typeof t&&null!==t&&(Object.getPrototypeOf(t)===Object.prototype||null===Object.getPrototypeOf(t))}(n)){const s=tf(n);throw"an object"===s?e.Ua(t+" a custom object"):e.Ua(t+" "+s)}}function Rf(t,e,n){if((e=F(e))instanceof ff)return e._internalPath;if("string"==typeof e)return Lf(t,e);throw Of("Field path arguments must be of type string or FieldPath.",t,!1,void 0,n)}const Df=new RegExp("[~\\*/\\[\\]]");function Lf(t,e,n){if(e.search(Df)>=0)throw Of(`Invalid field path (${e}). Paths must not contain '~', '*', '/', '[', or ']'`,t,!1,void 0,n);try{return new ff(...e.split("."))._internalPath}catch(s){throw Of(`Invalid field path (${e}). Paths must not be empty, begin with '.', end with '.', or contain '..'`,t,!1,void 0,n)}}function Of(t,e,n,s,i){const r=s&&!s.isEmpty(),o=void 0!==i;let a=`Function ${e}() called with invalid data`;n&&(a+=" (via `toFirestore()`)"),a+=". ";let c="";return(r||o)&&(c+=" (found",r&&(c+=` in field ${s}`),o&&(c+=` in document ${i}`),c+=")"),new pa(fa.INVALID_ARGUMENT,a+t+c)}function Pf(t,e){return t.some((t=>t.isEqual(e)))}class Mf{constructor(t,e,n,s,i){this._firestore=t,this._userDataWriter=e,this._key=n,this._document=s,this._converter=i}get id(){return this._key.path.lastSegment()}get ref(){return new rf(this._firestore,this._converter,this._key)}exists(){return null!==this._document}data(){if(this._document){if(this._converter){const t=new xf(this._firestore,this._userDataWriter,this._key,this._document,null);return this._converter.fromFirestore(t)}return this._userDataWriter.convertValue(this._document.data.value)}}get(t){if(this._document){const e=this._document.data.field(Uf("DocumentSnapshot.get",t));if(null!==e)return this._userDataWriter.convertValue(e)}}}class xf extends Mf{data(){return super.data()}}function Uf(t,e){return"string"==typeof e?Lf(t,e):e instanceof ff?e._internalPath:e._delegate._internalPath}class Ff{constructor(t,e){this.hasPendingWrites=t,this.fromCache=e}isEqual(t){return this.hasPendingWrites===t.hasPendingWrites&&this.fromCache===t.fromCache}}class Vf extends Mf{constructor(t,e,n,s,i,r){super(t,e,n,s,r),this._firestore=t,this._firestoreImpl=t,this.metadata=i}exists(){return super.exists()}data(t={}){if(this._document){if(this._converter){const e=new qf(this._firestore,this._userDataWriter,this._key,this._document,this.metadata,null);return this._converter.fromFirestore(e,t)}return this._userDataWriter.convertValue(this._document.data.value,t.serverTimestamps)}}get(t,e={}){if(this._document){const n=this._document.data.field(Uf("DocumentSnapshot.get",t));if(null!==n)return this._userDataWriter.convertValue(n,e.serverTimestamps)}}}class qf extends Vf{data(t={}){return super.data(t)}}class jf{constructor(t,e,n,s){this._firestore=t,this._userDataWriter=e,this._snapshot=s,this.metadata=new Ff(s.hasPendingWrites,s.fromCache),this.query=n}get docs(){const t=[];return this.forEach((e=>t.push(e))),t}get size(){return this._snapshot.docs.size}get empty(){return 0===this.size}forEach(t,e){this._snapshot.docs.forEach((n=>{t.call(e,new qf(this._firestore,this._userDataWriter,n.key,n,new Ff(this._snapshot.mutatedKeys.has(n.key),this._snapshot.fromCache),this.query.converter))}))}docChanges(t={}){const e=!!t.includeMetadataChanges;if(e&&this._snapshot.excludesMetadataChanges)throw new pa(fa.INVALID_ARGUMENT,"To include metadata changes with your document changes, you must also pass { includeMetadataChanges:true } to onSnapshot().");return this._cachedChanges&&this._cachedChangesIncludeMetadataChanges===e||(this._cachedChanges=function(t,e){if(t._snapshot.oldDocs.isEmpty()){let e=0;return t._snapshot.docChanges.map((n=>({type:"added",doc:new qf(t._firestore,t._userDataWriter,n.doc.key,n.doc,new Ff(t._snapshot.mutatedKeys.has(n.doc.key),t._snapshot.fromCache),t.query.converter),oldIndex:-1,newIndex:e++})))}{let n=t._snapshot.oldDocs;return t._snapshot.docChanges.filter((t=>e||3!==t.type)).map((e=>{const s=new qf(t._firestore,t._userDataWriter,e.doc.key,e.doc,new Ff(t._snapshot.mutatedKeys.has(e.doc.key),t._snapshot.fromCache),t.query.converter);let i=-1,r=-1;return 0!==e.type&&(i=n.indexOf(e.doc.key),n=n.delete(e.doc.key)),1!==e.type&&(n=n.add(e.doc),r=n.indexOf(e.doc.key)),{type:Bf(e.type),doc:s,oldIndex:i,newIndex:r}}))}}(this,e),this._cachedChangesIncludeMetadataChanges=e),this._cachedChanges}}function Bf(t){switch(t){case 0:return"added";case 2:case 3:return"modified";case 1:return"removed";default:return la()}}class Hf extends class{convertValue(t,e="none"){switch(Ja(t)){case 0:return null;case 1:return t.booleanValue;case 2:return ja(t.integerValue||t.doubleValue);case 3:return this.convertTimestamp(t.timestampValue);case 4:return this.convertServerTimestamp(t,e);case 5:return t.stringValue;case 6:return this.convertBytes(Ba(t.bytesValue));case 7:return this.convertReference(t.referenceValue);case 8:return this.convertGeoPoint(t.geoPointValue);case 9:return this.convertArray(t.arrayValue,e);case 10:return this.convertObject(t.mapValue,e);default:throw la()}}convertObject(t,e){const n={};return Da(t.fields,((t,s)=>{n[t]=this.convertValue(s,e)})),n}convertGeoPoint(t){return new gf(ja(t.latitude),ja(t.longitude))}convertArray(t,e){return(t.values||[]).map((t=>this.convertValue(t,e)))}convertServerTimestamp(t,e){switch(e){case"previous":const n=$a(t);return null==n?null:this.convertValue(n,e);case"estimate":return this.convertTimestamp(Ka(t));default:return null}}convertTimestamp(t){const e=qa(t);return new Aa(e.seconds,e.nanos)}convertDocumentKey(t,e){const n=Pa.fromString(t);ha(Il(n));const s=new Jd(n.get(1),n.get(3)),i=new Wa(n.popFirst(5));return s.isEqual(e)||aa(`Document ${i} contains a document reference within a different database (${s.projectId}/${s.database}) which is not supported. It will be treated as a reference in the current database (${e.projectId}/${e.database}) instead.`),i}}{constructor(t){super(),this.firestore=t}convertBytes(t){return new pf(t)}convertReference(t){const e=this.convertDocumentKey(t,this.firestore._databaseId);return new rf(this.firestore,null,e)}}function $f(t,e){return function(t,e){const n=new ma;return t.asyncQueue.enqueueAndForget((async()=>async function(t,e,n){const s=qd(t);try{const t=await function(t,e){const n=da(t),s=Aa.now(),i=e.reduce(((t,e)=>t.add(e.key)),Mu());let r;return n.persistence.runTransaction("Locally write mutations","readwrite",(t=>n.Wn.vn(t,i).next((i=>{r=i;const o=[];for(const t of e){const e=lu(t,r.get(t.key));null!=e&&o.push(new pu(t.key,e,uc(e.value.mapValue),ru.exists(!0)))}return n.An.addMutationBatch(t,s,o,e)})))).then((t=>(t.applyToLocalDocumentSet(r),{batchId:t.batchId,changes:r})))}(s.localStore,e);s.sharedClientState.addPendingMutation(t.batchId),function(t,e,n){let s=t.Ko[t.currentUser.toKey()];s||(s=new Tu(ka)),s=s.insert(e,n),t.Ko[t.currentUser.toKey()]=s}(s,t.batchId,n),await Ud(s,t.changes),await Gh(s.remoteStore)}catch(t){const e=rd(t,"Failed to persist write");n.reject(e)}}(await function(t){return zd(t).then((t=>t.syncEngine))}(t),e,n))),n.promise}(hf(t),e)}!function(t,e=!0){sa="9.6.1",rt(new V("firestore",((t,{options:n})=>{const s=t.getProvider("app").getImmediate(),i=new lf(s,new va(t.getProvider("auth-internal")),new ba(t.getProvider("app-check-internal")));return n=Object.assign({useFetchStreams:e},n),i._setSettings(n),i}),"PUBLIC")),ht(ea,"3.4.1",t),ht(ea,"3.4.1","esm2017")}(),ht("firebase","9.6.1","app");const Kf=[];!function(t,e={}){"object"!=typeof e&&(e={name:e});const n=Object.assign({name:"[DEFAULT]",automaticDataCollectionEnabled:!1},e),s=n.name;if("string"!=typeof s||!s)throw at.create("bad-app-name",{appName:String(s)});const i=nt.get(s);if(i){if(D(t,i.options)&&D(n,i.config))return i;throw at.create("duplicate-app",{appName:s})}const r=new B(s);for(const t of st.values())r.addComponent(t);const o=new ct(t,n,r);nt.set(s,o)}({apiKey:"AIzaSyBPwH-PsSrwzFjr6v8LUMwbZkbFs8x7Uac",authDomain:"productiv-932c9.firebaseapp.com",projectId:"productiv-932c9",storageBucket:"productiv-932c9.appspot.com",messagingSenderId:"232110405285",appId:"1:232110405285:web:d37d1437bc93f077c13f4c",measurementId:"G-CR193YXW7R"});const zf=function(t=lt()){return ot(t,"firestore").getImmediate()}(),Gf=[];async function Wf(t,e,n,s,i,r,o){const a=cf(zf,`${Bn()}tasks`,r);await function(t,e,n,...s){t=ef(t,rf);const i=ef(t.firestore,lf),r=_f(i);let o;return o="string"==typeof(e=F(e))||e instanceof ff?function(t,e,n,s,i,r){const o=t.ja(1,e,n),a=[Rf(e,s,n)],c=[i];if(r.length%2!=0)throw new pa(fa.INVALID_ARGUMENT,`Function ${e}() needs to be called with an even number of arguments that alternate between field names and values.`);for(let t=0;t<r.length;t+=2)a.push(Rf(e,r[t])),c.push(r[t+1]);const u=[],l=cc.empty();for(let t=a.length-1;t>=0;--t)if(!Pf(u,a[t])){const e=a[t];let n=c[t];n=F(n);const s=o.La(e);if(n instanceof Sf)u.push(e);else{const t=kf(n,s);null!=t&&(u.push(e),l.set(e,t))}}const h=new Ua(u);return new wf(l,h,o.fieldTransforms)}(r,"updateDoc",t._key,e,n,s):function(t,e,n,s){const i=t.ja(1,e,n);Nf("Data must be an object, but it was:",i,s);const r=[],o=cc.empty();Da(s,((t,s)=>{const a=Lf(e,t,n);s=F(s);const c=i.La(a);if(s instanceof Sf)r.push(a);else{const t=kf(s,c);null!=t&&(r.push(a),o.set(a,t))}}));const a=new Ua(r);return new wf(o,a,i.fieldTransforms)}(r,"updateDoc",t._key,e),$f(i,[o.toMutation(t._key,ru.exists(!0))])}(a,{title:t,description:e,dueDate:n,priority:s,project:i,id:r,status:o})}class Jf{constructor(t,e,n,s,i,r,o){this.title=t,this.description=e,this.dueDate=n,this.priority=s,this.project=i,this.id=r,this.status=o}getTitle(){return this.title}setTitle(t){this.title=t}getDescription(){return this.description}setDescription(t){this.description=t}getDueDate(){return this.dueDate}setDueDate(t){this.dueDate=t}getPriority(){return this.priority}setPriority(t){this.priority=t}getId(){return this.id}getProject(){return this.project}setProject(t){this.project=t}setId(t){this.id=t}getStatus(){return this.status}setStatus(t){this.status=t}}function Qf(t){const e=Gf.filter((e=>{for(const n in e)if(e[n]===t.currentTarget.id)return e}));!function(t){d();const e=i("h2","project__title");e.textContent=t;const n=document.querySelector(".container"),s=i("section","todos");n.appendChild(e),n.appendChild(s)}(t.currentTarget.id),e.map((t=>{const e=document.querySelector(".todos");e.appendChild(a(t.title,t.description,t.dueDate,t.priority,t.project,t.id)),h.appendChild(e)}))}function Xf(e){let n=[];"today"===e.currentTarget.id?n=Gf.filter((e=>e.dueDate===t())):"overdue"===e.currentTarget.id?n=Gf.filter((e=>e.dueDate<t())):"upcoming"===e.currentTarget.id&&(n=Gf.filter((e=>e.dueDate>t()))),p(e.currentTarget.id),m(n)}function Yf(t){p(t.currentTarget.id),m(Gf)}function Zf(t,e,n,s,i,r,o){Gf.forEach((a=>{a.getId()===Number(r)&&(a.setTitle(t),a.setDescription(e),a.setDueDate(n),a.setPriority(s),a.setProject(i),a.setStatus(o))})),Wf(t,e,dueDate,s,i,r,o)}function tp(){y(Kf)}function ep(){const t=document.querySelector(".container"),e=i("div","calc__wrapper"),n=r("div","calc__container");n.innerHTML='\n        <div class="container2">\n        <div class="display-wrapper">\n            <p class="display calc"></p>\n            <h1 class="display keyPressDisplay">0</h1>\n        </div>\n        <div class="buttons">\n            <button class="btn clear">AC</button>\n            <button class="btn backspace">&#8592;</button>\n            <button class="btn negative">+/-</button>\n            <button class="btn divide">/</button>\n            <button class="btn seven">7</button>\n            <button class="btn eight">8</button>\n            <button class="btn nine">9</button>\n            <button class="btn multiply">x</button>\n            <button class="btn four">4</button>\n            <button class="btn five">5</button>\n            <button class="btn six">6</button>\n            <button class="btn subtract">-</button>\n            <button class="btn one">1</button>\n            <button class="btn two">2</button>\n            <button class="btn three">3</button>\n            <button class="btn add">+</button>\n            <button class="btn zero">0</button>\n            <button class="btn decimal">.</button>\n            <button class="btn equals">=</button>\n        </div>\n    </div>\n    ',e.appendChild(n),t.appendChild(e),function(){const t=[];let e="",n="";const s=document.querySelector(".keyPressDisplay"),i=document.querySelector(".calc"),r=document.querySelector(".one"),o=document.querySelector(".two"),a=document.querySelector(".three"),c=document.querySelector(".four"),u=document.querySelector(".five"),l=document.querySelector(".six"),h=document.querySelector(".seven"),d=document.querySelector(".eight"),f=document.querySelector(".nine"),p=document.querySelector(".zero"),m=document.querySelector(".decimal"),g=document.querySelector(".add"),y=document.querySelector(".subtract"),v=document.querySelector(".multiply"),w=document.querySelector(".divide"),E=document.querySelector(".equals"),I=document.querySelector(".clear"),b=document.querySelector(".backspace"),_=document.querySelector(".negative");function T(r,o,a){let c=0;if("+"===o?c=function(t,e){return parseFloat(t)+parseFloat(e)}(r,a):"-"===o?c=function(t,e){return parseFloat(t)-parseFloat(e)}(r,a):"*"===o?c=function(t,e){return parseFloat(t)*parseFloat(e)}(r,a):"/"===o&&(c=function(t,e){return 0==e?"ERROR":parseFloat(t)/parseFloat(e)}(r,a)),4===t.length&&"string"==typeof t[3]){let r="";return r+=c,r+=t[3],i.textContent=r,t.shift(),t.shift(),t.shift(),t.unshift(c),s.textContent=c,n="",e="",c}return 3===t.length?(t.length=0,t.push(c),t.shift(),s.textContent=c,i.textContent="",n="",e="",c):c}function S(r){switch("0"===s.textContent.charAt(0)&&(s.textContent=""),r){case"+":case"-":case"*":case"/":if(0===e.length)break;n+=r,n="",i.textContent+=r,t.push(e),e="",s.textContent="",t.push(r);break;case"+/-":if(0===e.length)break;if(e=parseFloat(-1*e),s.textContent=parseFloat(-1*s.textContent),n=parseFloat(-1*n),t.length>0){i.textContent=t[0]+t[1]+n;break}i.textContent=n;break;case"=":if(t.length<3&&"string"!=typeof t[1])break;t.push(e),T(t[0],t[1],t[2]);break;case".":if(e.includes("."))break;n+=r,i.textContent+=r,e+=r;break;default:i.textContent+=r,3===t.length&&"string"==typeof t[1]||2===t.length&&"string"==typeof t[1]?s.textContent="":4===t.length&&"number"==typeof t[1]&&t.shift(),e.length<10&&(e+=r,s.textContent=e,n+=r)}4===t.length&&T(t[0],t[1],t[2])}r.addEventListener("click",(()=>{S(1)})),o.addEventListener("click",(()=>{S(2)})),a.addEventListener("click",(()=>{S(3)})),c.addEventListener("click",(()=>{S(4)})),u.addEventListener("click",(()=>{S(5)})),l.addEventListener("click",(()=>{S(6)})),h.addEventListener("click",(()=>{S(7)})),d.addEventListener("click",(()=>{S(8)})),f.addEventListener("click",(()=>{S(9)})),p.addEventListener("click",(()=>{S(0)})),m.addEventListener("click",(()=>{S(".")})),g.addEventListener("click",(()=>{S("+")})),y.addEventListener("click",(()=>{S("-")})),v.addEventListener("click",(()=>{S("*")})),w.addEventListener("click",(()=>{S("/")})),E.addEventListener("click",(()=>{S("=")})),I.addEventListener("click",(()=>{n="",e="",i.textContent="",s.textContent="0",t.length=0})),b.addEventListener("click",(function(){1===s.textContent.length?(s.textContent="0",i.textContent=i.textContent.slice(0,-1),e=""):s.textContent.length>1&&(s.textContent=s.textContent.slice(0,-1),i.textContent=i.textContent.slice(0,-1),e=e.slice(0,-1))})),_.addEventListener("click",(()=>{S("+/-")}))}()}const np=document.querySelector(".container");let sp=25,ip=60*sp,rp=0;function op(){[...np.children].forEach((t=>{t.remove()}));const t=r("h2","pomodoro__title","Pomodoro");np.appendChild(t);const e=i("div","pomodoro__container"),n=i("div","pomodoro"),s=r("span","pomodoro__timer","25:00");s.setAttribute("id","timer"),n.appendChild(s),e.appendChild(n);const o=i("div","pomodoro__buttons"),a=r("button","pomodoro__button","Start"),c=r("button","pomodoro__button","Stop");c.setAttribute("id","stop");const u=r("button","pomodoro__button","Reset");return u.setAttribute("id","reset"),a.addEventListener("click",ap),u.addEventListener("click",up),o.appendChild(a),o.appendChild(c),o.appendChild(u),e.appendChild(o),np.appendChild(e),np}function ap(){const t=document.querySelector(".pomodoro"),e=document.getElementById("timer"),n=document.getElementById("stop"),s=setInterval((function(){let n=Math.floor(ip/60);n=n<10?"0"+n:n;let i=ip%60;if(i=i<10?"0"+i:i,e.textContent=`${n}:${i}`,n<1&&i<1){cp(s),rp++,sp=rp>0?5:25,rp--,5===sp?t.classList.add("end"):t.classList.remove("end"),ip=60*sp;let n=Math.floor(ip/60),i=ip%60;n=n<10?`0${n}`:n,i=i<10?`0${i}`:i,e.textContent=`${n}:${i}`}ip--}),1e3);n.addEventListener("click",(function(){cp(s)}))}function cp(t){clearInterval(t)}function up(){const t=document.getElementById("timer"),e=document.querySelector(".pomodoro");5===sp?e.classList.add("end"):e.classList.remove("end"),5!==sp&&(sp=25),ip=60*sp;let n=Math.floor(ip/60),s=ip%60;n=n<10?`0${n}`:n,s=s<10?`0${s}`:s,t.textContent=`${n}:${s}`}document.querySelector(".container");const lp=[...document.querySelectorAll(".sidebar__link")],hp=document.getElementById("work"),dp=document.getElementById("home"),fp=document.getElementById("miscellaneous");const pp=function(t=lt()){const e=ot(t,"auth");return e.isInitialized()?e.getImmediate():function(t,e){const n=ot(t,"auth");if(n.isInitialized()){const t=n.getImmediate();if(D(n.getOptions(),null!=e?e:{}))return t;yt(t,"already-initialized")}return n.initialize({options:e})}(t,{popupRedirectResolver:Rn,persistence:[Ye,Me,Ue]})}();document.body.appendChild(function e(){!function(){const t=document.querySelector(".sidebar"),e=document.querySelector(".header"),n=document.querySelector(".add__button");t.classList.add("hide"),e.classList.add("hide"),n.classList.add("hide")}();const n=i("div","login__container");return n.innerHTML='\n        <div class="form__container">\n    <form action="" class="form">\n    <h2 class="login__title"><i class="fas fa-business-time"> Productiv</i></h2>\n      <div class="form__wrapper">\n        <div class="form__signup ">Sign Up</div>\n        <div class="form__login">Login</div>\n        <div class="form__cover"></div>\n      </div>\n      <div class="form2">\n        <div class="form__section signup">\n        <div class="form__group">\n          <input id="signup__email" type="text" class="form__input" placeholder="">\n          <label class="form__label" for="email">Email</label>\n        </div>\n        <div class="form__group">\n            <input id="signup__password" type="password" class="form__input" placeholder="">\n            <label class="form__label" for="password">Password</label>\n         </div>\n        <div class="form__group">\n            <input id="username" type="text" class="form__input" placeholder="">\n            <label class="form__label" for="username">Username</label>\n        </div>\n        <button type="submit" id="signup" class="form__button">Sign-Up</button>\n        \n      </div>\n        \n       <div class="form__section login hide">\n        <div class="form__group">\n          <input id="login__email" type="text" class="form__input" placeholder="">\n          <label class="form__label" for="email">Email</label>\n        </div>\n        <div class="form__group">\n            <input id="login__password" type="password" class="form__input" placeholder="">\n            <label class="form__label" for="password">Password</label>\n         </div>\n        <button type="submit" id="login" class="form__button">Login</button>\n        <button type="submit" id="demo" class="form__button">Login As Demo User</button>\n      </div>\n      </div>\n      </div>\n    </form>\n  </div>\n    ',qn.appendChild(n),function(){const n=document.querySelector(".form"),s=document.querySelector(".form__signup"),i=document.querySelector(".form__login"),r=document.querySelector(".form__cover"),o=document.querySelector(".signup"),a=document.querySelector(".login"),c=document.getElementById("login"),u=document.getElementById("signup"),l=document.getElementById("logout"),h=(document.querySelector(".login__container"),document.getElementById("sidebar__logout")),d=document.getElementById("demo");let f="signup";function p(){(function(t){return F(t).signOut()})(pp).then((()=>{console.log("user signed out"),e(),n.reset(),document.location.reload()})).catch((t=>{console.log(t.message)}))}(function(e,n,s,i){F(e).onAuthStateChanged((e=>{e&&(console.log(e),xn(e.displayName),jn(),Hn(),async function(e){console.log("get all data called"),console.log(e),(await function(t){t=ef(t,of);const e=ef(t.firestore,lf),n=hf(e),s=new Hf(e);return function(t){if(Pc(t)&&0===t.explicitOrderBy.length)throw new pa(fa.UNIMPLEMENTED,"limitToLast() queries require specifying at least one orderBy() clause")}(t._query),function(t,e,n={}){const s=new ma;return t.asyncQueue.enqueueAndForget((async()=>function(t,e,n,s,i){const r=new Hd({next:n=>{e.enqueueAndForget((()=>dd(t,o))),n.fromCache&&"server"===s.source?i.reject(new pa(fa.UNAVAILABLE,'Failed to get documents from server. (However, these documents may exist in the local cache. Run again without setting source to "server" to retrieve the cached documents.)')):i.resolve(n)},error:t=>i.reject(t)}),o=new gd(n,r,{includeMetadataChanges:!0,wo:!0});return hd(t,o)}(await Gd(t),t.asyncQueue,e,n,s))),s.promise}(n,t._query).then((n=>new jf(e,s,t,n)))}(function(t,e,...n){if(t=F(t),Xd("collection","path",e),t instanceof sf){const s=Pa.fromString(e,...n);return Zd(s),new af(t,null,s)}{if(!(t instanceof rf||t instanceof af))throw new pa(fa.INVALID_ARGUMENT,"Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore");const s=t._path.child(Pa.fromString(e,...n));return Zd(s),new af(t.firestore,null,s)}}(zf,`${e}tasks`))).forEach((e=>{console.log(e.data()),e.data().dueDate<=t()&&"unread"===e.data().status&&(Kf.push(e.data()),E("add")),Gf.push(e.data())}))}(e.displayName))}),void 0,void 0)})(pp),i.addEventListener("click",(function(){console.log("login clicked"),r.classList.add("moveRight"),r.classList.remove("moveLeft"),a.classList.remove("hide"),o.classList.add("hide"),f="login"})),s.addEventListener("click",(function(){console.log("signup clicked"),r.classList.add("moveLeft"),r.classList.remove("moveRight"),o.classList.remove("hide"),a.classList.add("hide"),f="signup"})),c.addEventListener("click",(function(t){t.preventDefault();const e=document.getElementById("login__email").value,n=document.getElementById("login__password").value;(function(t,e,n){return async function(t,e){return De(he(t),e)}(F(t),Ee.credential(e,n))})(pp,e,n).then((t=>{console.log("user logged in",t.user.displayName),xn(t.user.displayName),t.user.photoURL&&(document.getElementById("profile").src=t.user.photoURL),jn(),Hn(),document.location.reload()})).catch((t=>{console.log(t.message)}))})),u.addEventListener("click",(function(t){t.preventDefault;const e=document.getElementById("signup__email").value,s=document.getElementById("signup__password").value,i=document.getElementById("username").value;console.log(i),async function(t,e,n){const s=he(t),i=await async function(t,e){return Mt(t,"POST","/v1/accounts:signUp",Lt(t,e))}(s,{returnSecureToken:!0,email:e,password:n}),r=await Ce._fromIdTokenResponse(s,"signIn",i);return await s._updateCurrentUser(r.user),r}(pp,e,s).then((t=>{console.log(t.user),async function(t,{displayName:e,photoURL:n}){if(void 0===e&&void 0===n)return;const s=F(t),i={idToken:await s.getIdToken(),displayName:e,photoUrl:n,returnSecureToken:!0},r=await Bt(s,async function(t,e){return Ot(t,"POST","/v1/accounts:update",e)}(s.auth,i));s.displayName=r.displayName||null,s.photoURL=r.photoUrl||null;const o=s.providerData.find((({providerId:t})=>"password"===t));o&&(o.displayName=s.displayName,o.photoURL=s.photoURL),await s._updateTokensIfNecessary(r)}(pp.currentUser,{displayName:i}),xn(i),jn()})).catch((t=>{console.log(t.message)})),n.reset()})),l.addEventListener("click",p),h.addEventListener("click",p),d.addEventListener("click",(function(t){t.preventDefault;const e=document.getElementById("login__email"),n=document.getElementById("login__password");e.value="demo@email.com",n.value="demo1234"}))}(),qn}()),window.addEventListener("DOMContentLoaded",(()=>{(function(){const t=document.getElementById("all"),e=document.getElementById("today"),n=document.getElementById("upcoming"),s=document.getElementById("overdue");t.addEventListener("click",Yf),e.addEventListener("click",Xf),n.addEventListener("click",Xf),s.addEventListener("click",Xf),hp.addEventListener("click",Qf),dp.addEventListener("click",Qf),fp.addEventListener("click",Qf),document.getElementById("inbox").addEventListener("click",tp),document.getElementById("calculator").addEventListener("click",ep),document.getElementById("pomodoro").addEventListener("click",op),lp.map((t=>{t.addEventListener("click",(t=>{!function(t){document.querySelector(".header__display").textContent=t.currentTarget.dataset.id,lp.map((t=>{t.classList.remove("active")})),[...document.querySelectorAll(".sidebar__sublinks")].map((t=>{t.classList.contains("showSub")||t.classList.remove("showSub")})),t.currentTarget.nextElementSibling?(t.currentTarget.classList.toggle("active"),t.currentTarget.nextElementSibling.classList.toggle("showSub")):t.currentTarget.classList.add("active")}(t)}))}))})(),function(){const t=document.getElementById("hamburger"),e=document.querySelector(".header__image"),n=document.getElementById("imgUpload");!function(t){t.children[0].src=Mn}(e),t.addEventListener("click",Un),n.addEventListener("change",Vn),e.addEventListener("click",Fn)}(),function(){const n=document.getElementById("add"),s=document.getElementById("create");n.addEventListener("click",(function(){document.querySelector(".form__heading").textContent="Add Task",e()}));const i=document.getElementById("close");document.getElementById("cancel").addEventListener("click",e),i.addEventListener("click",e),s.addEventListener("click",(n=>{!function(n){n.preventDefault();const s=document.getElementById("title").value,i=(document.getElementById("description").value,document.getElementById("date").value),r=(document.getElementById("priority").value,document.getElementById("project").value,document.querySelector(".title__error")),o=document.querySelector(".date__error");""===s.trim()&&(r.textContent="Title must not be blank",setTimeout((function(){r.textContent=" "}),2e3)),""===i&&(o.textContent="Please select a date",setTimeout((function(){o.textContent=" "}),2e3)),i<t()?(o.textContent="Date must not be in the past",setTimeout((function(){o.textContent=" "}),3e3)):function(n){n.preventDefault();const s=document.getElementById("title").value,i=document.getElementById("description").value,r=document.getElementById("date").value,o=document.getElementById("priority").value,a=document.getElementById("project").value,c=Math.random(),u=new Jf(s,i,r,o,a,c,"unread");Gf.push(u),async function(t,e,n,s,i,r,o){const a=cf(zf,`${Bn()}tasks`,String(r));await function(t,e,n){t=ef(t,rf);const s=ef(t.firestore,lf),i=function(t,e,n){let s;return s=t?n&&(n.merge||n.mergeFields)?t.toFirestore(e,n):t.toFirestore(e):e,s}(t.converter,e,n);return $f(s,[Tf(_f(s),"setDoc",t._key,i,null!==t.converter,n).toMutation(t._key,ru.none())])}(a,{title:t,description:e,dueDate:n,priority:s,project:i,id:r,status:"unread"})}(s,i,r,o,a,c),r===t()&&(Kf.unshift(u),E("add")),e(),"Inbox"===document.querySelector(".header__display").textContent&&y(Kf)}(n)}(n)}))}()}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,